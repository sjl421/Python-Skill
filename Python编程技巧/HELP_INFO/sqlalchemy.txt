Help on package sqlalchemy:

NAME
    sqlalchemy

FILE
    /anaconda2/lib/python2.7/site-packages/sqlalchemy/__init__.py

DESCRIPTION
    # sqlalchemy/__init__.py
    # Copyright (C) 2005-2018 the SQLAlchemy authors and contributors
    # <see AUTHORS file>
    #
    # This module is part of SQLAlchemy and is released under
    # the MIT License: http://www.opensource.org/licenses/mit-license.php

PACKAGE CONTENTS
    connectors (package)
    cprocessors
    cresultproxy
    cutils
    databases (package)
    dialects (package)
    engine (package)
    event (package)
    events
    exc
    ext (package)
    inspection
    interfaces
    log
    orm (package)
    pool
    processors
    schema
    sql (package)
    testing (package)
    types
    util (package)

CLASSES
    sqlalchemy.sql.base.DialectKWArgs(__builtin__.object)
        sqlalchemy.sql.schema.Constraint(sqlalchemy.sql.base.DialectKWArgs, sqlalchemy.sql.schema.SchemaItem)
        sqlalchemy.sql.schema.ForeignKey(sqlalchemy.sql.base.DialectKWArgs, sqlalchemy.sql.schema.SchemaItem)
        sqlalchemy.sql.schema.Index(sqlalchemy.sql.base.DialectKWArgs, sqlalchemy.sql.schema.ColumnCollectionMixin, sqlalchemy.sql.schema.SchemaItem)
        sqlalchemy.sql.schema.Table(sqlalchemy.sql.base.DialectKWArgs, sqlalchemy.sql.schema.SchemaItem, sqlalchemy.sql.selectable.TableClause)
    sqlalchemy.sql.base.SchemaEventTarget(__builtin__.object)
        sqlalchemy.sql.schema.FetchedValue(sqlalchemy.sql.schema._NotAColumnExpr, sqlalchemy.sql.base.SchemaEventTarget)
            sqlalchemy.sql.schema.DefaultClause
                sqlalchemy.sql.schema.PassiveDefault
        sqlalchemy.sql.sqltypes.ARRAY(sqlalchemy.sql.base.SchemaEventTarget, sqlalchemy.sql.sqltypes.Indexable, sqlalchemy.sql.sqltypes.Concatenable, sqlalchemy.sql.type_api.TypeEngine)
        sqlalchemy.sql.type_api.TypeDecorator(sqlalchemy.sql.base.SchemaEventTarget, sqlalchemy.sql.type_api.TypeEngine)
            sqlalchemy.sql.sqltypes.Interval(sqlalchemy.sql.type_api.Emulated, sqlalchemy.sql.sqltypes._AbstractInterval, sqlalchemy.sql.type_api.TypeDecorator)
            sqlalchemy.sql.sqltypes.PickleType
    sqlalchemy.sql.ddl.DDLElement(sqlalchemy.sql.base.Executable, sqlalchemy.sql.ddl._DDLCompiles)
        sqlalchemy.sql.ddl.DDL
    sqlalchemy.sql.elements.ColumnClause(sqlalchemy.sql.base.Immutable, sqlalchemy.sql.elements.ColumnElement)
        sqlalchemy.sql.schema.Column(sqlalchemy.sql.schema.SchemaItem, sqlalchemy.sql.elements.ColumnClause)
    sqlalchemy.sql.schema.ColumnCollectionConstraint(sqlalchemy.sql.schema.ColumnCollectionMixin, sqlalchemy.sql.schema.Constraint)
        sqlalchemy.sql.schema.CheckConstraint
        sqlalchemy.sql.schema.ForeignKeyConstraint
        sqlalchemy.sql.schema.PrimaryKeyConstraint
        sqlalchemy.sql.schema.UniqueConstraint
    sqlalchemy.sql.schema.ColumnCollectionMixin(__builtin__.object)
        sqlalchemy.sql.schema.Index(sqlalchemy.sql.base.DialectKWArgs, sqlalchemy.sql.schema.ColumnCollectionMixin, sqlalchemy.sql.schema.SchemaItem)
    sqlalchemy.sql.schema.DefaultGenerator(sqlalchemy.sql.schema._NotAColumnExpr, sqlalchemy.sql.schema.SchemaItem)
        sqlalchemy.sql.schema.ColumnDefault
        sqlalchemy.sql.schema.Sequence
    sqlalchemy.sql.schema.SchemaItem(sqlalchemy.sql.base.SchemaEventTarget, sqlalchemy.sql.visitors.Visitable)
        sqlalchemy.sql.schema.Column(sqlalchemy.sql.schema.SchemaItem, sqlalchemy.sql.elements.ColumnClause)
        sqlalchemy.sql.schema.Constraint(sqlalchemy.sql.base.DialectKWArgs, sqlalchemy.sql.schema.SchemaItem)
        sqlalchemy.sql.schema.ForeignKey(sqlalchemy.sql.base.DialectKWArgs, sqlalchemy.sql.schema.SchemaItem)
        sqlalchemy.sql.schema.Index(sqlalchemy.sql.base.DialectKWArgs, sqlalchemy.sql.schema.ColumnCollectionMixin, sqlalchemy.sql.schema.SchemaItem)
        sqlalchemy.sql.schema.MetaData
            sqlalchemy.sql.schema.ThreadLocalMetaData
        sqlalchemy.sql.schema.Table(sqlalchemy.sql.base.DialectKWArgs, sqlalchemy.sql.schema.SchemaItem, sqlalchemy.sql.selectable.TableClause)
    sqlalchemy.sql.schema._NotAColumnExpr(__builtin__.object)
        sqlalchemy.sql.schema.FetchedValue(sqlalchemy.sql.schema._NotAColumnExpr, sqlalchemy.sql.base.SchemaEventTarget)
            sqlalchemy.sql.schema.DefaultClause
                sqlalchemy.sql.schema.PassiveDefault
    sqlalchemy.sql.selectable.TableClause(sqlalchemy.sql.base.Immutable, sqlalchemy.sql.selectable.FromClause)
        sqlalchemy.sql.schema.Table(sqlalchemy.sql.base.DialectKWArgs, sqlalchemy.sql.schema.SchemaItem, sqlalchemy.sql.selectable.TableClause)
    sqlalchemy.sql.sqltypes.Concatenable(__builtin__.object)
        sqlalchemy.sql.sqltypes.ARRAY(sqlalchemy.sql.base.SchemaEventTarget, sqlalchemy.sql.sqltypes.Indexable, sqlalchemy.sql.sqltypes.Concatenable, sqlalchemy.sql.type_api.TypeEngine)
        sqlalchemy.sql.sqltypes.String(sqlalchemy.sql.sqltypes.Concatenable, sqlalchemy.sql.type_api.TypeEngine)
            sqlalchemy.sql.sqltypes.CHAR
            sqlalchemy.sql.sqltypes.Enum(sqlalchemy.sql.type_api.Emulated, sqlalchemy.sql.sqltypes.String, sqlalchemy.sql.sqltypes.SchemaType)
            sqlalchemy.sql.sqltypes.Text
                sqlalchemy.sql.sqltypes.CLOB
                sqlalchemy.sql.sqltypes.TEXT
                sqlalchemy.sql.sqltypes.UnicodeText
            sqlalchemy.sql.sqltypes.Unicode
                sqlalchemy.sql.sqltypes.NCHAR
                sqlalchemy.sql.sqltypes.NVARCHAR
            sqlalchemy.sql.sqltypes.VARCHAR
    sqlalchemy.sql.sqltypes.Indexable(__builtin__.object)
        sqlalchemy.sql.sqltypes.ARRAY(sqlalchemy.sql.base.SchemaEventTarget, sqlalchemy.sql.sqltypes.Indexable, sqlalchemy.sql.sqltypes.Concatenable, sqlalchemy.sql.type_api.TypeEngine)
        sqlalchemy.sql.sqltypes.JSON(sqlalchemy.sql.sqltypes.Indexable, sqlalchemy.sql.type_api.TypeEngine)
    sqlalchemy.sql.sqltypes.SchemaType(sqlalchemy.sql.base.SchemaEventTarget)
        sqlalchemy.sql.sqltypes.Boolean(sqlalchemy.sql.type_api.Emulated, sqlalchemy.sql.type_api.TypeEngine, sqlalchemy.sql.sqltypes.SchemaType)
            sqlalchemy.sql.sqltypes.BOOLEAN
    sqlalchemy.sql.sqltypes._AbstractInterval(sqlalchemy.sql.sqltypes._LookupExpressionAdapter, sqlalchemy.sql.type_api.TypeEngine)
        sqlalchemy.sql.sqltypes.Interval(sqlalchemy.sql.type_api.Emulated, sqlalchemy.sql.sqltypes._AbstractInterval, sqlalchemy.sql.type_api.TypeDecorator)
    sqlalchemy.sql.sqltypes._Binary(sqlalchemy.sql.type_api.TypeEngine)
        sqlalchemy.sql.sqltypes.BINARY
        sqlalchemy.sql.sqltypes.LargeBinary
            sqlalchemy.sql.sqltypes.BLOB
            sqlalchemy.sql.sqltypes.Binary
        sqlalchemy.sql.sqltypes.VARBINARY
    sqlalchemy.sql.sqltypes._LookupExpressionAdapter(__builtin__.object)
        sqlalchemy.sql.sqltypes.Date(sqlalchemy.sql.sqltypes._LookupExpressionAdapter, sqlalchemy.sql.type_api.TypeEngine)
            sqlalchemy.sql.sqltypes.DATE
        sqlalchemy.sql.sqltypes.DateTime(sqlalchemy.sql.sqltypes._LookupExpressionAdapter, sqlalchemy.sql.type_api.TypeEngine)
            sqlalchemy.sql.sqltypes.DATETIME
            sqlalchemy.sql.sqltypes.TIMESTAMP
        sqlalchemy.sql.sqltypes.Integer(sqlalchemy.sql.sqltypes._LookupExpressionAdapter, sqlalchemy.sql.type_api.TypeEngine)
            sqlalchemy.sql.sqltypes.BigInteger
                sqlalchemy.sql.sqltypes.BIGINT
            sqlalchemy.sql.sqltypes.INTEGER
            sqlalchemy.sql.sqltypes.SmallInteger
                sqlalchemy.sql.sqltypes.SMALLINT
        sqlalchemy.sql.sqltypes.Numeric(sqlalchemy.sql.sqltypes._LookupExpressionAdapter, sqlalchemy.sql.type_api.TypeEngine)
            sqlalchemy.sql.sqltypes.DECIMAL
            sqlalchemy.sql.sqltypes.Float
                sqlalchemy.sql.sqltypes.FLOAT
                sqlalchemy.sql.sqltypes.REAL
            sqlalchemy.sql.sqltypes.NUMERIC
        sqlalchemy.sql.sqltypes.Time(sqlalchemy.sql.sqltypes._LookupExpressionAdapter, sqlalchemy.sql.type_api.TypeEngine)
            sqlalchemy.sql.sqltypes.TIME
    sqlalchemy.sql.type_api.Emulated(__builtin__.object)
        sqlalchemy.sql.sqltypes.Boolean(sqlalchemy.sql.type_api.Emulated, sqlalchemy.sql.type_api.TypeEngine, sqlalchemy.sql.sqltypes.SchemaType)
            sqlalchemy.sql.sqltypes.BOOLEAN
        sqlalchemy.sql.sqltypes.Enum(sqlalchemy.sql.type_api.Emulated, sqlalchemy.sql.sqltypes.String, sqlalchemy.sql.sqltypes.SchemaType)
        sqlalchemy.sql.sqltypes.Interval(sqlalchemy.sql.type_api.Emulated, sqlalchemy.sql.sqltypes._AbstractInterval, sqlalchemy.sql.type_api.TypeDecorator)
    sqlalchemy.sql.type_api.TypeEngine(sqlalchemy.sql.visitors.Visitable)
        sqlalchemy.sql.sqltypes.ARRAY(sqlalchemy.sql.base.SchemaEventTarget, sqlalchemy.sql.sqltypes.Indexable, sqlalchemy.sql.sqltypes.Concatenable, sqlalchemy.sql.type_api.TypeEngine)
        sqlalchemy.sql.sqltypes.Boolean(sqlalchemy.sql.type_api.Emulated, sqlalchemy.sql.type_api.TypeEngine, sqlalchemy.sql.sqltypes.SchemaType)
            sqlalchemy.sql.sqltypes.BOOLEAN
        sqlalchemy.sql.sqltypes.Date(sqlalchemy.sql.sqltypes._LookupExpressionAdapter, sqlalchemy.sql.type_api.TypeEngine)
            sqlalchemy.sql.sqltypes.DATE
        sqlalchemy.sql.sqltypes.DateTime(sqlalchemy.sql.sqltypes._LookupExpressionAdapter, sqlalchemy.sql.type_api.TypeEngine)
            sqlalchemy.sql.sqltypes.DATETIME
            sqlalchemy.sql.sqltypes.TIMESTAMP
        sqlalchemy.sql.sqltypes.Integer(sqlalchemy.sql.sqltypes._LookupExpressionAdapter, sqlalchemy.sql.type_api.TypeEngine)
            sqlalchemy.sql.sqltypes.BigInteger
                sqlalchemy.sql.sqltypes.BIGINT
            sqlalchemy.sql.sqltypes.INTEGER
            sqlalchemy.sql.sqltypes.SmallInteger
                sqlalchemy.sql.sqltypes.SMALLINT
        sqlalchemy.sql.sqltypes.JSON(sqlalchemy.sql.sqltypes.Indexable, sqlalchemy.sql.type_api.TypeEngine)
        sqlalchemy.sql.sqltypes.Numeric(sqlalchemy.sql.sqltypes._LookupExpressionAdapter, sqlalchemy.sql.type_api.TypeEngine)
            sqlalchemy.sql.sqltypes.DECIMAL
            sqlalchemy.sql.sqltypes.Float
                sqlalchemy.sql.sqltypes.FLOAT
                sqlalchemy.sql.sqltypes.REAL
            sqlalchemy.sql.sqltypes.NUMERIC
        sqlalchemy.sql.sqltypes.String(sqlalchemy.sql.sqltypes.Concatenable, sqlalchemy.sql.type_api.TypeEngine)
            sqlalchemy.sql.sqltypes.CHAR
            sqlalchemy.sql.sqltypes.Enum(sqlalchemy.sql.type_api.Emulated, sqlalchemy.sql.sqltypes.String, sqlalchemy.sql.sqltypes.SchemaType)
            sqlalchemy.sql.sqltypes.Text
                sqlalchemy.sql.sqltypes.CLOB
                sqlalchemy.sql.sqltypes.TEXT
                sqlalchemy.sql.sqltypes.UnicodeText
            sqlalchemy.sql.sqltypes.Unicode
                sqlalchemy.sql.sqltypes.NCHAR
                sqlalchemy.sql.sqltypes.NVARCHAR
            sqlalchemy.sql.sqltypes.VARCHAR
        sqlalchemy.sql.sqltypes.Time(sqlalchemy.sql.sqltypes._LookupExpressionAdapter, sqlalchemy.sql.type_api.TypeEngine)
            sqlalchemy.sql.sqltypes.TIME
        sqlalchemy.sql.type_api.TypeDecorator(sqlalchemy.sql.base.SchemaEventTarget, sqlalchemy.sql.type_api.TypeEngine)
            sqlalchemy.sql.sqltypes.Interval(sqlalchemy.sql.type_api.Emulated, sqlalchemy.sql.sqltypes._AbstractInterval, sqlalchemy.sql.type_api.TypeDecorator)
            sqlalchemy.sql.sqltypes.PickleType
    
    class ARRAY(sqlalchemy.sql.base.SchemaEventTarget, Indexable, Concatenable, sqlalchemy.sql.type_api.TypeEngine)
     |  Represent a SQL Array type.
     |  
     |  .. note::  This type serves as the basis for all ARRAY operations.
     |     However, currently **only the PostgreSQL backend has support
     |     for SQL arrays in SQLAlchemy**.  It is recommended to use the
     |     :class:`.postgresql.ARRAY` type directly when using ARRAY types
     |     with PostgreSQL, as it provides additional operators specific
     |     to that backend.
     |  
     |  :class:`.types.ARRAY` is part of the Core in support of various SQL standard
     |  functions such as :class:`.array_agg` which explicitly involve arrays;
     |  however, with the exception of the PostgreSQL backend and possibly
     |  some third-party dialects, no other SQLAlchemy built-in dialect has
     |  support for this type.
     |  
     |  An :class:`.types.ARRAY` type is constructed given the "type"
     |  of element::
     |  
     |      mytable = Table("mytable", metadata,
     |              Column("data", ARRAY(Integer))
     |          )
     |  
     |  The above type represents an N-dimensional array,
     |  meaning a supporting backend such as PostgreSQL will interpret values
     |  with any number of dimensions automatically.   To produce an INSERT
     |  construct that passes in a 1-dimensional array of integers::
     |  
     |      connection.execute(
     |              mytable.insert(),
     |              data=[1,2,3]
     |      )
     |  
     |  The :class:`.types.ARRAY` type can be constructed given a fixed number
     |  of dimensions::
     |  
     |      mytable = Table("mytable", metadata,
     |              Column("data", ARRAY(Integer, dimensions=2))
     |          )
     |  
     |  Sending a number of dimensions is optional, but recommended if the
     |  datatype is to represent arrays of more than one dimension.  This number
     |  is used:
     |  
     |  * When emitting the type declaration itself to the database, e.g.
     |    ``INTEGER[][]``
     |  
     |  * When translating Python values to database values, and vice versa, e.g.
     |    an ARRAY of :class:`.Unicode` objects uses this number to efficiently
     |    access the string values inside of array structures without resorting
     |    to per-row type inspection
     |  
     |  * When used with the Python ``getitem`` accessor, the number of dimensions
     |    serves to define the kind of type that the ``[]`` operator should
     |    return, e.g. for an ARRAY of INTEGER with two dimensions::
     |  
     |          >>> expr = table.c.column[5]  # returns ARRAY(Integer, dimensions=1)
     |          >>> expr = expr[6]  # returns Integer
     |  
     |  For 1-dimensional arrays, an :class:`.types.ARRAY` instance with no
     |  dimension parameter will generally assume single-dimensional behaviors.
     |  
     |  SQL expressions of type :class:`.types.ARRAY` have support for "index" and
     |  "slice" behavior.  The Python ``[]`` operator works normally here, given
     |  integer indexes or slices.  Arrays default to 1-based indexing.
     |  The operator produces binary expression
     |  constructs which will produce the appropriate SQL, both for
     |  SELECT statements::
     |  
     |      select([mytable.c.data[5], mytable.c.data[2:7]])
     |  
     |  as well as UPDATE statements when the :meth:`.Update.values` method
     |  is used::
     |  
     |      mytable.update().values({
     |          mytable.c.data[5]: 7,
     |          mytable.c.data[2:7]: [1, 2, 3]
     |      })
     |  
     |  The :class:`.types.ARRAY` type also provides for the operators
     |  :meth:`.types.ARRAY.Comparator.any` and :meth:`.types.ARRAY.Comparator.all`.
     |  The PostgreSQL-specific version of :class:`.types.ARRAY` also provides additional
     |  operators.
     |  
     |  .. versionadded:: 1.1.0
     |  
     |  .. seealso::
     |  
     |      :class:`.postgresql.ARRAY`
     |  
     |  Method resolution order:
     |      ARRAY
     |      sqlalchemy.sql.base.SchemaEventTarget
     |      Indexable
     |      Concatenable
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, item_type, as_tuple=False, dimensions=None, zero_indexes=False)
     |      Construct an :class:`.types.ARRAY`.
     |      
     |      E.g.::
     |      
     |        Column('myarray', ARRAY(Integer))
     |      
     |      Arguments are:
     |      
     |      :param item_type: The data type of items of this array. Note that
     |        dimensionality is irrelevant here, so multi-dimensional arrays like
     |        ``INTEGER[][]``, are constructed as ``ARRAY(Integer)``, not as
     |        ``ARRAY(ARRAY(Integer))`` or such.
     |      
     |      :param as_tuple=False: Specify whether return results
     |        should be converted to tuples from lists.  This parameter is
     |        not generally needed as a Python list corresponds well
     |        to a SQL array.
     |      
     |      :param dimensions: if non-None, the ARRAY will assume a fixed
     |       number of dimensions.   This impacts how the array is declared
     |       on the database, how it goes about interpreting Python and
     |       result values, as well as how expression behavior in conjunction
     |       with the "getitem" operator works.  See the description at
     |       :class:`.types.ARRAY` for additional detail.
     |      
     |      :param zero_indexes=False: when True, index values will be converted
     |       between Python zero-based and SQL one-based indexes, e.g.
     |       a value of one will be added to all index values before passing
     |       to the database.
     |  
     |  compare_values(self, x, y)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  hashable
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |      Define comparison operations for :class:`.types.ARRAY`.
     |      
     |      More operators are available on the dialect-specific form
     |      of this type.  See :class:`.postgresql.ARRAY.Comparator`.
     |  
     |  __visit_name__ = 'ARRAY'
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |      Define comparison operations for :class:`.types.ARRAY`.
     |      
     |      More operators are available on the dialect-specific form
     |      of this type.  See :class:`.postgresql.ARRAY.Comparator`.
     |  
     |  zero_indexes = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  dispatch = <sqlalchemy.event.base.DDLEventsDispatch object>
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  get_dbapi_type(self, dbapi)
     |      Return the corresponding type object from the underlying DB-API, if
     |      any.
     |      
     |       This can be useful for calling ``setinputsizes()``, for example.
     |  
     |  literal_processor(self, dialect)
     |      Return a conversion function for processing literal values that are
     |      to be rendered directly without using binds.
     |      
     |      This function is used when the compiler makes use of the
     |      "literal_binds" flag, typically used in DDL generation as well
     |      as in certain scenarios where backends don't accept bound parameters.
     |      
     |      .. versionadded:: 0.9.0
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  should_evaluate_none = False
    
    class BIGINT(BigInteger)
     |  The SQL BIGINT type.
     |  
     |  Method resolution order:
     |      BIGINT
     |      BigInteger
     |      Integer
     |      _LookupExpressionAdapter
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'BIGINT'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Integer:
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Integer:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _LookupExpressionAdapter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _LookupExpressionAdapter:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class BINARY(_Binary)
     |  The SQL BINARY type.
     |  
     |  Method resolution order:
     |      BINARY
     |      _Binary
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'BINARY'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _Binary:
     |  
     |  __init__(self, length=None)
     |  
     |  bind_processor(self, dialect)
     |      # Python 3 - sqlite3 doesn't need the `Binary` conversion
     |      # here, though pg8000 does to indicate "bytea"
     |  
     |  coerce_compared_value(self, op, value)
     |      See :meth:`.TypeEngine.coerce_compared_value` for a description.
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _Binary:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  Comparator = <class 'sqlalchemy.sql.type_api.Comparator'>
     |      Base class for custom comparison operations defined at the
     |      type level.  See :attr:`.TypeEngine.comparator_factory`.
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.type_api.Comparator'>
     |      Base class for custom comparison operations defined at the
     |      type level.  See :attr:`.TypeEngine.comparator_factory`.
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class BLOB(LargeBinary)
     |  The SQL BLOB type.
     |  
     |  Method resolution order:
     |      BLOB
     |      LargeBinary
     |      _Binary
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'BLOB'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from LargeBinary:
     |  
     |  __init__(self, length=None)
     |      Construct a LargeBinary type.
     |      
     |      :param length: optional, a length for the column for use in
     |        DDL statements, for those binary types that accept a length,
     |        such as the MySQL BLOB type.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _Binary:
     |  
     |  bind_processor(self, dialect)
     |      # Python 3 - sqlite3 doesn't need the `Binary` conversion
     |      # here, though pg8000 does to indicate "bytea"
     |  
     |  coerce_compared_value(self, op, value)
     |      See :meth:`.TypeEngine.coerce_compared_value` for a description.
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _Binary:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  Comparator = <class 'sqlalchemy.sql.type_api.Comparator'>
     |      Base class for custom comparison operations defined at the
     |      type level.  See :attr:`.TypeEngine.comparator_factory`.
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.type_api.Comparator'>
     |      Base class for custom comparison operations defined at the
     |      type level.  See :attr:`.TypeEngine.comparator_factory`.
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class BOOLEAN(Boolean)
     |  The SQL BOOLEAN type.
     |  
     |  Method resolution order:
     |      BOOLEAN
     |      Boolean
     |      sqlalchemy.sql.type_api.Emulated
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      SchemaType
     |      sqlalchemy.sql.base.SchemaEventTarget
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'BOOLEAN'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boolean:
     |  
     |  __init__(self, create_constraint=True, name=None, _create_events=True)
     |      Construct a Boolean.
     |      
     |      :param create_constraint: defaults to True.  If the boolean
     |        is generated as an int/smallint, also create a CHECK constraint
     |        on the table that ensures 1 or 0 as a value.
     |      
     |      :param name: if a CHECK constraint is generated, specify
     |        the name of the constraint.
     |  
     |  bind_processor(self, dialect)
     |  
     |  literal_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boolean:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boolean:
     |  
     |  native = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.Emulated:
     |  
     |  adapt(self, impltype, **kw)
     |  
     |  adapt_to_emulated(self, impltype, **kw)
     |      Given an impl class, adapt this type to the impl assuming "emulated".
     |      
     |      The impl should also be an "emulated" version of this type,
     |      most likely the same class as this type itself.
     |      
     |      e.g.: sqltypes.Enum adapts to the Enum class.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.type_api.Emulated:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  get_dbapi_type(self, dbapi)
     |      Return the corresponding type object from the underlying DB-API, if
     |      any.
     |      
     |       This can be useful for calling ``setinputsizes()``, for example.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  Comparator = <class 'sqlalchemy.sql.type_api.Comparator'>
     |      Base class for custom comparison operations defined at the
     |      type level.  See :attr:`.TypeEngine.comparator_factory`.
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.type_api.Comparator'>
     |      Base class for custom comparison operations defined at the
     |      type level.  See :attr:`.TypeEngine.comparator_factory`.
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaType:
     |  
     |  create(self, bind=None, checkfirst=False)
     |      Issue CREATE ddl for this type, if applicable.
     |  
     |  drop(self, bind=None, checkfirst=False)
     |      Issue DROP ddl for this type, if applicable.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SchemaType:
     |  
     |  bind
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  dispatch = <sqlalchemy.event.base.DDLEventsDispatch object>
    
    class BigInteger(Integer)
     |  A type for bigger ``int`` integers.
     |  
     |  Typically generates a ``BIGINT`` in DDL, and otherwise acts like
     |  a normal :class:`.Integer` on the Python side.
     |  
     |  Method resolution order:
     |      BigInteger
     |      Integer
     |      _LookupExpressionAdapter
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'big_integer'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Integer:
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Integer:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _LookupExpressionAdapter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _LookupExpressionAdapter:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class Binary(LargeBinary)
     |  Deprecated.  Renamed to LargeBinary.
     |  
     |  Method resolution order:
     |      Binary
     |      LargeBinary
     |      _Binary
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, *arg, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from LargeBinary:
     |  
     |  __visit_name__ = 'large_binary'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _Binary:
     |  
     |  bind_processor(self, dialect)
     |      # Python 3 - sqlite3 doesn't need the `Binary` conversion
     |      # here, though pg8000 does to indicate "bytea"
     |  
     |  coerce_compared_value(self, op, value)
     |      See :meth:`.TypeEngine.coerce_compared_value` for a description.
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _Binary:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  Comparator = <class 'sqlalchemy.sql.type_api.Comparator'>
     |      Base class for custom comparison operations defined at the
     |      type level.  See :attr:`.TypeEngine.comparator_factory`.
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.type_api.Comparator'>
     |      Base class for custom comparison operations defined at the
     |      type level.  See :attr:`.TypeEngine.comparator_factory`.
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Boolean(sqlalchemy.sql.type_api.Emulated, sqlalchemy.sql.type_api.TypeEngine, SchemaType)
     |  A bool datatype.
     |  
     |  :class:`.Boolean` typically uses BOOLEAN or SMALLINT on the DDL side, and on
     |  the Python side deals in ``True`` or ``False``.
     |  
     |  The :class:`.Boolean` datatype currently has two levels of assertion
     |  that the values persisted are simple true/false values.  For all
     |  backends, only the Python values ``None``, ``True``, ``False``, ``1``
     |  or ``0`` are accepted as parameter values.   For those backends that
     |  don't support a "native boolean" datatype, a CHECK constraint is also
     |  created on the target column.   Production of the CHECK constraint
     |  can be disabled by passing the :paramref:`.Boolean.create_constraint`
     |  flag set to ``False``.
     |  
     |  .. versionchanged:: 1.2 the :class:`.Boolean` datatype now asserts that
     |     incoming Python values are already in pure boolean form.
     |  
     |  Method resolution order:
     |      Boolean
     |      sqlalchemy.sql.type_api.Emulated
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      SchemaType
     |      sqlalchemy.sql.base.SchemaEventTarget
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, create_constraint=True, name=None, _create_events=True)
     |      Construct a Boolean.
     |      
     |      :param create_constraint: defaults to True.  If the boolean
     |        is generated as an int/smallint, also create a CHECK constraint
     |        on the table that ensures 1 or 0 as a value.
     |      
     |      :param name: if a CHECK constraint is generated, specify
     |        the name of the constraint.
     |  
     |  bind_processor(self, dialect)
     |  
     |  literal_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'boolean'
     |  
     |  native = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.Emulated:
     |  
     |  adapt(self, impltype, **kw)
     |  
     |  adapt_to_emulated(self, impltype, **kw)
     |      Given an impl class, adapt this type to the impl assuming "emulated".
     |      
     |      The impl should also be an "emulated" version of this type,
     |      most likely the same class as this type itself.
     |      
     |      e.g.: sqltypes.Enum adapts to the Enum class.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.type_api.Emulated:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  get_dbapi_type(self, dbapi)
     |      Return the corresponding type object from the underlying DB-API, if
     |      any.
     |      
     |       This can be useful for calling ``setinputsizes()``, for example.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  Comparator = <class 'sqlalchemy.sql.type_api.Comparator'>
     |      Base class for custom comparison operations defined at the
     |      type level.  See :attr:`.TypeEngine.comparator_factory`.
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.type_api.Comparator'>
     |      Base class for custom comparison operations defined at the
     |      type level.  See :attr:`.TypeEngine.comparator_factory`.
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaType:
     |  
     |  create(self, bind=None, checkfirst=False)
     |      Issue CREATE ddl for this type, if applicable.
     |  
     |  drop(self, bind=None, checkfirst=False)
     |      Issue DROP ddl for this type, if applicable.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SchemaType:
     |  
     |  bind
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  dispatch = <sqlalchemy.event.base.DDLEventsDispatch object>
    
    class CHAR(String)
     |  The SQL CHAR type.
     |  
     |  Method resolution order:
     |      CHAR
     |      String
     |      Concatenable
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'CHAR'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String:
     |  
     |  __init__(self, length=None, collation=None, convert_unicode=False, unicode_error=None, _warn_on_bytestring=False)
     |      Create a string-holding type.
     |      
     |      :param length: optional, a length for the column for use in
     |        DDL and CAST expressions.  May be safely omitted if no ``CREATE
     |        TABLE`` will be issued.  Certain databases may require a
     |        ``length`` for use in DDL, and will raise an exception when
     |        the ``CREATE TABLE`` DDL is issued if a ``VARCHAR``
     |        with no length is included.  Whether the value is
     |        interpreted as bytes or characters is database specific.
     |      
     |      :param collation: Optional, a column-level collation for
     |        use in DDL and CAST expressions.  Renders using the
     |        COLLATE keyword supported by SQLite, MySQL, and PostgreSQL.
     |        E.g.::
     |      
     |          >>> from sqlalchemy import cast, select, String
     |          >>> print select([cast('some string', String(collation='utf8'))])
     |          SELECT CAST(:param_1 AS VARCHAR COLLATE utf8) AS anon_1
     |      
     |        .. versionadded:: 0.8 Added support for COLLATE to all
     |           string types.
     |      
     |      :param convert_unicode: When set to ``True``, the
     |        :class:`.String` type will assume that
     |        input is to be passed as Python ``unicode`` objects,
     |        and results returned as Python ``unicode`` objects.
     |        If the DBAPI in use does not support Python unicode
     |        (which is fewer and fewer these days), SQLAlchemy
     |        will encode/decode the value, using the
     |        value of the ``encoding`` parameter passed to
     |        :func:`.create_engine` as the encoding.
     |      
     |        When using a DBAPI that natively supports Python
     |        unicode objects, this flag generally does not
     |        need to be set.  For columns that are explicitly
     |        intended to store non-ASCII data, the :class:`.Unicode`
     |        or :class:`.UnicodeText`
     |        types should be used regardless, which feature
     |        the same behavior of ``convert_unicode`` but
     |        also indicate an underlying column type that
     |        directly supports unicode, such as ``NVARCHAR``.
     |      
     |        For the extremely rare case that Python ``unicode``
     |        is to be encoded/decoded by SQLAlchemy on a backend
     |        that does natively support Python ``unicode``,
     |        the value ``force`` can be passed here which will
     |        cause SQLAlchemy's encode/decode services to be
     |        used unconditionally.
     |      
     |      :param unicode_error: Optional, a method to use to handle Unicode
     |        conversion errors. Behaves like the ``errors`` keyword argument to
     |        the standard library's ``string.decode()`` functions.   This flag
     |        requires that ``convert_unicode`` is set to ``force`` - otherwise,
     |        SQLAlchemy is not guaranteed to handle the task of unicode
     |        conversion.   Note that this flag adds significant performance
     |        overhead to row-fetching operations for backends that already
     |        return unicode objects natively (which most DBAPIs do).  This
     |        flag should only be used as a last resort for reading
     |        strings from a column with varied or corrupted encodings.
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from String:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Concatenable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Concatenable:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class CLOB(Text)
     |  The CLOB type.
     |  
     |  This type is found in Oracle and Informix.
     |  
     |  Method resolution order:
     |      CLOB
     |      Text
     |      String
     |      Concatenable
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'CLOB'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String:
     |  
     |  __init__(self, length=None, collation=None, convert_unicode=False, unicode_error=None, _warn_on_bytestring=False)
     |      Create a string-holding type.
     |      
     |      :param length: optional, a length for the column for use in
     |        DDL and CAST expressions.  May be safely omitted if no ``CREATE
     |        TABLE`` will be issued.  Certain databases may require a
     |        ``length`` for use in DDL, and will raise an exception when
     |        the ``CREATE TABLE`` DDL is issued if a ``VARCHAR``
     |        with no length is included.  Whether the value is
     |        interpreted as bytes or characters is database specific.
     |      
     |      :param collation: Optional, a column-level collation for
     |        use in DDL and CAST expressions.  Renders using the
     |        COLLATE keyword supported by SQLite, MySQL, and PostgreSQL.
     |        E.g.::
     |      
     |          >>> from sqlalchemy import cast, select, String
     |          >>> print select([cast('some string', String(collation='utf8'))])
     |          SELECT CAST(:param_1 AS VARCHAR COLLATE utf8) AS anon_1
     |      
     |        .. versionadded:: 0.8 Added support for COLLATE to all
     |           string types.
     |      
     |      :param convert_unicode: When set to ``True``, the
     |        :class:`.String` type will assume that
     |        input is to be passed as Python ``unicode`` objects,
     |        and results returned as Python ``unicode`` objects.
     |        If the DBAPI in use does not support Python unicode
     |        (which is fewer and fewer these days), SQLAlchemy
     |        will encode/decode the value, using the
     |        value of the ``encoding`` parameter passed to
     |        :func:`.create_engine` as the encoding.
     |      
     |        When using a DBAPI that natively supports Python
     |        unicode objects, this flag generally does not
     |        need to be set.  For columns that are explicitly
     |        intended to store non-ASCII data, the :class:`.Unicode`
     |        or :class:`.UnicodeText`
     |        types should be used regardless, which feature
     |        the same behavior of ``convert_unicode`` but
     |        also indicate an underlying column type that
     |        directly supports unicode, such as ``NVARCHAR``.
     |      
     |        For the extremely rare case that Python ``unicode``
     |        is to be encoded/decoded by SQLAlchemy on a backend
     |        that does natively support Python ``unicode``,
     |        the value ``force`` can be passed here which will
     |        cause SQLAlchemy's encode/decode services to be
     |        used unconditionally.
     |      
     |      :param unicode_error: Optional, a method to use to handle Unicode
     |        conversion errors. Behaves like the ``errors`` keyword argument to
     |        the standard library's ``string.decode()`` functions.   This flag
     |        requires that ``convert_unicode`` is set to ``force`` - otherwise,
     |        SQLAlchemy is not guaranteed to handle the task of unicode
     |        conversion.   Note that this flag adds significant performance
     |        overhead to row-fetching operations for backends that already
     |        return unicode objects natively (which most DBAPIs do).  This
     |        flag should only be used as a last resort for reading
     |        strings from a column with varied or corrupted encodings.
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from String:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Concatenable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Concatenable:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class CheckConstraint(ColumnCollectionConstraint)
     |  A table- or column-level CHECK constraint.
     |  
     |  Can be included in the definition of a Table or Column.
     |  
     |  Method resolution order:
     |      CheckConstraint
     |      ColumnCollectionConstraint
     |      ColumnCollectionMixin
     |      Constraint
     |      sqlalchemy.sql.base.DialectKWArgs
     |      SchemaItem
     |      sqlalchemy.sql.base.SchemaEventTarget
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, sqltext, name=None, deferrable=None, initially=None, table=None, info=None, _create_rule=None, _autoattach=True, _type_bound=False)
     |      Construct a CHECK constraint.
     |      
     |      :param sqltext:
     |        A string containing the constraint definition, which will be used
     |        verbatim, or a SQL expression construct.   If given as a string,
     |        the object is converted to a :class:`.Text` object.   If the textual
     |        string includes a colon character, escape this using a backslash::
     |      
     |          CheckConstraint(r"foo ~ E'a(?\:b|c)d")
     |      
     |      :param name:
     |        Optional, the in-database name of the constraint.
     |      
     |      :param deferrable:
     |        Optional bool.  If set, emit DEFERRABLE or NOT DEFERRABLE when
     |        issuing DDL for this constraint.
     |      
     |      :param initially:
     |        Optional string.  If set, emit INITIALLY <value> when issuing DDL
     |        for this constraint.
     |      
     |      :param info: Optional data dictionary which will be populated into the
     |          :attr:`.SchemaItem.info` attribute of this object.
     |      
     |          .. versionadded:: 1.0.0
     |  
     |  copy(self, target_table=None, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __visit_name__
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ColumnCollectionConstraint:
     |  
     |  __contains__(self, x)
     |  
     |  __iter__(self)
     |  
     |  __len__(self)
     |  
     |  contains_column(self, col)
     |      Return True if this constraint contains the given column.
     |      
     |      Note that this object also contains an attribute ``.columns``
     |      which is a :class:`.ColumnCollection` of :class:`.Column` objects.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ColumnCollectionConstraint:
     |  
     |  columns = None
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ColumnCollectionMixin:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Constraint:
     |  
     |  table
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.DialectKWArgs:
     |  
     |  dialect_kwargs(...)
     |      A collection of keyword arguments specified as dialect-specific
     |      options to this construct.
     |      
     |      The arguments are present here in their original ``<dialect>_<kwarg>``
     |      format.  Only arguments that were actually passed are included;
     |      unlike the :attr:`.DialectKWArgs.dialect_options` collection, which
     |      contains all options known by this dialect including defaults.
     |      
     |      The collection is also writable; keys are accepted of the
     |      form ``<dialect>_<kwarg>`` where the value will be assembled
     |      into the list of options.
     |      
     |      .. versionadded:: 0.9.2
     |      
     |      .. versionchanged:: 0.9.4 The :attr:`.DialectKWArgs.dialect_kwargs`
     |         collection is now writable.
     |      
     |      .. seealso::
     |      
     |          :attr:`.DialectKWArgs.dialect_options` - nested dictionary form
     |  
     |  dialect_options(...)
     |      A collection of keyword arguments specified as dialect-specific
     |      options to this construct.
     |      
     |      This is a two-level nested registry, keyed to ``<dialect_name>``
     |      and ``<argument_name>``.  For example, the ``postgresql_where``
     |      argument would be locatable as::
     |      
     |          arg = my_object.dialect_options['postgresql']['where']
     |      
     |      .. versionadded:: 0.9.2
     |      
     |      .. seealso::
     |      
     |          :attr:`.DialectKWArgs.dialect_kwargs` - flat dictionary form
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from sqlalchemy.sql.base.DialectKWArgs:
     |  
     |  argument_for(cls, dialect_name, argument_name, default) from sqlalchemy.sql.visitors.VisitableType
     |      Add a new kind of dialect-specific keyword argument for this class.
     |      
     |      E.g.::
     |      
     |          Index.argument_for("mydialect", "length", None)
     |      
     |          some_index = Index('a', 'b', mydialect_length=5)
     |      
     |      The :meth:`.DialectKWArgs.argument_for` method is a per-argument
     |      way adding extra arguments to the
     |      :attr:`.DefaultDialect.construct_arguments` dictionary. This
     |      dictionary provides a list of argument names accepted by various
     |      schema-level constructs on behalf of a dialect.
     |      
     |      New dialects should typically specify this dictionary all at once as a
     |      data member of the dialect class.  The use case for ad-hoc addition of
     |      argument names is typically for end-user code that is also using
     |      a custom compilation scheme which consumes the additional arguments.
     |      
     |      :param dialect_name: name of a dialect.  The dialect must be
     |       locatable, else a :class:`.NoSuchModuleError` is raised.   The
     |       dialect must also include an existing
     |       :attr:`.DefaultDialect.construct_arguments` collection, indicating
     |       that it participates in the keyword-argument validation and default
     |       system, else :class:`.ArgumentError` is raised.  If the dialect does
     |       not include this collection, then any keyword argument can be
     |       specified on behalf of this dialect already.  All dialects packaged
     |       within SQLAlchemy include this collection, however for third party
     |       dialects, support may vary.
     |      
     |      :param argument_name: name of the parameter.
     |      
     |      :param default: default value of the parameter.
     |      
     |      .. versionadded:: 0.9.4
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.base.DialectKWArgs:
     |  
     |  kwargs
     |      A synonym for :attr:`.DialectKWArgs.dialect_kwargs`.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  __repr__(self)
     |  
     |  get_children(self, **kwargs)
     |      used to allow SchemaVisitor access
     |  
     |  info(...)
     |      Info dictionary associated with the object, allowing user-defined
     |      data to be associated with this :class:`.SchemaItem`.
     |      
     |      The dictionary is automatically generated when first accessed.
     |      It can also be specified in the constructor of some objects,
     |      such as :class:`.Table` and :class:`.Column`.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SchemaItem:
     |  
     |  quote
     |      Return the value of the ``quote`` flag passed
     |      to this schema object, for those schema items which
     |      have a ``name`` field.
     |      
     |      .. deprecated:: 0.9 Use ``<obj>.name.quote``
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  dispatch = <sqlalchemy.event.base.DDLEventsDispatch object>
    
    class Column(SchemaItem, sqlalchemy.sql.elements.ColumnClause)
     |  Represents a column in a database table.
     |  
     |  Method resolution order:
     |      Column
     |      SchemaItem
     |      sqlalchemy.sql.base.SchemaEventTarget
     |      sqlalchemy.sql.elements.ColumnClause
     |      sqlalchemy.sql.base.Immutable
     |      sqlalchemy.sql.elements.ColumnElement
     |      sqlalchemy.sql.operators.ColumnOperators
     |      sqlalchemy.sql.operators.Operators
     |      sqlalchemy.sql.elements.ClauseElement
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, *args, **kwargs)
     |      Construct a new ``Column`` object.
     |      
     |      :param name: The name of this column as represented in the database.
     |        This argument may be the first positional argument, or specified
     |        via keyword.
     |      
     |        Names which contain no upper case characters
     |        will be treated as case insensitive names, and will not be quoted
     |        unless they are a reserved word.  Names with any number of upper
     |        case characters will be quoted and sent exactly.  Note that this
     |        behavior applies even for databases which standardize upper
     |        case names as case insensitive such as Oracle.
     |      
     |        The name field may be omitted at construction time and applied
     |        later, at any time before the Column is associated with a
     |        :class:`.Table`.  This is to support convenient
     |        usage within the :mod:`~sqlalchemy.ext.declarative` extension.
     |      
     |      :param type\_: The column's type, indicated using an instance which
     |        subclasses :class:`~sqlalchemy.types.TypeEngine`.  If no arguments
     |        are required for the type, the class of the type can be sent
     |        as well, e.g.::
     |      
     |          # use a type with arguments
     |          Column('data', String(50))
     |      
     |          # use no arguments
     |          Column('level', Integer)
     |      
     |        The ``type`` argument may be the second positional argument
     |        or specified by keyword.
     |      
     |        If the ``type`` is ``None`` or is omitted, it will first default to
     |        the special type :class:`.NullType`.  If and when this
     |        :class:`.Column` is made to refer to another column using
     |        :class:`.ForeignKey` and/or :class:`.ForeignKeyConstraint`, the type
     |        of the remote-referenced column will be copied to this column as
     |        well, at the moment that the foreign key is resolved against that
     |        remote :class:`.Column` object.
     |      
     |        .. versionchanged:: 0.9.0
     |          Support for propagation of type to a :class:`.Column` from its
     |          :class:`.ForeignKey` object has been improved and should be
     |          more reliable and timely.
     |      
     |      :param \*args: Additional positional arguments include various
     |        :class:`.SchemaItem` derived constructs which will be applied
     |        as options to the column.  These include instances of
     |        :class:`.Constraint`, :class:`.ForeignKey`, :class:`.ColumnDefault`,
     |        and :class:`.Sequence`.  In some cases an equivalent keyword
     |        argument is available such as ``server_default``, ``default``
     |        and ``unique``.
     |      
     |      :param autoincrement: Set up "auto increment" semantics for an integer
     |        primary key column.  The default value is the string ``"auto"``
     |        which indicates that a single-column primary key that is of
     |        an INTEGER type with no stated client-side or python-side defaults
     |        should receive auto increment semantics automatically;
     |        all other varieties of primary key columns will not.  This
     |        includes that :term:`DDL` such as PostgreSQL SERIAL or MySQL
     |        AUTO_INCREMENT will be emitted for this column during a table
     |        create, as well as that the column is assumed to generate new
     |        integer primary key values when an INSERT statement invokes which
     |        will be retrieved by the dialect.
     |      
     |        The flag may be set to ``True`` to indicate that a column which
     |        is part of a composite (e.g. multi-column) primary key should
     |        have autoincrement semantics, though note that only one column
     |        within a primary key may have this setting.    It can also
     |        be set to ``True`` to indicate autoincrement semantics on a
     |        column that has a client-side or server-side default configured,
     |        however note that not all dialects can accommodate all styles
     |        of default as an "autoincrement".  It can also be
     |        set to ``False`` on a single-column primary key that has a
     |        datatype of INTEGER in order to disable auto increment semantics
     |        for that column.
     |      
     |        .. versionchanged:: 1.1 The autoincrement flag now defaults to
     |           ``"auto"`` which indicates autoincrement semantics by default
     |           for single-column integer primary keys only; for composite
     |           (multi-column) primary keys, autoincrement is never implicitly
     |           enabled; as always, ``autoincrement=True`` will allow for
     |           at most one of those columns to be an "autoincrement" column.
     |           ``autoincrement=True`` may also be set on a :class:`.Column`
     |           that has an explicit client-side or server-side default,
     |           subject to limitations of the backend database and dialect.
     |      
     |      
     |        The setting *only* has an effect for columns which are:
     |      
     |        * Integer derived (i.e. INT, SMALLINT, BIGINT).
     |      
     |        * Part of the primary key
     |      
     |        * Not referring to another column via :class:`.ForeignKey`, unless
     |          the value is specified as ``'ignore_fk'``::
     |      
     |              # turn on autoincrement for this column despite
     |              # the ForeignKey()
     |              Column('id', ForeignKey('other.id'),
     |                          primary_key=True, autoincrement='ignore_fk')
     |      
     |          It is typically not desirable to have "autoincrement" enabled
     |          on a column that refers to another via foreign key, as such a column
     |          is required to refer to a value that originates from elsewhere.
     |      
     |        The setting has these two effects on columns that meet the
     |        above criteria:
     |      
     |        * DDL issued for the column will include database-specific
     |          keywords intended to signify this column as an
     |          "autoincrement" column, such as AUTO INCREMENT on MySQL,
     |          SERIAL on PostgreSQL, and IDENTITY on MS-SQL.  It does
     |          *not* issue AUTOINCREMENT for SQLite since this is a
     |          special SQLite flag that is not required for autoincrementing
     |          behavior.
     |      
     |          .. seealso::
     |      
     |              :ref:`sqlite_autoincrement`
     |      
     |        * The column will be considered to be available using an
     |          "autoincrement" method specific to the backend database, such
     |          as calling upon ``cursor.lastrowid``, using RETURNING in an
     |          INSERT statement to get at a sequence-generated value, or using
     |          special functions such as "SELECT scope_identity()".
     |          These methods are highly specific to the DBAPIs and databases in
     |          use and vary greatly, so care should be taken when associating
     |          ``autoincrement=True`` with a custom default generation function.
     |      
     |      
     |      :param default: A scalar, Python callable, or
     |          :class:`.ColumnElement` expression representing the
     |          *default value* for this column, which will be invoked upon insert
     |          if this column is otherwise not specified in the VALUES clause of
     |          the insert. This is a shortcut to using :class:`.ColumnDefault` as
     |          a positional argument; see that class for full detail on the
     |          structure of the argument.
     |      
     |          Contrast this argument to :paramref:`.Column.server_default`
     |          which creates a default generator on the database side.
     |      
     |          .. seealso::
     |      
     |              :ref:`metadata_defaults_toplevel`
     |      
     |      :param doc: optional String that can be used by the ORM or similar
     |          to document attributes on the Python side.   This attribute does
     |          **not** render SQL comments; use the :paramref:`.Column.comment`
     |          parameter for this purpose.
     |      
     |      :param key: An optional string identifier which will identify this
     |          ``Column`` object on the :class:`.Table`. When a key is provided,
     |          this is the only identifier referencing the ``Column`` within the
     |          application, including ORM attribute mapping; the ``name`` field
     |          is used only when rendering SQL.
     |      
     |      :param index: When ``True``, indicates that the column is indexed.
     |          This is a shortcut for using a :class:`.Index` construct on the
     |          table. To specify indexes with explicit names or indexes that
     |          contain multiple columns, use the :class:`.Index` construct
     |          instead.
     |      
     |      :param info: Optional data dictionary which will be populated into the
     |          :attr:`.SchemaItem.info` attribute of this object.
     |      
     |      :param nullable: When set to ``False``, will cause the "NOT NULL"
     |          phrase to be added when generating DDL for the column.   When
     |          ``True``, will normally generate nothing (in SQL this defaults to
     |          "NULL"), except in some very specific backend-specific edge cases
     |          where "NULL" may render explicitly.   Defaults to ``True`` unless
     |          :paramref:`~.Column.primary_key` is also ``True``, in which case it
     |          defaults to ``False``.  This parameter is only used when issuing
     |          CREATE TABLE statements.
     |      
     |      :param onupdate: A scalar, Python callable, or
     |          :class:`~sqlalchemy.sql.expression.ClauseElement` representing a
     |          default value to be applied to the column within UPDATE
     |          statements, which wil be invoked upon update if this column is not
     |          present in the SET clause of the update. This is a shortcut to
     |          using :class:`.ColumnDefault` as a positional argument with
     |          ``for_update=True``.
     |      
     |          .. seealso::
     |      
     |              :ref:`metadata_defaults` - complete discussion of onupdate
     |      
     |      :param primary_key: If ``True``, marks this column as a primary key
     |          column. Multiple columns can have this flag set to specify
     |          composite primary keys. As an alternative, the primary key of a
     |          :class:`.Table` can be specified via an explicit
     |          :class:`.PrimaryKeyConstraint` object.
     |      
     |      :param server_default: A :class:`.FetchedValue` instance, str, Unicode
     |          or :func:`~sqlalchemy.sql.expression.text` construct representing
     |          the DDL DEFAULT value for the column.
     |      
     |          String types will be emitted as-is, surrounded by single quotes::
     |      
     |              Column('x', Text, server_default="val")
     |      
     |              x TEXT DEFAULT 'val'
     |      
     |          A :func:`~sqlalchemy.sql.expression.text` expression will be
     |          rendered as-is, without quotes::
     |      
     |              Column('y', DateTime, server_default=text('NOW()'))
     |      
     |              y DATETIME DEFAULT NOW()
     |      
     |          Strings and text() will be converted into a
     |          :class:`.DefaultClause` object upon initialization.
     |      
     |          Use :class:`.FetchedValue` to indicate that an already-existing
     |          column will generate a default value on the database side which
     |          will be available to SQLAlchemy for post-fetch after inserts. This
     |          construct does not specify any DDL and the implementation is left
     |          to the database, such as via a trigger.
     |      
     |          .. seealso::
     |      
     |              :ref:`server_defaults` - complete discussion of server side
     |              defaults
     |      
     |      :param server_onupdate:   A :class:`.FetchedValue` instance
     |           representing a database-side default generation function,
     |           such as a trigger. This
     |           indicates to SQLAlchemy that a newly generated value will be
     |           available after updates. This construct does not actually
     |           implement any kind of generation function within the database,
     |           which instead must be specified separately.
     |      
     |          .. seealso::
     |      
     |              :ref:`triggered_columns`
     |      
     |      :param quote: Force quoting of this column's name on or off,
     |           corresponding to ``True`` or ``False``. When left at its default
     |           of ``None``, the column identifier will be quoted according to
     |           whether the name is case sensitive (identifiers with at least one
     |           upper case character are treated as case sensitive), or if it's a
     |           reserved word. This flag is only needed to force quoting of a
     |           reserved word which is not known by the SQLAlchemy dialect.
     |      
     |      :param unique: When ``True``, indicates that this column contains a
     |           unique constraint, or if ``index`` is ``True`` as well, indicates
     |           that the :class:`.Index` should be created with the unique flag.
     |           To specify multiple columns in the constraint/index or to specify
     |           an explicit name, use the :class:`.UniqueConstraint` or
     |           :class:`.Index` constructs explicitly.
     |      
     |      :param system: When ``True``, indicates this is a "system" column,
     |           that is a column which is automatically made available by the
     |           database, and should not be included in the columns list for a
     |           ``CREATE TABLE`` statement.
     |      
     |           For more elaborate scenarios where columns should be
     |           conditionally rendered differently on different backends,
     |           consider custom compilation rules for :class:`.CreateColumn`.
     |      
     |           .. versionadded:: 0.8.3 Added the ``system=True`` parameter to
     |              :class:`.Column`.
     |      
     |      :param comment: Optional string that will render an SQL comment on
     |           table creation.
     |      
     |           .. versionadded:: 1.2 Added the :paramref:`.Column.comment`
     |              parameter to :class:`.Column`.
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  append_foreign_key(self, fk)
     |  
     |  copy(self, **kw)
     |      Create a copy of this ``Column``, unitialized.
     |      
     |      This is used in ``Table.tometadata``.
     |  
     |  get_children(self, schema_visitor=False, **kwargs)
     |  
     |  references(self, column)
     |      Return True if this Column references the given column via foreign
     |      key.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'column'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  info(...)
     |      Info dictionary associated with the object, allowing user-defined
     |      data to be associated with this :class:`.SchemaItem`.
     |      
     |      The dictionary is automatically generated when first accessed.
     |      It can also be specified in the constructor of some objects,
     |      such as :class:`.Table` and :class:`.Column`.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SchemaItem:
     |  
     |  quote
     |      Return the value of the ``quote`` flag passed
     |      to this schema object, for those schema items which
     |      have a ``name`` field.
     |      
     |      .. deprecated:: 0.9 Use ``<obj>.name.quote``
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  dispatch = <sqlalchemy.event.base.DDLEventsDispatch object>
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.elements.ColumnClause:
     |  
     |  description(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.elements.ColumnClause:
     |  
     |  table
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.elements.ColumnClause:
     |  
     |  default = None
     |  
     |  onupdate = None
     |  
     |  server_default = None
     |  
     |  server_onupdate = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.Immutable:
     |  
     |  params(self, *optionaldict, **kwargs)
     |  
     |  unique_params(self, *optionaldict, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.elements.ColumnElement:
     |  
     |  __getattr__(self, key)
     |  
     |  anon_label(...)
     |      provides a constant 'anonymous label' for this ColumnElement.
     |      
     |      This is a label() expression which will be named at compile time.
     |      The same label() is returned each time anon_label is called so
     |      that expressions can reference anon_label multiple times, producing
     |      the same label name at compile time.
     |      
     |      the compiler uses this function automatically at compile time
     |      for expressions that are known to be 'unnamed' like binary
     |      expressions and function calls.
     |  
     |  base_columns(...)
     |  
     |  cast(self, type_)
     |      Produce a type cast, i.e. ``CAST(<expression> AS <type>)``.
     |      
     |      This is a shortcut to the :func:`~.expression.cast` function.
     |      
     |      .. versionadded:: 1.0.7
     |  
     |  comparator(...)
     |  
     |  compare(self, other, use_proxies=False, equivalents=None, **kw)
     |      Compare this ColumnElement to another.
     |      
     |      Special arguments understood:
     |      
     |      :param use_proxies: when True, consider two columns that
     |        share a common base column as equivalent (i.e. shares_lineage())
     |      
     |      :param equivalents: a dictionary of columns as keys mapped to sets
     |        of columns. If the given "other" column is present in this
     |        dictionary, if any of the columns in the corresponding set() pass
     |        the comparison test, the result is True. This is used to expand the
     |        comparison to other columns that may be known to be equivalent to
     |        this one via foreign key or other criterion.
     |  
     |  label(self, name)
     |      Produce a column label, i.e. ``<columnname> AS <name>``.
     |      
     |      This is a shortcut to the :func:`~.expression.label` function.
     |      
     |      if 'name' is None, an anonymous label name will be generated.
     |  
     |  operate(self, op, *other, **kwargs)
     |  
     |  proxy_set(...)
     |  
     |  reverse_operate(self, op, other, **kwargs)
     |  
     |  self_group(self, against=None)
     |  
     |  shares_lineage(self, othercolumn)
     |      Return True if the given :class:`.ColumnElement`
     |      has a common ancestor to this :class:`.ColumnElement`.
     |  
     |  type(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.elements.ColumnElement:
     |  
     |  expression
     |      Return a column expression.
     |      
     |      Part of the inspection interface; returns self.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.elements.ColumnElement:
     |  
     |  foreign_keys = []
     |  
     |  key = None
     |  
     |  primary_key = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.operators.ColumnOperators:
     |  
     |  __add__(self, other)
     |      Implement the ``+`` operator.
     |      
     |      In a column context, produces the clause ``a + b``
     |      if the parent object has non-string affinity.
     |      If the parent object has a string affinity,
     |      produces the concatenation operator, ``a || b`` -
     |      see :meth:`.ColumnOperators.concat`.
     |  
     |  __contains__(self, other)
     |  
     |  __div__(self, other)
     |      Implement the ``/`` operator.
     |      
     |      In a column context, produces the clause ``a / b``.
     |  
     |  __eq__(self, other)
     |      Implement the ``==`` operator.
     |      
     |      In a column context, produces the clause ``a = b``.
     |      If the target is ``None``, produces ``a IS NULL``.
     |  
     |  __ge__(self, other)
     |      Implement the ``>=`` operator.
     |      
     |      In a column context, produces the clause ``a >= b``.
     |  
     |  __getitem__(self, index)
     |      Implement the [] operator.
     |      
     |      This can be used by some database-specific types
     |      such as PostgreSQL ARRAY and HSTORE.
     |  
     |  __gt__(self, other)
     |      Implement the ``>`` operator.
     |      
     |      In a column context, produces the clause ``a > b``.
     |  
     |  __hash__(...)
     |      x.__hash__() <==> hash(x)
     |  
     |  __le__(self, other)
     |      Implement the ``<=`` operator.
     |      
     |      In a column context, produces the clause ``a <= b``.
     |  
     |  __lshift__(self, other)
     |      implement the << operator.
     |      
     |      Not used by SQLAlchemy core, this is provided
     |      for custom operator systems which want to use
     |      << as an extension point.
     |  
     |  __lt__(self, other)
     |      Implement the ``<`` operator.
     |      
     |      In a column context, produces the clause ``a < b``.
     |  
     |  __mod__(self, other)
     |      Implement the ``%`` operator.
     |      
     |      In a column context, produces the clause ``a % b``.
     |  
     |  __mul__(self, other)
     |      Implement the ``*`` operator.
     |      
     |      In a column context, produces the clause ``a * b``.
     |  
     |  __ne__(self, other)
     |      Implement the ``!=`` operator.
     |      
     |      In a column context, produces the clause ``a != b``.
     |      If the target is ``None``, produces ``a IS NOT NULL``.
     |  
     |  __neg__(self)
     |      Implement the ``-`` operator.
     |      
     |      In a column context, produces the clause ``-a``.
     |  
     |  __radd__(self, other)
     |      Implement the ``+`` operator in reverse.
     |      
     |      See :meth:`.ColumnOperators.__add__`.
     |  
     |  __rdiv__(self, other)
     |      Implement the ``/`` operator in reverse.
     |      
     |      See :meth:`.ColumnOperators.__div__`.
     |  
     |  __rmod__(self, other)
     |      Implement the ``%`` operator in reverse.
     |      
     |      See :meth:`.ColumnOperators.__mod__`.
     |  
     |  __rmul__(self, other)
     |      Implement the ``*`` operator in reverse.
     |      
     |      See :meth:`.ColumnOperators.__mul__`.
     |  
     |  __rshift__(self, other)
     |      implement the >> operator.
     |      
     |      Not used by SQLAlchemy core, this is provided
     |      for custom operator systems which want to use
     |      >> as an extension point.
     |  
     |  __rsub__(self, other)
     |      Implement the ``-`` operator in reverse.
     |      
     |      See :meth:`.ColumnOperators.__sub__`.
     |  
     |  __rtruediv__(self, other)
     |      Implement the ``//`` operator in reverse.
     |      
     |      See :meth:`.ColumnOperators.__truediv__`.
     |  
     |  __sub__(self, other)
     |      Implement the ``-`` operator.
     |      
     |      In a column context, produces the clause ``a - b``.
     |  
     |  __truediv__(self, other)
     |      Implement the ``//`` operator.
     |      
     |      In a column context, produces the clause ``a / b``.
     |  
     |  all_(self)
     |      Produce a :func:`~.expression.all_` clause against the
     |      parent object.
     |      
     |      This operator is only appropriate against a scalar subquery
     |      object, or for some backends an column expression that is
     |      against the ARRAY type, e.g.::
     |      
     |          # postgresql '5 = ALL (somearray)'
     |          expr = 5 == mytable.c.somearray.all_()
     |      
     |          # mysql '5 = ALL (SELECT value FROM table)'
     |          expr = 5 == select([table.c.value]).as_scalar().all_()
     |      
     |      .. seealso::
     |      
     |          :func:`~.expression.all_` - standalone version
     |      
     |          :func:`~.expression.any_` - ANY operator
     |      
     |      .. versionadded:: 1.1
     |  
     |  any_(self)
     |      Produce a :func:`~.expression.any_` clause against the
     |      parent object.
     |      
     |      This operator is only appropriate against a scalar subquery
     |      object, or for some backends an column expression that is
     |      against the ARRAY type, e.g.::
     |      
     |          # postgresql '5 = ANY (somearray)'
     |          expr = 5 == mytable.c.somearray.any_()
     |      
     |          # mysql '5 = ANY (SELECT value FROM table)'
     |          expr = 5 == select([table.c.value]).as_scalar().any_()
     |      
     |      .. seealso::
     |      
     |          :func:`~.expression.any_` - standalone version
     |      
     |          :func:`~.expression.all_` - ALL operator
     |      
     |      .. versionadded:: 1.1
     |  
     |  asc(self)
     |      Produce a :func:`~.expression.asc` clause against the
     |      parent object.
     |  
     |  between(self, cleft, cright, symmetric=False)
     |      Produce a :func:`~.expression.between` clause against
     |      the parent object, given the lower and upper range.
     |  
     |  collate(self, collation)
     |      Produce a :func:`~.expression.collate` clause against
     |      the parent object, given the collation string.
     |      
     |      .. seealso::
     |      
     |          :func:`~.expression.collate`
     |  
     |  concat(self, other)
     |      Implement the 'concat' operator.
     |      
     |      In a column context, produces the clause ``a || b``,
     |      or uses the ``concat()`` operator on MySQL.
     |  
     |  contains(self, other, **kwargs)
     |      Implement the 'contains' operator.
     |      
     |      Produces a LIKE expression that tests against a match for the middle
     |      of a string value::
     |      
     |          column LIKE '%' || <other> || '%'
     |      
     |      E.g.::
     |      
     |          stmt = select([sometable]).\
     |              where(sometable.c.column.contains("foobar"))
     |      
     |      Since the operator uses ``LIKE``, wildcard characters
     |      ``"%"`` and ``"_"`` that are present inside the <other> expression
     |      will behave like wildcards as well.   For literal string
     |      values, the :paramref:`.ColumnOperators.contains.autoescape` flag
     |      may be set to ``True`` to apply escaping to occurences of these
     |      characters within the string value so that they match as themselves
     |      and not as wildcard characters.  Alternatively, the
     |      :paramref:`.ColumnOperators.contains.escape` parameter will establish
     |      a given character as an escape character which can be of use when
     |      the target expression is not a literal string.
     |      
     |      :param other: expression to be compared.   This is usually a plain
     |        string value, but can also be an arbitrary SQL expression.  LIKE
     |        wildcard characters ``%`` and ``_`` are not escaped by default unless
     |        the :paramref:`.ColumnOperators.contains.autoescape` flag is
     |        set to True.
     |      
     |      :param autoescape: boolean; when True, establishes an escape character
     |        within the LIKE expression, then applies it to all occurrences of
     |        ``"%"``, ``"_"`` and the escape character itself within the
     |        comparison value, which is assumed to be a literal string and not a
     |        SQL expression.
     |      
     |        An expression such as::
     |      
     |          somecolumn.contains("foo%bar", autoescape=True)
     |      
     |        Will render as::
     |      
     |          somecolumn LIKE '%' || :param || '%' ESCAPE '/'
     |      
     |        With the value of :param as ``"foo/%bar"``.
     |      
     |        .. versionadded:: 1.2
     |      
     |        .. versionchanged:: 1.2.0 The
     |          :paramref:`.ColumnOperators.contains.autoescape` parameter is
     |           now a simple boolean rather than a character; the escape
     |           character itself is also escaped, and defaults to a forwards
     |           slash, which itself can be customized using the
     |           :paramref:`.ColumnOperators.contains.escape` parameter.
     |      
     |      :param escape: a character which when given will render with the
     |        ``ESCAPE`` keyword to establish that character as the escape
     |        character.  This character can then be placed preceding occurrences
     |        of ``%`` and ``_`` to allow them to act as themselves and not
     |        wildcard characters.
     |      
     |        An expression such as::
     |      
     |          somecolumn.contains("foo/%bar", escape="^")
     |      
     |        Will render as::
     |      
     |          somecolumn LIKE '%' || :param || '%' ESCAPE '^'
     |      
     |        The parameter may also be combined with
     |        :paramref:`.ColumnOperators.contains.autoescape`::
     |      
     |          somecolumn.contains("foo%bar^bat", escape="^", autoescape=True)
     |      
     |        Where above, the given literal parameter will be converted to
     |        ``"foo^%bar^^bat"`` before being passed to the database.
     |      
     |      .. seealso::
     |      
     |          :meth:`.ColumnOperators.startswith`
     |      
     |          :meth:`.ColumnOperators.endswith`
     |      
     |          :meth:`.ColumnOperators.like`
     |  
     |  desc(self)
     |      Produce a :func:`~.expression.desc` clause against the
     |      parent object.
     |  
     |  distinct(self)
     |      Produce a :func:`~.expression.distinct` clause against the
     |      parent object.
     |  
     |  endswith(self, other, **kwargs)
     |      Implement the 'endswith' operator.
     |      
     |      Produces a LIKE expression that tests against a match for the end
     |      of a string value::
     |      
     |          column LIKE '%' || <other>
     |      
     |      E.g.::
     |      
     |          stmt = select([sometable]).\
     |              where(sometable.c.column.endswith("foobar"))
     |      
     |      Since the operator uses ``LIKE``, wildcard characters
     |      ``"%"`` and ``"_"`` that are present inside the <other> expression
     |      will behave like wildcards as well.   For literal string
     |      values, the :paramref:`.ColumnOperators.endswith.autoescape` flag
     |      may be set to ``True`` to apply escaping to occurences of these
     |      characters within the string value so that they match as themselves
     |      and not as wildcard characters.  Alternatively, the
     |      :paramref:`.ColumnOperators.endswith.escape` parameter will establish
     |      a given character as an escape character which can be of use when
     |      the target expression is not a literal string.
     |      
     |      :param other: expression to be compared.   This is usually a plain
     |        string value, but can also be an arbitrary SQL expression.  LIKE
     |        wildcard characters ``%`` and ``_`` are not escaped by default unless
     |        the :paramref:`.ColumnOperators.endswith.autoescape` flag is
     |        set to True.
     |      
     |      :param autoescape: boolean; when True, establishes an escape character
     |        within the LIKE expression, then applies it to all occurrences of
     |        ``"%"``, ``"_"`` and the escape character itself within the
     |        comparison value, which is assumed to be a literal string and not a
     |        SQL expression.
     |      
     |        An expression such as::
     |      
     |          somecolumn.endswith("foo%bar", autoescape=True)
     |      
     |        Will render as::
     |      
     |          somecolumn LIKE '%' || :param ESCAPE '/'
     |      
     |        With the value of :param as ``"foo/%bar"``.
     |      
     |        .. versionadded:: 1.2
     |      
     |        .. versionchanged:: 1.2.0 The
     |          :paramref:`.ColumnOperators.endswith.autoescape` parameter is
     |           now a simple boolean rather than a character; the escape
     |           character itself is also escaped, and defaults to a forwards
     |           slash, which itself can be customized using the
     |           :paramref:`.ColumnOperators.endswith.escape` parameter.
     |      
     |      :param escape: a character which when given will render with the
     |        ``ESCAPE`` keyword to establish that character as the escape
     |        character.  This character can then be placed preceding occurrences
     |        of ``%`` and ``_`` to allow them to act as themselves and not
     |        wildcard characters.
     |      
     |        An expression such as::
     |      
     |          somecolumn.endswith("foo/%bar", escape="^")
     |      
     |        Will render as::
     |      
     |          somecolumn LIKE '%' || :param ESCAPE '^'
     |      
     |        The parameter may also be combined with
     |        :paramref:`.ColumnOperators.endswith.autoescape`::
     |      
     |          somecolumn.endswith("foo%bar^bat", escape="^", autoescape=True)
     |      
     |        Where above, the given literal parameter will be converted to
     |        ``"foo^%bar^^bat"`` before being passed to the database.
     |      
     |      .. seealso::
     |      
     |          :meth:`.ColumnOperators.startswith`
     |      
     |          :meth:`.ColumnOperators.contains`
     |      
     |          :meth:`.ColumnOperators.like`
     |  
     |  ilike(self, other, escape=None)
     |      Implement the ``ilike`` operator, e.g. case insensitive LIKE.
     |      
     |      In a column context, produces an expression either of the form::
     |      
     |          lower(a) LIKE lower(other)
     |      
     |      Or on backends that support the ILIKE operator::
     |      
     |          a ILIKE other
     |      
     |      E.g.::
     |      
     |          stmt = select([sometable]).\
     |              where(sometable.c.column.ilike("%foobar%"))
     |      
     |      :param other: expression to be compared
     |      :param escape: optional escape character, renders the ``ESCAPE``
     |        keyword, e.g.::
     |      
     |          somecolumn.ilike("foo/%bar", escape="/")
     |      
     |      .. seealso::
     |      
     |          :meth:`.ColumnOperators.like`
     |  
     |  in_(self, other)
     |      Implement the ``in`` operator.
     |      
     |      In a column context, produces the clause ``a IN other``.
     |      "other" may be a tuple/list of column expressions,
     |      or a :func:`~.expression.select` construct.
     |      
     |      In the case that ``other`` is an empty sequence, the compiler
     |      produces an "empty in" expression.   This defaults to the
     |      expression "1 != 1" to produce false in all cases.  The
     |      :paramref:`.create_engine.empty_in_strategy` may be used to
     |      alter this behavior.
     |      
     |      .. versionchanged:: 1.2  The :meth:`.ColumnOperators.in_` and
     |         :meth:`.ColumnOperators.notin_` operators
     |         now produce a "static" expression for an empty IN sequence
     |         by default.
     |  
     |  is_(self, other)
     |      Implement the ``IS`` operator.
     |      
     |      Normally, ``IS`` is generated automatically when comparing to a
     |      value of ``None``, which resolves to ``NULL``.  However, explicit
     |      usage of ``IS`` may be desirable if comparing to boolean values
     |      on certain platforms.
     |      
     |      .. versionadded:: 0.7.9
     |      
     |      .. seealso:: :meth:`.ColumnOperators.isnot`
     |  
     |  is_distinct_from(self, other)
     |      Implement the ``IS DISTINCT FROM`` operator.
     |      
     |      Renders "a IS DISTINCT FROM b" on most platforms;
     |      on some such as SQLite may render "a IS NOT b".
     |      
     |      .. versionadded:: 1.1
     |  
     |  isnot(self, other)
     |      Implement the ``IS NOT`` operator.
     |      
     |      Normally, ``IS NOT`` is generated automatically when comparing to a
     |      value of ``None``, which resolves to ``NULL``.  However, explicit
     |      usage of ``IS NOT`` may be desirable if comparing to boolean values
     |      on certain platforms.
     |      
     |      .. versionadded:: 0.7.9
     |      
     |      .. seealso:: :meth:`.ColumnOperators.is_`
     |  
     |  isnot_distinct_from(self, other)
     |      Implement the ``IS NOT DISTINCT FROM`` operator.
     |      
     |      Renders "a IS NOT DISTINCT FROM b" on most platforms;
     |      on some such as SQLite may render "a IS b".
     |      
     |      .. versionadded:: 1.1
     |  
     |  like(self, other, escape=None)
     |      Implement the ``like`` operator.
     |      
     |      In a column context, produces the expression::
     |      
     |          a LIKE other
     |      
     |      E.g.::
     |      
     |          stmt = select([sometable]).\
     |              where(sometable.c.column.like("%foobar%"))
     |      
     |      :param other: expression to be compared
     |      :param escape: optional escape character, renders the ``ESCAPE``
     |        keyword, e.g.::
     |      
     |          somecolumn.like("foo/%bar", escape="/")
     |      
     |      .. seealso::
     |      
     |          :meth:`.ColumnOperators.ilike`
     |  
     |  match(self, other, **kwargs)
     |      Implements a database-specific 'match' operator.
     |      
     |      :meth:`~.ColumnOperators.match` attempts to resolve to
     |      a MATCH-like function or operator provided by the backend.
     |      Examples include:
     |      
     |      * PostgreSQL - renders ``x @@ to_tsquery(y)``
     |      * MySQL - renders ``MATCH (x) AGAINST (y IN BOOLEAN MODE)``
     |      * Oracle - renders ``CONTAINS(x, y)``
     |      * other backends may provide special implementations.
     |      * Backends without any special implementation will emit
     |        the operator as "MATCH".  This is compatible with SQlite, for
     |        example.
     |  
     |  notilike(self, other, escape=None)
     |      implement the ``NOT ILIKE`` operator.
     |      
     |      This is equivalent to using negation with
     |      :meth:`.ColumnOperators.ilike`, i.e. ``~x.ilike(y)``.
     |      
     |      .. versionadded:: 0.8
     |      
     |      .. seealso::
     |      
     |          :meth:`.ColumnOperators.ilike`
     |  
     |  notin_(self, other)
     |      implement the ``NOT IN`` operator.
     |      
     |      This is equivalent to using negation with
     |      :meth:`.ColumnOperators.in_`, i.e. ``~x.in_(y)``.
     |      
     |      In the case that ``other`` is an empty sequence, the compiler
     |      produces an "empty not in" expression.   This defaults to the
     |      expression "1 = 1" to produce true in all cases.  The
     |      :paramref:`.create_engine.empty_in_strategy` may be used to
     |      alter this behavior.
     |      
     |      .. versionchanged:: 1.2  The :meth:`.ColumnOperators.in_` and
     |         :meth:`.ColumnOperators.notin_` operators
     |         now produce a "static" expression for an empty IN sequence
     |         by default.
     |      
     |      .. seealso::
     |      
     |          :meth:`.ColumnOperators.in_`
     |  
     |  notlike(self, other, escape=None)
     |      implement the ``NOT LIKE`` operator.
     |      
     |      This is equivalent to using negation with
     |      :meth:`.ColumnOperators.like`, i.e. ``~x.like(y)``.
     |      
     |      .. versionadded:: 0.8
     |      
     |      .. seealso::
     |      
     |          :meth:`.ColumnOperators.like`
     |  
     |  nullsfirst(self)
     |      Produce a :func:`~.expression.nullsfirst` clause against the
     |      parent object.
     |  
     |  nullslast(self)
     |      Produce a :func:`~.expression.nullslast` clause against the
     |      parent object.
     |  
     |  startswith(self, other, **kwargs)
     |      Implement the ``startswith`` operator.
     |      
     |      Produces a LIKE expression that tests against a match for the start
     |      of a string value::
     |      
     |          column LIKE <other> || '%'
     |      
     |      E.g.::
     |      
     |          stmt = select([sometable]).\
     |              where(sometable.c.column.startswith("foobar"))
     |      
     |      Since the operator uses ``LIKE``, wildcard characters
     |      ``"%"`` and ``"_"`` that are present inside the <other> expression
     |      will behave like wildcards as well.   For literal string
     |      values, the :paramref:`.ColumnOperators.startswith.autoescape` flag
     |      may be set to ``True`` to apply escaping to occurences of these
     |      characters within the string value so that they match as themselves
     |      and not as wildcard characters.  Alternatively, the
     |      :paramref:`.ColumnOperators.startswith.escape` parameter will establish
     |      a given character as an escape character which can be of use when
     |      the target expression is not a literal string.
     |      
     |      :param other: expression to be compared.   This is usually a plain
     |        string value, but can also be an arbitrary SQL expression.  LIKE
     |        wildcard characters ``%`` and ``_`` are not escaped by default unless
     |        the :paramref:`.ColumnOperators.startswith.autoescape` flag is
     |        set to True.
     |      
     |      :param autoescape: boolean; when True, establishes an escape character
     |        within the LIKE expression, then applies it to all occurrences of
     |        ``"%"``, ``"_"`` and the escape character itself within the
     |        comparison value, which is assumed to be a literal string and not a
     |        SQL expression.
     |      
     |        An expression such as::
     |      
     |          somecolumn.startswith("foo%bar", autoescape=True)
     |      
     |        Will render as::
     |      
     |          somecolumn LIKE :param || '%' ESCAPE '/'
     |      
     |        With the value of :param as ``"foo/%bar"``.
     |      
     |        .. versionadded:: 1.2
     |      
     |        .. versionchanged:: 1.2.0 The
     |          :paramref:`.ColumnOperators.startswith.autoescape` parameter is
     |           now a simple boolean rather than a character; the escape
     |           character itself is also escaped, and defaults to a forwards
     |           slash, which itself can be customized using the
     |           :paramref:`.ColumnOperators.startswith.escape` parameter.
     |      
     |      :param escape: a character which when given will render with the
     |        ``ESCAPE`` keyword to establish that character as the escape
     |        character.  This character can then be placed preceding occurrences
     |        of ``%`` and ``_`` to allow them to act as themselves and not
     |        wildcard characters.
     |      
     |        An expression such as::
     |      
     |          somecolumn.startswith("foo/%bar", escape="^")
     |      
     |        Will render as::
     |      
     |          somecolumn LIKE :param || '%' ESCAPE '^'
     |      
     |        The parameter may also be combined with
     |        :paramref:`.ColumnOperators.startswith.autoescape`::
     |      
     |          somecolumn.startswith("foo%bar^bat", escape="^", autoescape=True)
     |      
     |        Where above, the given literal parameter will be converted to
     |        ``"foo^%bar^^bat"`` before being passed to the database.
     |      
     |      .. seealso::
     |      
     |          :meth:`.ColumnOperators.endswith`
     |      
     |          :meth:`.ColumnOperators.contains`
     |      
     |          :meth:`.ColumnOperators.like`
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.operators.ColumnOperators:
     |  
     |  timetuple = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.operators.Operators:
     |  
     |  __and__(self, other)
     |      Implement the ``&`` operator.
     |      
     |      When used with SQL expressions, results in an
     |      AND operation, equivalent to
     |      :func:`~.expression.and_`, that is::
     |      
     |          a & b
     |      
     |      is equivalent to::
     |      
     |          from sqlalchemy import and_
     |          and_(a, b)
     |      
     |      Care should be taken when using ``&`` regarding
     |      operator precedence; the ``&`` operator has the highest precedence.
     |      The operands should be enclosed in parenthesis if they contain
     |      further sub expressions::
     |      
     |          (a == 2) & (b == 4)
     |  
     |  __invert__(self)
     |      Implement the ``~`` operator.
     |      
     |      When used with SQL expressions, results in a
     |      NOT operation, equivalent to
     |      :func:`~.expression.not_`, that is::
     |      
     |          ~a
     |      
     |      is equivalent to::
     |      
     |          from sqlalchemy import not_
     |          not_(a)
     |  
     |  __or__(self, other)
     |      Implement the ``|`` operator.
     |      
     |      When used with SQL expressions, results in an
     |      OR operation, equivalent to
     |      :func:`~.expression.or_`, that is::
     |      
     |          a | b
     |      
     |      is equivalent to::
     |      
     |          from sqlalchemy import or_
     |          or_(a, b)
     |      
     |      Care should be taken when using ``|`` regarding
     |      operator precedence; the ``|`` operator has the highest precedence.
     |      The operands should be enclosed in parenthesis if they contain
     |      further sub expressions::
     |      
     |          (a == 2) | (b == 4)
     |  
     |  bool_op(self, opstring, precedence=0)
     |      Return a custom boolean operator.
     |      
     |      This method is shorthand for calling
     |      :meth:`.Operators.op` and passing the
     |      :paramref:`.Operators.op.is_comparison`
     |      flag with True.
     |      
     |      .. versionadded:: 1.2.0b3
     |      
     |      .. seealso::
     |      
     |          :meth:`.Operators.op`
     |  
     |  op(self, opstring, precedence=0, is_comparison=False, return_type=None)
     |      produce a generic operator function.
     |      
     |      e.g.::
     |      
     |        somecolumn.op("*")(5)
     |      
     |      produces::
     |      
     |        somecolumn * 5
     |      
     |      This function can also be used to make bitwise operators explicit. For
     |      example::
     |      
     |        somecolumn.op('&')(0xff)
     |      
     |      is a bitwise AND of the value in ``somecolumn``.
     |      
     |      :param operator: a string which will be output as the infix operator
     |        between this element and the expression passed to the
     |        generated function.
     |      
     |      :param precedence: precedence to apply to the operator, when
     |       parenthesizing expressions.  A lower number will cause the expression
     |       to be parenthesized when applied against another operator with
     |       higher precedence.  The default value of ``0`` is lower than all
     |       operators except for the comma (``,``) and ``AS`` operators.
     |       A value of 100 will be higher or equal to all operators, and -100
     |       will be lower than or equal to all operators.
     |      
     |       .. versionadded:: 0.8 - added the 'precedence' argument.
     |      
     |      :param is_comparison: if True, the operator will be considered as a
     |       "comparison" operator, that is which evaluates to a boolean
     |       true/false value, like ``==``, ``>``, etc.  This flag should be set
     |       so that ORM relationships can establish that the operator is a
     |       comparison operator when used in a custom join condition.
     |      
     |       .. versionadded:: 0.9.2 - added the
     |          :paramref:`.Operators.op.is_comparison` flag.
     |      
     |      :param return_type: a :class:`.TypeEngine` class or object that will
     |        force the return type of an expression produced by this operator
     |        to be of that type.   By default, operators that specify
     |        :paramref:`.Operators.op.is_comparison` will resolve to
     |        :class:`.Boolean`, and those that do not will be of the same
     |        type as the left-hand operand.
     |      
     |        .. versionadded:: 1.2.0b3 - added the
     |           :paramref:`.Operators.op.return_type` argument.
     |      
     |      .. seealso::
     |      
     |          :ref:`types_operators`
     |      
     |          :ref:`relationship_custom_operator`
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.elements.ClauseElement:
     |  
     |  __bool__(self)
     |  
     |  __getstate__(self)
     |  
     |  __nonzero__ = __bool__(self)
     |  
     |  compile(self, bind=None, dialect=None, **kw)
     |      Compile this SQL expression.
     |      
     |      The return value is a :class:`~.Compiled` object.
     |      Calling ``str()`` or ``unicode()`` on the returned value will yield a
     |      string representation of the result. The
     |      :class:`~.Compiled` object also can return a
     |      dictionary of bind parameter names and values
     |      using the ``params`` accessor.
     |      
     |      :param bind: An ``Engine`` or ``Connection`` from which a
     |          ``Compiled`` will be acquired. This argument takes precedence over
     |          this :class:`.ClauseElement`'s bound engine, if any.
     |      
     |      :param column_keys: Used for INSERT and UPDATE statements, a list of
     |          column names which should be present in the VALUES clause of the
     |          compiled statement. If ``None``, all columns from the target table
     |          object are rendered.
     |      
     |      :param dialect: A ``Dialect`` instance from which a ``Compiled``
     |          will be acquired. This argument takes precedence over the `bind`
     |          argument as well as this :class:`.ClauseElement`'s bound engine,
     |          if any.
     |      
     |      :param inline: Used for INSERT statements, for a dialect which does
     |          not support inline retrieval of newly generated primary key
     |          columns, will force the expression used to create the new primary
     |          key value to be rendered inline within the INSERT statement's
     |          VALUES clause. This typically refers to Sequence execution but may
     |          also refer to any server-side default generation function
     |          associated with a primary key `Column`.
     |      
     |      :param compile_kwargs: optional dictionary of additional parameters
     |          that will be passed through to the compiler within all "visit"
     |          methods.  This allows any custom flag to be passed through to
     |          a custom compilation construct, for example.  It is also used
     |          for the case of passing the ``literal_binds`` flag through::
     |      
     |              from sqlalchemy.sql import table, column, select
     |      
     |              t = table('t', column('x'))
     |      
     |              s = select([t]).where(t.c.x == 5)
     |      
     |              print s.compile(compile_kwargs={"literal_binds": True})
     |      
     |          .. versionadded:: 0.9.0
     |      
     |      .. seealso::
     |      
     |          :ref:`faq_sql_expression_string`
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.elements.ClauseElement:
     |  
     |  bind = None
     |  
     |  is_clause_element = True
     |  
     |  is_selectable = False
     |  
     |  supports_execution = False
    
    class ColumnDefault(DefaultGenerator)
     |  A plain default value on a column.
     |  
     |  This could correspond to a constant, a callable function,
     |  or a SQL clause.
     |  
     |  :class:`.ColumnDefault` is generated automatically
     |  whenever the ``default``, ``onupdate`` arguments of
     |  :class:`.Column` are used.  A :class:`.ColumnDefault`
     |  can be passed positionally as well.
     |  
     |  For example, the following::
     |  
     |      Column('foo', Integer, default=50)
     |  
     |  Is equivalent to::
     |  
     |      Column('foo', Integer, ColumnDefault(50))
     |  
     |  Method resolution order:
     |      ColumnDefault
     |      DefaultGenerator
     |      _NotAColumnExpr
     |      SchemaItem
     |      sqlalchemy.sql.base.SchemaEventTarget
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, arg, **kwargs)
     |      "Construct a new :class:`.ColumnDefault`.
     |      
     |      
     |      :param arg: argument representing the default value.
     |       May be one of the following:
     |      
     |       * a plain non-callable Python value, such as a
     |         string, integer, boolean, or other simple type.
     |         The default value will be used as is each time.
     |       * a SQL expression, that is one which derives from
     |         :class:`.ColumnElement`.  The SQL expression will
     |         be rendered into the INSERT or UPDATE statement,
     |         or in the case of a primary key column when
     |         RETURNING is not used may be
     |         pre-executed before an INSERT within a SELECT.
     |       * A Python callable.  The function will be invoked for each
     |         new row subject to an INSERT or UPDATE.
     |         The callable must accept exactly
     |         zero or one positional arguments.  The one-argument form
     |         will receive an instance of the :class:`.ExecutionContext`,
     |         which provides contextual information as to the current
     |         :class:`.Connection` in use as well as the current
     |         statement and parameters.
     |  
     |  __repr__(self)
     |  
     |  is_callable(...)
     |  
     |  is_clause_element(...)
     |  
     |  is_scalar(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __visit_name__
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from DefaultGenerator:
     |  
     |  execute(self, bind=None, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DefaultGenerator:
     |  
     |  bind
     |      Return the connectable associated with this default.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from DefaultGenerator:
     |  
     |  column = None
     |  
     |  is_sequence = False
     |  
     |  is_server_default = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _NotAColumnExpr:
     |  
     |  __clause_element__ lambda self
     |  
     |  self_group lambda self
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _NotAColumnExpr:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  get_children(self, **kwargs)
     |      used to allow SchemaVisitor access
     |  
     |  info(...)
     |      Info dictionary associated with the object, allowing user-defined
     |      data to be associated with this :class:`.SchemaItem`.
     |      
     |      The dictionary is automatically generated when first accessed.
     |      It can also be specified in the constructor of some objects,
     |      such as :class:`.Table` and :class:`.Column`.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SchemaItem:
     |  
     |  quote
     |      Return the value of the ``quote`` flag passed
     |      to this schema object, for those schema items which
     |      have a ``name`` field.
     |      
     |      .. deprecated:: 0.9 Use ``<obj>.name.quote``
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  dispatch = <sqlalchemy.event.base.DDLEventsDispatch object>
    
    class Constraint(sqlalchemy.sql.base.DialectKWArgs, SchemaItem)
     |  A table-level SQL constraint.
     |  
     |  Method resolution order:
     |      Constraint
     |      sqlalchemy.sql.base.DialectKWArgs
     |      SchemaItem
     |      sqlalchemy.sql.base.SchemaEventTarget
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, name=None, deferrable=None, initially=None, _create_rule=None, info=None, _type_bound=False, **dialect_kw)
     |      Create a SQL constraint.
     |      
     |      :param name:
     |        Optional, the in-database name of this ``Constraint``.
     |      
     |      :param deferrable:
     |        Optional bool.  If set, emit DEFERRABLE or NOT DEFERRABLE when
     |        issuing DDL for this constraint.
     |      
     |      :param initially:
     |        Optional string.  If set, emit INITIALLY <value> when issuing DDL
     |        for this constraint.
     |      
     |      :param info: Optional data dictionary which will be populated into the
     |          :attr:`.SchemaItem.info` attribute of this object.
     |      
     |          .. versionadded:: 1.0.0
     |      
     |      :param _create_rule:
     |        a callable which is passed the DDLCompiler object during
     |        compilation. Returns True or False to signal inline generation of
     |        this Constraint.
     |      
     |        The AddConstraint and DropConstraint DDL constructs provide
     |        DDLElement's more comprehensive "conditional DDL" approach that is
     |        passed a database connection when DDL is being issued. _create_rule
     |        is instead called during any CREATE TABLE compilation, where there
     |        may not be any transaction/connection in progress. However, it
     |        allows conditional compilation of the constraint even for backends
     |        which do not support addition of constraints through ALTER TABLE,
     |        which currently includes SQLite.
     |      
     |        _create_rule is used by some types to create constraints.
     |        Currently, its call signature is subject to change at any time.
     |      
     |      :param \**dialect_kw:  Additional keyword arguments are dialect
     |          specific, and passed in the form ``<dialectname>_<argname>``.  See
     |          the documentation regarding an individual dialect at
     |          :ref:`dialect_toplevel` for detail on documented arguments.
     |  
     |  copy(self, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  table
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'constraint'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.DialectKWArgs:
     |  
     |  dialect_kwargs(...)
     |      A collection of keyword arguments specified as dialect-specific
     |      options to this construct.
     |      
     |      The arguments are present here in their original ``<dialect>_<kwarg>``
     |      format.  Only arguments that were actually passed are included;
     |      unlike the :attr:`.DialectKWArgs.dialect_options` collection, which
     |      contains all options known by this dialect including defaults.
     |      
     |      The collection is also writable; keys are accepted of the
     |      form ``<dialect>_<kwarg>`` where the value will be assembled
     |      into the list of options.
     |      
     |      .. versionadded:: 0.9.2
     |      
     |      .. versionchanged:: 0.9.4 The :attr:`.DialectKWArgs.dialect_kwargs`
     |         collection is now writable.
     |      
     |      .. seealso::
     |      
     |          :attr:`.DialectKWArgs.dialect_options` - nested dictionary form
     |  
     |  dialect_options(...)
     |      A collection of keyword arguments specified as dialect-specific
     |      options to this construct.
     |      
     |      This is a two-level nested registry, keyed to ``<dialect_name>``
     |      and ``<argument_name>``.  For example, the ``postgresql_where``
     |      argument would be locatable as::
     |      
     |          arg = my_object.dialect_options['postgresql']['where']
     |      
     |      .. versionadded:: 0.9.2
     |      
     |      .. seealso::
     |      
     |          :attr:`.DialectKWArgs.dialect_kwargs` - flat dictionary form
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from sqlalchemy.sql.base.DialectKWArgs:
     |  
     |  argument_for(cls, dialect_name, argument_name, default) from sqlalchemy.sql.visitors.VisitableType
     |      Add a new kind of dialect-specific keyword argument for this class.
     |      
     |      E.g.::
     |      
     |          Index.argument_for("mydialect", "length", None)
     |      
     |          some_index = Index('a', 'b', mydialect_length=5)
     |      
     |      The :meth:`.DialectKWArgs.argument_for` method is a per-argument
     |      way adding extra arguments to the
     |      :attr:`.DefaultDialect.construct_arguments` dictionary. This
     |      dictionary provides a list of argument names accepted by various
     |      schema-level constructs on behalf of a dialect.
     |      
     |      New dialects should typically specify this dictionary all at once as a
     |      data member of the dialect class.  The use case for ad-hoc addition of
     |      argument names is typically for end-user code that is also using
     |      a custom compilation scheme which consumes the additional arguments.
     |      
     |      :param dialect_name: name of a dialect.  The dialect must be
     |       locatable, else a :class:`.NoSuchModuleError` is raised.   The
     |       dialect must also include an existing
     |       :attr:`.DefaultDialect.construct_arguments` collection, indicating
     |       that it participates in the keyword-argument validation and default
     |       system, else :class:`.ArgumentError` is raised.  If the dialect does
     |       not include this collection, then any keyword argument can be
     |       specified on behalf of this dialect already.  All dialects packaged
     |       within SQLAlchemy include this collection, however for third party
     |       dialects, support may vary.
     |      
     |      :param argument_name: name of the parameter.
     |      
     |      :param default: default value of the parameter.
     |      
     |      .. versionadded:: 0.9.4
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.base.DialectKWArgs:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  kwargs
     |      A synonym for :attr:`.DialectKWArgs.dialect_kwargs`.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  __repr__(self)
     |  
     |  get_children(self, **kwargs)
     |      used to allow SchemaVisitor access
     |  
     |  info(...)
     |      Info dictionary associated with the object, allowing user-defined
     |      data to be associated with this :class:`.SchemaItem`.
     |      
     |      The dictionary is automatically generated when first accessed.
     |      It can also be specified in the constructor of some objects,
     |      such as :class:`.Table` and :class:`.Column`.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SchemaItem:
     |  
     |  quote
     |      Return the value of the ``quote`` flag passed
     |      to this schema object, for those schema items which
     |      have a ``name`` field.
     |      
     |      .. deprecated:: 0.9 Use ``<obj>.name.quote``
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  dispatch = <sqlalchemy.event.base.DDLEventsDispatch object>
    
    class DATE(Date)
     |  The SQL DATE type.
     |  
     |  Method resolution order:
     |      DATE
     |      Date
     |      _LookupExpressionAdapter
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'DATE'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Date:
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Date:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _LookupExpressionAdapter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _LookupExpressionAdapter:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  literal_processor(self, dialect)
     |      Return a conversion function for processing literal values that are
     |      to be rendered directly without using binds.
     |      
     |      This function is used when the compiler makes use of the
     |      "literal_binds" flag, typically used in DDL generation as well
     |      as in certain scenarios where backends don't accept bound parameters.
     |      
     |      .. versionadded:: 0.9.0
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class DATETIME(DateTime)
     |  The SQL DATETIME type.
     |  
     |  Method resolution order:
     |      DATETIME
     |      DateTime
     |      _LookupExpressionAdapter
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'DATETIME'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from DateTime:
     |  
     |  __init__(self, timezone=False)
     |      Construct a new :class:`.DateTime`.
     |      
     |      :param timezone: boolean.  Indicates that the datetime type should
     |       enable timezone support, if available on the
     |       **base date/time-holding type only**.   It is recommended
     |       to make use of the :class:`~.types.TIMESTAMP` datatype directly when
     |       using this flag, as some databases include separate generic
     |       date/time-holding types distinct from the timezone-capable
     |       TIMESTAMP datatype, such as Oracle.
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DateTime:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _LookupExpressionAdapter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _LookupExpressionAdapter:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  literal_processor(self, dialect)
     |      Return a conversion function for processing literal values that are
     |      to be rendered directly without using binds.
     |      
     |      This function is used when the compiler makes use of the
     |      "literal_binds" flag, typically used in DDL generation as well
     |      as in certain scenarios where backends don't accept bound parameters.
     |      
     |      .. versionadded:: 0.9.0
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class DDL(DDLElement)
     |  A literal DDL statement.
     |  
     |  Specifies literal SQL DDL to be executed by the database.  DDL objects
     |  function as DDL event listeners, and can be subscribed to those events
     |  listed in :class:`.DDLEvents`, using either :class:`.Table` or
     |  :class:`.MetaData` objects as targets.   Basic templating support allows
     |  a single DDL instance to handle repetitive tasks for multiple tables.
     |  
     |  Examples::
     |  
     |    from sqlalchemy import event, DDL
     |  
     |    tbl = Table('users', metadata, Column('uid', Integer))
     |    event.listen(tbl, 'before_create', DDL('DROP TRIGGER users_trigger'))
     |  
     |    spow = DDL('ALTER TABLE %(table)s SET secretpowers TRUE')
     |    event.listen(tbl, 'after_create', spow.execute_if(dialect='somedb'))
     |  
     |    drop_spow = DDL('ALTER TABLE users SET secretpowers FALSE')
     |    connection.execute(drop_spow)
     |  
     |  When operating on Table events, the following ``statement``
     |  string substitions are available::
     |  
     |    %(table)s  - the Table name, with any required quoting applied
     |    %(schema)s - the schema name, with any required quoting applied
     |    %(fullname)s - the Table name including schema, quoted if needed
     |  
     |  The DDL's "context", if any, will be combined with the standard
     |  substitutions noted above.  Keys present in the context will override
     |  the standard substitutions.
     |  
     |  Method resolution order:
     |      DDL
     |      DDLElement
     |      sqlalchemy.sql.base.Executable
     |      sqlalchemy.sql.base.Generative
     |      _DDLCompiles
     |      sqlalchemy.sql.elements.ClauseElement
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, statement, on=None, context=None, bind=None)
     |      Create a DDL statement.
     |      
     |      :param statement:
     |        A string or unicode string to be executed.  Statements will be
     |        processed with Python's string formatting operator.  See the
     |        ``context`` argument and the ``execute_at`` method.
     |      
     |        A literal '%' in a statement must be escaped as '%%'.
     |      
     |        SQL bind parameters are not available in DDL statements.
     |      
     |      :param on:
     |        .. deprecated:: 0.7
     |          See :meth:`.DDLElement.execute_if`.
     |      
     |        Optional filtering criteria.  May be a string, tuple or a callable
     |        predicate.  If a string, it will be compared to the name of the
     |        executing database dialect::
     |      
     |          DDL('something', on='postgresql')
     |      
     |        If a tuple, specifies multiple dialect names::
     |      
     |          DDL('something', on=('postgresql', 'mysql'))
     |      
     |        If a callable, it will be invoked with four positional arguments
     |        as well as optional keyword arguments:
     |      
     |          :ddl:
     |            This DDL element.
     |      
     |          :event:
     |            The name of the event that has triggered this DDL, such as
     |            'after-create' Will be None if the DDL is executed explicitly.
     |      
     |          :target:
     |            The ``Table`` or ``MetaData`` object which is the target of
     |            this event. May be None if the DDL is executed explicitly.
     |      
     |          :connection:
     |            The ``Connection`` being used for DDL execution
     |      
     |          :tables:
     |            Optional keyword argument - a list of Table objects which are to
     |            be created/ dropped within a MetaData.create_all() or drop_all()
     |            method call.
     |      
     |      
     |        If the callable returns a true value, the DDL statement will be
     |        executed.
     |      
     |      :param context:
     |        Optional dictionary, defaults to None.  These values will be
     |        available for use in string substitutions on the DDL statement.
     |      
     |      :param bind:
     |        Optional. A :class:`.Connectable`, used by
     |        default when ``execute()`` is invoked without a bind argument.
     |      
     |      
     |      .. seealso::
     |      
     |          :class:`.DDLEvents`
     |      
     |          :ref:`event_toplevel`
     |  
     |  __repr__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'ddl'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from DDLElement:
     |  
     |  __call__(self, target, bind, **kw)
     |      Execute the DDL as a ddl_listener.
     |  
     |  against(self, target)
     |      Return a copy of this DDL against a specific schema item.
     |  
     |  execute(self, bind=None, target=None)
     |      Execute this DDL immediately.
     |      
     |      Executes the DDL statement in isolation using the supplied
     |      :class:`.Connectable` or
     |      :class:`.Connectable` assigned to the ``.bind``
     |      property, if not supplied. If the DDL has a conditional ``on``
     |      criteria, it will be invoked with None as the event.
     |      
     |      :param bind:
     |        Optional, an ``Engine`` or ``Connection``. If not supplied, a valid
     |        :class:`.Connectable` must be present in the
     |        ``.bind`` property.
     |      
     |      :param target:
     |        Optional, defaults to None.  The target SchemaItem for the
     |        execute call.  Will be passed to the ``on`` callable if any,
     |        and may also provide string expansion data for the
     |        statement. See ``execute_at`` for more information.
     |  
     |  execute_at(self, event_name, target)
     |      Link execution of this DDL to the DDL lifecycle of a SchemaItem.
     |      
     |      .. deprecated:: 0.7 See :class:`.DDLEvents`, as well as :meth:`.DDLElement.execute_if`.
     |      
     |      Links this ``DDLElement`` to a ``Table`` or ``MetaData`` instance,
     |      executing it when that schema item is created or dropped. The DDL
     |      statement will be executed using the same Connection and transactional
     |      context as the Table create/drop itself. The ``.bind`` property of
     |      this statement is ignored.
     |      
     |      :param event:
     |        One of the events defined in the schema item's ``.ddl_events``;
     |        e.g. 'before-create', 'after-create', 'before-drop' or 'after-drop'
     |      
     |      :param target:
     |        The Table or MetaData instance for which this DDLElement will
     |        be associated with.
     |      
     |      A DDLElement instance can be linked to any number of schema items.
     |      
     |      ``execute_at`` builds on the ``append_ddl_listener`` interface of
     |      :class:`.MetaData` and :class:`.Table` objects.
     |      
     |      Caveat: Creating or dropping a Table in isolation will also trigger
     |      any DDL set to ``execute_at`` that Table's MetaData.  This may change
     |      in a future release.
     |  
     |  execute_if(self, dialect=None, callable_=None, state=None)
     |      Return a callable that will execute this
     |      DDLElement conditionally.
     |      
     |      Used to provide a wrapper for event listening::
     |      
     |          event.listen(
     |                      metadata,
     |                      'before_create',
     |                      DDL("my_ddl").execute_if(dialect='postgresql')
     |                  )
     |      
     |      :param dialect: May be a string, tuple or a callable
     |        predicate.  If a string, it will be compared to the name of the
     |        executing database dialect::
     |      
     |          DDL('something').execute_if(dialect='postgresql')
     |      
     |        If a tuple, specifies multiple dialect names::
     |      
     |          DDL('something').execute_if(dialect=('postgresql', 'mysql'))
     |      
     |      :param callable_: A callable, which will be invoked with
     |        four positional arguments as well as optional keyword
     |        arguments:
     |      
     |          :ddl:
     |            This DDL element.
     |      
     |          :target:
     |            The :class:`.Table` or :class:`.MetaData` object which is the
     |            target of this event. May be None if the DDL is executed
     |            explicitly.
     |      
     |          :bind:
     |            The :class:`.Connection` being used for DDL execution
     |      
     |          :tables:
     |            Optional keyword argument - a list of Table objects which are to
     |            be created/ dropped within a MetaData.create_all() or drop_all()
     |            method call.
     |      
     |          :state:
     |            Optional keyword argument - will be the ``state`` argument
     |            passed to this function.
     |      
     |          :checkfirst:
     |           Keyword argument, will be True if the 'checkfirst' flag was
     |           set during the call to ``create()``, ``create_all()``,
     |           ``drop()``, ``drop_all()``.
     |      
     |        If the callable returns a true value, the DDL statement will be
     |        executed.
     |      
     |      :param state: any value which will be passed to the callable\_
     |        as the ``state`` keyword argument.
     |      
     |      .. seealso::
     |      
     |          :class:`.DDLEvents`
     |      
     |          :ref:`event_toplevel`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DDLElement:
     |  
     |  bind
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from DDLElement:
     |  
     |  callable_ = None
     |  
     |  dialect = None
     |  
     |  on = None
     |  
     |  target = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.Executable:
     |  
     |  execution_options(self, **kw)
     |      Set non-SQL options for the statement which take effect during
     |      execution.
     |      
     |      Execution options can be set on a per-statement or
     |      per :class:`.Connection` basis.   Additionally, the
     |      :class:`.Engine` and ORM :class:`~.orm.query.Query` objects provide
     |      access to execution options which they in turn configure upon
     |      connections.
     |      
     |      The :meth:`execution_options` method is generative.  A new
     |      instance of this statement is returned that contains the options::
     |      
     |          statement = select([table.c.x, table.c.y])
     |          statement = statement.execution_options(autocommit=True)
     |      
     |      Note that only a subset of possible execution options can be applied
     |      to a statement - these include "autocommit" and "stream_results",
     |      but not "isolation_level" or "compiled_cache".
     |      See :meth:`.Connection.execution_options` for a full list of
     |      possible options.
     |      
     |      .. seealso::
     |      
     |          :meth:`.Connection.execution_options()`
     |      
     |          :meth:`.Query.execution_options()`
     |  
     |  scalar(self, *multiparams, **params)
     |      Compile and execute this :class:`.Executable`, returning the
     |      result's scalar representation.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.base.Executable:
     |  
     |  supports_execution = True
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.base.Generative:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.elements.ClauseElement:
     |  
     |  __and__(self, other)
     |      'and' at the ClauseElement level.
     |      
     |      .. deprecated:: 0.9.5 - conjunctions are intended to be
     |         at the :class:`.ColumnElement`. level
     |  
     |  __bool__(self)
     |  
     |  __getstate__(self)
     |  
     |  __invert__(self)
     |  
     |  __nonzero__ = __bool__(self)
     |  
     |  __or__(self, other)
     |      'or' at the ClauseElement level.
     |      
     |      .. deprecated:: 0.9.5 - conjunctions are intended to be
     |         at the :class:`.ColumnElement`. level
     |  
     |  __str__(self)
     |  
     |  compare(self, other, **kw)
     |      Compare this ClauseElement to the given ClauseElement.
     |      
     |      Subclasses should override the default behavior, which is a
     |      straight identity comparison.
     |      
     |      \**kw are arguments consumed by subclass compare() methods and
     |      may be used to modify the criteria for comparison.
     |      (see :class:`.ColumnElement`)
     |  
     |  compile(self, bind=None, dialect=None, **kw)
     |      Compile this SQL expression.
     |      
     |      The return value is a :class:`~.Compiled` object.
     |      Calling ``str()`` or ``unicode()`` on the returned value will yield a
     |      string representation of the result. The
     |      :class:`~.Compiled` object also can return a
     |      dictionary of bind parameter names and values
     |      using the ``params`` accessor.
     |      
     |      :param bind: An ``Engine`` or ``Connection`` from which a
     |          ``Compiled`` will be acquired. This argument takes precedence over
     |          this :class:`.ClauseElement`'s bound engine, if any.
     |      
     |      :param column_keys: Used for INSERT and UPDATE statements, a list of
     |          column names which should be present in the VALUES clause of the
     |          compiled statement. If ``None``, all columns from the target table
     |          object are rendered.
     |      
     |      :param dialect: A ``Dialect`` instance from which a ``Compiled``
     |          will be acquired. This argument takes precedence over the `bind`
     |          argument as well as this :class:`.ClauseElement`'s bound engine,
     |          if any.
     |      
     |      :param inline: Used for INSERT statements, for a dialect which does
     |          not support inline retrieval of newly generated primary key
     |          columns, will force the expression used to create the new primary
     |          key value to be rendered inline within the INSERT statement's
     |          VALUES clause. This typically refers to Sequence execution but may
     |          also refer to any server-side default generation function
     |          associated with a primary key `Column`.
     |      
     |      :param compile_kwargs: optional dictionary of additional parameters
     |          that will be passed through to the compiler within all "visit"
     |          methods.  This allows any custom flag to be passed through to
     |          a custom compilation construct, for example.  It is also used
     |          for the case of passing the ``literal_binds`` flag through::
     |      
     |              from sqlalchemy.sql import table, column, select
     |      
     |              t = table('t', column('x'))
     |      
     |              s = select([t]).where(t.c.x == 5)
     |      
     |              print s.compile(compile_kwargs={"literal_binds": True})
     |      
     |          .. versionadded:: 0.9.0
     |      
     |      .. seealso::
     |      
     |          :ref:`faq_sql_expression_string`
     |  
     |  get_children(self, **kwargs)
     |      Return immediate child elements of this :class:`.ClauseElement`.
     |      
     |      This is used for visit traversal.
     |      
     |      \**kwargs may contain flags that change the collection that is
     |      returned, for example to return a subset of items in order to
     |      cut down on larger traversals, or to return child items from a
     |      different context (such as schema-level collections instead of
     |      clause-level).
     |  
     |  params(self, *optionaldict, **kwargs)
     |      Return a copy with :func:`bindparam()` elements replaced.
     |      
     |      Returns a copy of this ClauseElement with :func:`bindparam()`
     |      elements replaced with values taken from the given dictionary::
     |      
     |        >>> clause = column('x') + bindparam('foo')
     |        >>> print clause.compile().params
     |        {'foo':None}
     |        >>> print clause.params({'foo':7}).compile().params
     |        {'foo':7}
     |  
     |  self_group(self, against=None)
     |      Apply a 'grouping' to this :class:`.ClauseElement`.
     |      
     |      This method is overridden by subclasses to return a
     |      "grouping" construct, i.e. parenthesis.   In particular
     |      it's used by "binary" expressions to provide a grouping
     |      around themselves when placed into a larger expression,
     |      as well as by :func:`.select` constructs when placed into
     |      the FROM clause of another :func:`.select`.  (Note that
     |      subqueries should be normally created using the
     |      :meth:`.Select.alias` method, as many platforms require
     |      nested SELECT statements to be named).
     |      
     |      As expressions are composed together, the application of
     |      :meth:`self_group` is automatic - end-user code should never
     |      need to use this method directly.  Note that SQLAlchemy's
     |      clause constructs take operator precedence into account -
     |      so parenthesis might not be needed, for example, in
     |      an expression like ``x OR (y AND z)`` - AND takes precedence
     |      over OR.
     |      
     |      The base :meth:`self_group` method of :class:`.ClauseElement`
     |      just returns self.
     |  
     |  unique_params(self, *optionaldict, **kwargs)
     |      Return a copy with :func:`bindparam()` elements replaced.
     |      
     |      Same functionality as ``params()``, except adds `unique=True`
     |      to affected bind parameters so that multiple statements can be
     |      used.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.elements.ClauseElement:
     |  
     |  description = None
     |  
     |  is_clause_element = True
     |  
     |  is_selectable = False
    
    class DECIMAL(Numeric)
     |  The SQL DECIMAL type.
     |  
     |  Method resolution order:
     |      DECIMAL
     |      Numeric
     |      _LookupExpressionAdapter
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'DECIMAL'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Numeric:
     |  
     |  __init__(self, precision=None, scale=None, decimal_return_scale=None, asdecimal=True)
     |      Construct a Numeric.
     |      
     |      :param precision: the numeric precision for use in DDL ``CREATE
     |        TABLE``.
     |      
     |      :param scale: the numeric scale for use in DDL ``CREATE TABLE``.
     |      
     |      :param asdecimal: default True.  Return whether or not
     |        values should be sent as Python Decimal objects, or
     |        as floats.   Different DBAPIs send one or the other based on
     |        datatypes - the Numeric type will ensure that return values
     |        are one or the other across DBAPIs consistently.
     |      
     |      :param decimal_return_scale: Default scale to use when converting
     |       from floats to Python decimals.  Floating point values will typically
     |       be much longer due to decimal inaccuracy, and most floating point
     |       database types don't have a notion of "scale", so by default the
     |       float type looks for the first ten decimal places when converting.
     |       Specfiying this value will override that length.  Types which
     |       do include an explicit ".scale" value, such as the base
     |       :class:`.Numeric` as well as the MySQL float types, will use the
     |       value of ".scale" as the default for decimal_return_scale, if not
     |       otherwise specified.
     |      
     |       .. versionadded:: 0.9.0
     |      
     |      When using the ``Numeric`` type, care should be taken to ensure
     |      that the asdecimal setting is apppropriate for the DBAPI in use -
     |      when Numeric applies a conversion from Decimal->float or float->
     |      Decimal, this conversion incurs an additional performance overhead
     |      for all result columns received.
     |      
     |      DBAPIs that return Decimal natively (e.g. psycopg2) will have
     |      better accuracy and higher performance with a setting of ``True``,
     |      as the native translation to Decimal reduces the amount of floating-
     |      point issues at play, and the Numeric type itself doesn't need
     |      to apply any further conversions.  However, another DBAPI which
     |      returns floats natively *will* incur an additional conversion
     |      overhead, and is still subject to floating point data loss - in
     |      which case ``asdecimal=False`` will at least remove the extra
     |      conversion overhead.
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Numeric:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _LookupExpressionAdapter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _LookupExpressionAdapter:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class Date(_LookupExpressionAdapter, sqlalchemy.sql.type_api.TypeEngine)
     |  A type for ``datetime.date()`` objects.
     |  
     |  Method resolution order:
     |      Date
     |      _LookupExpressionAdapter
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'date'
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _LookupExpressionAdapter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _LookupExpressionAdapter:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  literal_processor(self, dialect)
     |      Return a conversion function for processing literal values that are
     |      to be rendered directly without using binds.
     |      
     |      This function is used when the compiler makes use of the
     |      "literal_binds" flag, typically used in DDL generation as well
     |      as in certain scenarios where backends don't accept bound parameters.
     |      
     |      .. versionadded:: 0.9.0
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class DateTime(_LookupExpressionAdapter, sqlalchemy.sql.type_api.TypeEngine)
     |  A type for ``datetime.datetime()`` objects.
     |  
     |  Date and time types return objects from the Python ``datetime``
     |  module.  Most DBAPIs have built in support for the datetime
     |  module, with the noted exception of SQLite.  In the case of
     |  SQLite, date and time types are stored as strings which are then
     |  converted back to datetime objects when rows are returned.
     |  
     |  For the time representation within the datetime type, some
     |  backends include additional options, such as timezone support and
     |  fractional seconds support.  For fractional seconds, use the
     |  dialect-specific datatype, such as :class:`.mysql.TIME`.  For
     |  timezone support, use at least the :class:`~.types.TIMESTAMP` datatype,
     |  if not the dialect-specific datatype object.
     |  
     |  Method resolution order:
     |      DateTime
     |      _LookupExpressionAdapter
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, timezone=False)
     |      Construct a new :class:`.DateTime`.
     |      
     |      :param timezone: boolean.  Indicates that the datetime type should
     |       enable timezone support, if available on the
     |       **base date/time-holding type only**.   It is recommended
     |       to make use of the :class:`~.types.TIMESTAMP` datatype directly when
     |       using this flag, as some databases include separate generic
     |       date/time-holding types distinct from the timezone-capable
     |       TIMESTAMP datatype, such as Oracle.
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'datetime'
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _LookupExpressionAdapter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _LookupExpressionAdapter:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  literal_processor(self, dialect)
     |      Return a conversion function for processing literal values that are
     |      to be rendered directly without using binds.
     |      
     |      This function is used when the compiler makes use of the
     |      "literal_binds" flag, typically used in DDL generation as well
     |      as in certain scenarios where backends don't accept bound parameters.
     |      
     |      .. versionadded:: 0.9.0
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class DefaultClause(FetchedValue)
     |  A DDL-specified DEFAULT column value.
     |  
     |  :class:`.DefaultClause` is a :class:`.FetchedValue`
     |  that also generates a "DEFAULT" clause when
     |  "CREATE TABLE" is emitted.
     |  
     |  :class:`.DefaultClause` is generated automatically
     |  whenever the ``server_default``, ``server_onupdate`` arguments of
     |  :class:`.Column` are used.  A :class:`.DefaultClause`
     |  can be passed positionally as well.
     |  
     |  For example, the following::
     |  
     |      Column('foo', Integer, server_default="50")
     |  
     |  Is equivalent to::
     |  
     |      Column('foo', Integer, DefaultClause("50"))
     |  
     |  Method resolution order:
     |      DefaultClause
     |      FetchedValue
     |      _NotAColumnExpr
     |      sqlalchemy.sql.base.SchemaEventTarget
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, arg, for_update=False, _reflected=False)
     |  
     |  __repr__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  has_argument = True
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from FetchedValue:
     |  
     |  is_server_default = True
     |  
     |  reflected = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _NotAColumnExpr:
     |  
     |  __clause_element__ lambda self
     |  
     |  self_group lambda self
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _NotAColumnExpr:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  dispatch = <sqlalchemy.event.base.DDLEventsDispatch object>
    
    class Enum(sqlalchemy.sql.type_api.Emulated, String, SchemaType)
     |  Generic Enum Type.
     |  
     |  The :class:`.Enum` type provides a set of possible string values
     |  which the column is constrained towards.
     |  
     |  The :class:`.Enum` type will make use of the backend's native "ENUM"
     |  type if one is available; otherwise, it uses a VARCHAR datatype and
     |  produces a CHECK constraint.  Use of the backend-native enum type
     |  can be disabled using the :paramref:`.Enum.native_enum` flag, and
     |  the production of the CHECK constraint is configurable using the
     |  :paramref:`.Enum.create_constraint` flag.
     |  
     |  The :class:`.Enum` type also provides in-Python validation of string
     |  values during both read and write operations.  When reading a value
     |  from the database in a result set, the string value is always checked
     |  against the list of possible values and a ``LookupError`` is raised
     |  if no match is found.  When passing a value to the database as a
     |  plain string within a SQL statement, if the
     |  :paramref:`.Enum.validate_strings` parameter is
     |  set to True, a ``LookupError`` is raised for any string value that's
     |  not located in the given list of possible values; note that this
     |  impacts usage of LIKE expressions with enumerated values (an unusual
     |  use case).
     |  
     |  .. versionchanged:: 1.1 the :class:`.Enum` type now provides in-Python
     |     validation of input values as well as on data being returned by
     |     the database.
     |  
     |  The source of enumerated values may be a list of string values, or
     |  alternatively a PEP-435-compliant enumerated class.  For the purposes
     |  of the :class:`.Enum` datatype, this class need only provide a
     |  ``__members__`` method.
     |  
     |  When using an enumerated class, the enumerated objects are used
     |  both for input and output, rather than strings as is the case with
     |  a plain-string enumerated type::
     |  
     |      import enum
     |      class MyEnum(enum.Enum):
     |          one = 1
     |          two = 2
     |          three = 3
     |  
     |  
     |      t = Table(
     |          'data', MetaData(),
     |          Column('value', Enum(MyEnum))
     |      )
     |  
     |      connection.execute(t.insert(), {"value": MyEnum.two})
     |      assert connection.scalar(t.select()) is MyEnum.two
     |  
     |  Above, the string names of each element, e.g. "one", "two", "three",
     |  are persisted to the database; the values of the Python Enum, here
     |  indicated as integers, are **not** used; the value of each enum can
     |  therefore be any kind of Python object whether or not it is persistable.
     |  
     |  .. versionadded:: 1.1 - support for PEP-435-style enumerated
     |     classes.
     |  
     |  
     |  .. seealso::
     |  
     |      :class:`.postgresql.ENUM` - PostgreSQL-specific type,
     |      which has additional functionality.
     |  
     |      :class:`.mysql.ENUM` - MySQL-specific type
     |  
     |  Method resolution order:
     |      Enum
     |      sqlalchemy.sql.type_api.Emulated
     |      String
     |      Concatenable
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      SchemaType
     |      sqlalchemy.sql.base.SchemaEventTarget
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, *enums, **kw)
     |      Construct an enum.
     |      
     |      Keyword arguments which don't apply to a specific backend are ignored
     |      by that backend.
     |      
     |      :param \*enums: either exactly one PEP-435 compliant enumerated type
     |         or one or more string or unicode enumeration labels. If unicode
     |         labels are present, the `convert_unicode` flag is auto-enabled.
     |      
     |         .. versionadded:: 1.1 a PEP-435 style enumerated class may be
     |            passed.
     |      
     |      :param convert_unicode: Enable unicode-aware bind parameter and
     |         result-set processing for this Enum's data. This is set
     |         automatically based on the presence of unicode label strings.
     |      
     |      :param create_constraint: defaults to True.  When creating a non-native
     |         enumerated type, also build a CHECK constraint on the database
     |         against the valid values.
     |      
     |         .. versionadded:: 1.1 - added :paramref:`.Enum.create_constraint`
     |            which provides the option to disable the production of the
     |            CHECK constraint for a non-native enumerated type.
     |      
     |      :param metadata: Associate this type directly with a ``MetaData``
     |         object. For types that exist on the target database as an
     |         independent schema construct (PostgreSQL), this type will be
     |         created and dropped within ``create_all()`` and ``drop_all()``
     |         operations. If the type is not associated with any ``MetaData``
     |         object, it will associate itself with each ``Table`` in which it is
     |         used, and will be created when any of those individual tables are
     |         created, after a check is performed for its existence. The type is
     |         only dropped when ``drop_all()`` is called for that ``Table``
     |         object's metadata, however.
     |      
     |      :param name: The name of this type. This is required for PostgreSQL
     |         and any future supported database which requires an explicitly
     |         named type, or an explicitly named constraint in order to generate
     |         the type and/or a table that uses it. If a PEP-435 enumerated
     |         class was used, its name (converted to lower case) is used by
     |         default.
     |      
     |      :param native_enum: Use the database's native ENUM type when
     |         available. Defaults to True. When False, uses VARCHAR + check
     |         constraint for all backends.
     |      
     |      :param schema: Schema name of this type. For types that exist on the
     |         target database as an independent schema construct (PostgreSQL),
     |         this parameter specifies the named schema in which the type is
     |         present.
     |      
     |         .. note::
     |      
     |              The ``schema`` of the :class:`.Enum` type does not
     |              by default make use of the ``schema`` established on the
     |              owning :class:`.Table`.  If this behavior is desired,
     |              set the ``inherit_schema`` flag to ``True``.
     |      
     |      :param quote: Set explicit quoting preferences for the type's name.
     |      
     |      :param inherit_schema: When ``True``, the "schema" from the owning
     |         :class:`.Table` will be copied to the "schema" attribute of this
     |         :class:`.Enum`, replacing whatever value was passed for the
     |         ``schema`` attribute.   This also takes effect when using the
     |         :meth:`.Table.tometadata` operation.
     |      
     |      :param validate_strings: when True, string values that are being
     |         passed to the database in a SQL statement will be checked
     |         for validity against the list of enumerated values.  Unrecognized
     |         values will result in a ``LookupError`` being raised.
     |      
     |         .. versionadded:: 1.1.0b2
     |  
     |  __repr__(self)
     |  
     |  adapt(self, impltype, **kw)
     |  
     |  adapt_to_emulated(self, impltype, **kw)
     |  
     |  bind_processor(self, dialect)
     |  
     |  copy(self, **kw)
     |  
     |  literal_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  native
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  __visit_name__ = 'enum'
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.type_api.Emulated:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String:
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __str__(self)
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaType:
     |  
     |  create(self, bind=None, checkfirst=False)
     |      Issue CREATE ddl for this type, if applicable.
     |  
     |  drop(self, bind=None, checkfirst=False)
     |      Issue DROP ddl for this type, if applicable.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SchemaType:
     |  
     |  bind
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  dispatch = <sqlalchemy.event.base.DDLEventsDispatch object>
    
    class FLOAT(Float)
     |  The SQL FLOAT type.
     |  
     |  Method resolution order:
     |      FLOAT
     |      Float
     |      Numeric
     |      _LookupExpressionAdapter
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'FLOAT'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Float:
     |  
     |  __init__(self, precision=None, asdecimal=False, decimal_return_scale=None, **kwargs)
     |      Construct a Float.
     |      
     |      :param precision: the numeric precision for use in DDL ``CREATE
     |         TABLE``.
     |      
     |      :param asdecimal: the same flag as that of :class:`.Numeric`, but
     |        defaults to ``False``.   Note that setting this flag to ``True``
     |        results in floating point conversion.
     |      
     |      :param decimal_return_scale: Default scale to use when converting
     |       from floats to Python decimals.  Floating point values will typically
     |       be much longer due to decimal inaccuracy, and most floating point
     |       database types don't have a notion of "scale", so by default the
     |       float type looks for the first ten decimal places when converting.
     |       Specfiying this value will override that length.  Note that the
     |       MySQL float types, which do include "scale", will use "scale"
     |       as the default for decimal_return_scale, if not otherwise specified.
     |      
     |       .. versionadded:: 0.9.0
     |      
     |      :param \**kwargs: deprecated.  Additional arguments here are ignored
     |       by the default :class:`.Float` type.  For database specific
     |       floats that support additional arguments, see that dialect's
     |       documentation for details, such as
     |       :class:`sqlalchemy.dialects.mysql.FLOAT`.
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Float:
     |  
     |  scale = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Numeric:
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Numeric:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _LookupExpressionAdapter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _LookupExpressionAdapter:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class FetchedValue(_NotAColumnExpr, sqlalchemy.sql.base.SchemaEventTarget)
     |  A marker for a transparent database-side default.
     |  
     |  Use :class:`.FetchedValue` when the database is configured
     |  to provide some automatic default for a column.
     |  
     |  E.g.::
     |  
     |      Column('foo', Integer, FetchedValue())
     |  
     |  Would indicate that some trigger or default generator
     |  will create a new value for the ``foo`` column during an
     |  INSERT.
     |  
     |  .. seealso::
     |  
     |      :ref:`triggered_columns`
     |  
     |  Method resolution order:
     |      FetchedValue
     |      _NotAColumnExpr
     |      sqlalchemy.sql.base.SchemaEventTarget
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, for_update=False)
     |  
     |  __repr__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  has_argument = False
     |  
     |  is_server_default = True
     |  
     |  reflected = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _NotAColumnExpr:
     |  
     |  __clause_element__ lambda self
     |  
     |  self_group lambda self
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _NotAColumnExpr:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  dispatch = <sqlalchemy.event.base.DDLEventsDispatch object>
    
    class Float(Numeric)
     |  Type representing floating point types, such as ``FLOAT`` or ``REAL``.
     |  
     |  This type returns Python ``float`` objects by default, unless the
     |  :paramref:`.Float.asdecimal` flag is set to True, in which case they
     |  are coerced to ``decimal.Decimal`` objects.
     |  
     |  .. note::
     |  
     |      The :class:`.Float` type is designed to receive data from a database
     |      type that is explicitly known to be a floating point type
     |      (e.g. ``FLOAT``, ``REAL``, others)
     |      and not a decimal type (e.g. ``DECIMAL``, ``NUMERIC``, others).
     |      If the database column on the server is in fact a Numeric
     |      type, such as ``DECIMAL`` or ``NUMERIC``, use the :class:`.Numeric`
     |      type or a subclass, otherwise numeric coercion between
     |      ``float``/``Decimal`` may or may not function as expected.
     |  
     |  Method resolution order:
     |      Float
     |      Numeric
     |      _LookupExpressionAdapter
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, precision=None, asdecimal=False, decimal_return_scale=None, **kwargs)
     |      Construct a Float.
     |      
     |      :param precision: the numeric precision for use in DDL ``CREATE
     |         TABLE``.
     |      
     |      :param asdecimal: the same flag as that of :class:`.Numeric`, but
     |        defaults to ``False``.   Note that setting this flag to ``True``
     |        results in floating point conversion.
     |      
     |      :param decimal_return_scale: Default scale to use when converting
     |       from floats to Python decimals.  Floating point values will typically
     |       be much longer due to decimal inaccuracy, and most floating point
     |       database types don't have a notion of "scale", so by default the
     |       float type looks for the first ten decimal places when converting.
     |       Specfiying this value will override that length.  Note that the
     |       MySQL float types, which do include "scale", will use "scale"
     |       as the default for decimal_return_scale, if not otherwise specified.
     |      
     |       .. versionadded:: 0.9.0
     |      
     |      :param \**kwargs: deprecated.  Additional arguments here are ignored
     |       by the default :class:`.Float` type.  For database specific
     |       floats that support additional arguments, see that dialect's
     |       documentation for details, such as
     |       :class:`sqlalchemy.dialects.mysql.FLOAT`.
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'float'
     |  
     |  scale = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Numeric:
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Numeric:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _LookupExpressionAdapter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _LookupExpressionAdapter:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class ForeignKey(sqlalchemy.sql.base.DialectKWArgs, SchemaItem)
     |  Defines a dependency between two columns.
     |  
     |  ``ForeignKey`` is specified as an argument to a :class:`.Column` object,
     |  e.g.::
     |  
     |      t = Table("remote_table", metadata,
     |          Column("remote_id", ForeignKey("main_table.id"))
     |      )
     |  
     |  Note that ``ForeignKey`` is only a marker object that defines
     |  a dependency between two columns.   The actual constraint
     |  is in all cases represented by the :class:`.ForeignKeyConstraint`
     |  object.   This object will be generated automatically when
     |  a ``ForeignKey`` is associated with a :class:`.Column` which
     |  in turn is associated with a :class:`.Table`.   Conversely,
     |  when :class:`.ForeignKeyConstraint` is applied to a :class:`.Table`,
     |  ``ForeignKey`` markers are automatically generated to be
     |  present on each associated :class:`.Column`, which are also
     |  associated with the constraint object.
     |  
     |  Note that you cannot define a "composite" foreign key constraint,
     |  that is a constraint between a grouping of multiple parent/child
     |  columns, using ``ForeignKey`` objects.   To define this grouping,
     |  the :class:`.ForeignKeyConstraint` object must be used, and applied
     |  to the :class:`.Table`.   The associated ``ForeignKey`` objects
     |  are created automatically.
     |  
     |  The ``ForeignKey`` objects associated with an individual
     |  :class:`.Column` object are available in the `foreign_keys` collection
     |  of that column.
     |  
     |  Further examples of foreign key configuration are in
     |  :ref:`metadata_foreignkeys`.
     |  
     |  Method resolution order:
     |      ForeignKey
     |      sqlalchemy.sql.base.DialectKWArgs
     |      SchemaItem
     |      sqlalchemy.sql.base.SchemaEventTarget
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, column, _constraint=None, use_alter=False, name=None, onupdate=None, ondelete=None, deferrable=None, initially=None, link_to_name=False, match=None, info=None, **dialect_kw)
     |      Construct a column-level FOREIGN KEY.
     |      
     |      The :class:`.ForeignKey` object when constructed generates a
     |      :class:`.ForeignKeyConstraint` which is associated with the parent
     |      :class:`.Table` object's collection of constraints.
     |      
     |      :param column: A single target column for the key relationship. A
     |          :class:`.Column` object or a column name as a string:
     |          ``tablename.columnkey`` or ``schema.tablename.columnkey``.
     |          ``columnkey`` is the ``key`` which has been assigned to the column
     |          (defaults to the column name itself), unless ``link_to_name`` is
     |          ``True`` in which case the rendered name of the column is used.
     |      
     |          .. versionadded:: 0.7.4
     |              Note that if the schema name is not included, and the
     |              underlying :class:`.MetaData` has a "schema", that value will
     |              be used.
     |      
     |      :param name: Optional string. An in-database name for the key if
     |          `constraint` is not provided.
     |      
     |      :param onupdate: Optional string. If set, emit ON UPDATE <value> when
     |          issuing DDL for this constraint. Typical values include CASCADE,
     |          DELETE and RESTRICT.
     |      
     |      :param ondelete: Optional string. If set, emit ON DELETE <value> when
     |          issuing DDL for this constraint. Typical values include CASCADE,
     |          DELETE and RESTRICT.
     |      
     |      :param deferrable: Optional bool. If set, emit DEFERRABLE or NOT
     |          DEFERRABLE when issuing DDL for this constraint.
     |      
     |      :param initially: Optional string. If set, emit INITIALLY <value> when
     |          issuing DDL for this constraint.
     |      
     |      :param link_to_name: if True, the string name given in ``column`` is
     |          the rendered name of the referenced column, not its locally
     |          assigned ``key``.
     |      
     |      :param use_alter: passed to the underlying
     |          :class:`.ForeignKeyConstraint` to indicate the constraint should
     |          be generated/dropped externally from the CREATE TABLE/ DROP TABLE
     |          statement.  See :paramref:`.ForeignKeyConstraint.use_alter`
     |          for further description.
     |      
     |          .. seealso::
     |      
     |              :paramref:`.ForeignKeyConstraint.use_alter`
     |      
     |              :ref:`use_alter`
     |      
     |      :param match: Optional string. If set, emit MATCH <value> when issuing
     |          DDL for this constraint. Typical values include SIMPLE, PARTIAL
     |          and FULL.
     |      
     |      :param info: Optional data dictionary which will be populated into the
     |          :attr:`.SchemaItem.info` attribute of this object.
     |      
     |          .. versionadded:: 1.0.0
     |      
     |      :param \**dialect_kw:  Additional keyword arguments are dialect
     |          specific, and passed in the form ``<dialectname>_<argname>``.  The
     |          arguments are ultimately handled by a corresponding
     |          :class:`.ForeignKeyConstraint`.  See the documentation regarding
     |          an individual dialect at :ref:`dialect_toplevel` for detail on
     |          documented arguments.
     |      
     |          .. versionadded:: 0.9.2
     |  
     |  __repr__(self)
     |  
     |  column(...)
     |      Return the target :class:`.Column` referenced by this
     |      :class:`.ForeignKey`.
     |      
     |      If no target column has been established, an exception
     |      is raised.
     |      
     |      .. versionchanged:: 0.9.0
     |          Foreign key target column resolution now occurs as soon as both
     |          the ForeignKey object and the remote Column to which it refers
     |          are both associated with the same MetaData object.
     |  
     |  copy(self, schema=None)
     |      Produce a copy of this :class:`.ForeignKey` object.
     |      
     |      The new :class:`.ForeignKey` will not be bound
     |      to any :class:`.Column`.
     |      
     |      This method is usually used by the internal
     |      copy procedures of :class:`.Column`, :class:`.Table`,
     |      and :class:`.MetaData`.
     |      
     |      :param schema: The returned :class:`.ForeignKey` will
     |        reference the original table and column name, qualified
     |        by the given string schema name.
     |  
     |  get_referent(self, table)
     |      Return the :class:`.Column` in the given :class:`.Table`
     |      referenced by this :class:`.ForeignKey`.
     |      
     |      Returns None if this :class:`.ForeignKey` does not reference the given
     |      :class:`.Table`.
     |  
     |  references(self, table)
     |      Return True if the given :class:`.Table` is referenced by this
     |      :class:`.ForeignKey`.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  target_fullname
     |      Return a string based 'column specification' for this
     |      :class:`.ForeignKey`.
     |      
     |      This is usually the equivalent of the string-based "tablename.colname"
     |      argument first passed to the object's constructor.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'foreign_key'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.DialectKWArgs:
     |  
     |  dialect_kwargs(...)
     |      A collection of keyword arguments specified as dialect-specific
     |      options to this construct.
     |      
     |      The arguments are present here in their original ``<dialect>_<kwarg>``
     |      format.  Only arguments that were actually passed are included;
     |      unlike the :attr:`.DialectKWArgs.dialect_options` collection, which
     |      contains all options known by this dialect including defaults.
     |      
     |      The collection is also writable; keys are accepted of the
     |      form ``<dialect>_<kwarg>`` where the value will be assembled
     |      into the list of options.
     |      
     |      .. versionadded:: 0.9.2
     |      
     |      .. versionchanged:: 0.9.4 The :attr:`.DialectKWArgs.dialect_kwargs`
     |         collection is now writable.
     |      
     |      .. seealso::
     |      
     |          :attr:`.DialectKWArgs.dialect_options` - nested dictionary form
     |  
     |  dialect_options(...)
     |      A collection of keyword arguments specified as dialect-specific
     |      options to this construct.
     |      
     |      This is a two-level nested registry, keyed to ``<dialect_name>``
     |      and ``<argument_name>``.  For example, the ``postgresql_where``
     |      argument would be locatable as::
     |      
     |          arg = my_object.dialect_options['postgresql']['where']
     |      
     |      .. versionadded:: 0.9.2
     |      
     |      .. seealso::
     |      
     |          :attr:`.DialectKWArgs.dialect_kwargs` - flat dictionary form
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from sqlalchemy.sql.base.DialectKWArgs:
     |  
     |  argument_for(cls, dialect_name, argument_name, default) from sqlalchemy.sql.visitors.VisitableType
     |      Add a new kind of dialect-specific keyword argument for this class.
     |      
     |      E.g.::
     |      
     |          Index.argument_for("mydialect", "length", None)
     |      
     |          some_index = Index('a', 'b', mydialect_length=5)
     |      
     |      The :meth:`.DialectKWArgs.argument_for` method is a per-argument
     |      way adding extra arguments to the
     |      :attr:`.DefaultDialect.construct_arguments` dictionary. This
     |      dictionary provides a list of argument names accepted by various
     |      schema-level constructs on behalf of a dialect.
     |      
     |      New dialects should typically specify this dictionary all at once as a
     |      data member of the dialect class.  The use case for ad-hoc addition of
     |      argument names is typically for end-user code that is also using
     |      a custom compilation scheme which consumes the additional arguments.
     |      
     |      :param dialect_name: name of a dialect.  The dialect must be
     |       locatable, else a :class:`.NoSuchModuleError` is raised.   The
     |       dialect must also include an existing
     |       :attr:`.DefaultDialect.construct_arguments` collection, indicating
     |       that it participates in the keyword-argument validation and default
     |       system, else :class:`.ArgumentError` is raised.  If the dialect does
     |       not include this collection, then any keyword argument can be
     |       specified on behalf of this dialect already.  All dialects packaged
     |       within SQLAlchemy include this collection, however for third party
     |       dialects, support may vary.
     |      
     |      :param argument_name: name of the parameter.
     |      
     |      :param default: default value of the parameter.
     |      
     |      .. versionadded:: 0.9.4
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.base.DialectKWArgs:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  kwargs
     |      A synonym for :attr:`.DialectKWArgs.dialect_kwargs`.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  get_children(self, **kwargs)
     |      used to allow SchemaVisitor access
     |  
     |  info(...)
     |      Info dictionary associated with the object, allowing user-defined
     |      data to be associated with this :class:`.SchemaItem`.
     |      
     |      The dictionary is automatically generated when first accessed.
     |      It can also be specified in the constructor of some objects,
     |      such as :class:`.Table` and :class:`.Column`.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SchemaItem:
     |  
     |  quote
     |      Return the value of the ``quote`` flag passed
     |      to this schema object, for those schema items which
     |      have a ``name`` field.
     |      
     |      .. deprecated:: 0.9 Use ``<obj>.name.quote``
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  dispatch = <sqlalchemy.event.base.DDLEventsDispatch object>
    
    class ForeignKeyConstraint(ColumnCollectionConstraint)
     |  A table-level FOREIGN KEY constraint.
     |  
     |  Defines a single column or composite FOREIGN KEY ... REFERENCES
     |  constraint. For a no-frills, single column foreign key, adding a
     |  :class:`.ForeignKey` to the definition of a :class:`.Column` is a
     |  shorthand equivalent for an unnamed, single column
     |  :class:`.ForeignKeyConstraint`.
     |  
     |  Examples of foreign key configuration are in :ref:`metadata_foreignkeys`.
     |  
     |  Method resolution order:
     |      ForeignKeyConstraint
     |      ColumnCollectionConstraint
     |      ColumnCollectionMixin
     |      Constraint
     |      sqlalchemy.sql.base.DialectKWArgs
     |      SchemaItem
     |      sqlalchemy.sql.base.SchemaEventTarget
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, columns, refcolumns, name=None, onupdate=None, ondelete=None, deferrable=None, initially=None, use_alter=False, link_to_name=False, match=None, table=None, info=None, **dialect_kw)
     |      Construct a composite-capable FOREIGN KEY.
     |      
     |      :param columns: A sequence of local column names. The named columns
     |        must be defined and present in the parent Table. The names should
     |        match the ``key`` given to each column (defaults to the name) unless
     |        ``link_to_name`` is True.
     |      
     |      :param refcolumns: A sequence of foreign column names or Column
     |        objects. The columns must all be located within the same Table.
     |      
     |      :param name: Optional, the in-database name of the key.
     |      
     |      :param onupdate: Optional string. If set, emit ON UPDATE <value> when
     |        issuing DDL for this constraint. Typical values include CASCADE,
     |        DELETE and RESTRICT.
     |      
     |      :param ondelete: Optional string. If set, emit ON DELETE <value> when
     |        issuing DDL for this constraint. Typical values include CASCADE,
     |        DELETE and RESTRICT.
     |      
     |      :param deferrable: Optional bool. If set, emit DEFERRABLE or NOT
     |        DEFERRABLE when issuing DDL for this constraint.
     |      
     |      :param initially: Optional string. If set, emit INITIALLY <value> when
     |        issuing DDL for this constraint.
     |      
     |      :param link_to_name: if True, the string name given in ``column`` is
     |        the rendered name of the referenced column, not its locally assigned
     |        ``key``.
     |      
     |      :param use_alter: If True, do not emit the DDL for this constraint as
     |        part of the CREATE TABLE definition. Instead, generate it via an
     |        ALTER TABLE statement issued after the full collection of tables
     |        have been created, and drop it via an ALTER TABLE statement before
     |        the full collection of tables are dropped.
     |      
     |        The use of :paramref:`.ForeignKeyConstraint.use_alter` is
     |        particularly geared towards the case where two or more tables
     |        are established within a mutually-dependent foreign key constraint
     |        relationship; however, the :meth:`.MetaData.create_all` and
     |        :meth:`.MetaData.drop_all` methods will perform this resolution
     |        automatically, so the flag is normally not needed.
     |      
     |        .. versionchanged:: 1.0.0  Automatic resolution of foreign key
     |           cycles has been added, removing the need to use the
     |           :paramref:`.ForeignKeyConstraint.use_alter` in typical use
     |           cases.
     |      
     |        .. seealso::
     |      
     |              :ref:`use_alter`
     |      
     |      :param match: Optional string. If set, emit MATCH <value> when issuing
     |        DDL for this constraint. Typical values include SIMPLE, PARTIAL
     |        and FULL.
     |      
     |      :param info: Optional data dictionary which will be populated into the
     |          :attr:`.SchemaItem.info` attribute of this object.
     |      
     |          .. versionadded:: 1.0.0
     |      
     |      :param \**dialect_kw:  Additional keyword arguments are dialect
     |        specific, and passed in the form ``<dialectname>_<argname>``.  See
     |        the documentation regarding an individual dialect at
     |        :ref:`dialect_toplevel` for detail on documented arguments.
     |      
     |          .. versionadded:: 0.9.2
     |  
     |  copy(self, schema=None, target_table=None, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  column_keys
     |      Return a list of string keys representing the local
     |      columns in this :class:`.ForeignKeyConstraint`.
     |      
     |      This list is either the original string arguments sent
     |      to the constructor of the :class:`.ForeignKeyConstraint`,
     |      or if the constraint has been initialized with :class:`.Column`
     |      objects, is the string .key of each element.
     |      
     |      .. versionadded:: 1.0.0
     |  
     |  referred_table
     |      The :class:`.Table` object to which this
     |      :class:`.ForeignKeyConstraint` references.
     |      
     |      This is a dynamically calculated attribute which may not be available
     |      if the constraint and/or parent table is not yet associated with
     |      a metadata collection that contains the referred table.
     |      
     |      .. versionadded:: 1.0.0
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'foreign_key_constraint'
     |  
     |  columns = None
     |  
     |  elements = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ColumnCollectionConstraint:
     |  
     |  __contains__(self, x)
     |  
     |  __iter__(self)
     |  
     |  __len__(self)
     |  
     |  contains_column(self, col)
     |      Return True if this constraint contains the given column.
     |      
     |      Note that this object also contains an attribute ``.columns``
     |      which is a :class:`.ColumnCollection` of :class:`.Column` objects.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ColumnCollectionMixin:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Constraint:
     |  
     |  table
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.DialectKWArgs:
     |  
     |  dialect_kwargs(...)
     |      A collection of keyword arguments specified as dialect-specific
     |      options to this construct.
     |      
     |      The arguments are present here in their original ``<dialect>_<kwarg>``
     |      format.  Only arguments that were actually passed are included;
     |      unlike the :attr:`.DialectKWArgs.dialect_options` collection, which
     |      contains all options known by this dialect including defaults.
     |      
     |      The collection is also writable; keys are accepted of the
     |      form ``<dialect>_<kwarg>`` where the value will be assembled
     |      into the list of options.
     |      
     |      .. versionadded:: 0.9.2
     |      
     |      .. versionchanged:: 0.9.4 The :attr:`.DialectKWArgs.dialect_kwargs`
     |         collection is now writable.
     |      
     |      .. seealso::
     |      
     |          :attr:`.DialectKWArgs.dialect_options` - nested dictionary form
     |  
     |  dialect_options(...)
     |      A collection of keyword arguments specified as dialect-specific
     |      options to this construct.
     |      
     |      This is a two-level nested registry, keyed to ``<dialect_name>``
     |      and ``<argument_name>``.  For example, the ``postgresql_where``
     |      argument would be locatable as::
     |      
     |          arg = my_object.dialect_options['postgresql']['where']
     |      
     |      .. versionadded:: 0.9.2
     |      
     |      .. seealso::
     |      
     |          :attr:`.DialectKWArgs.dialect_kwargs` - flat dictionary form
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from sqlalchemy.sql.base.DialectKWArgs:
     |  
     |  argument_for(cls, dialect_name, argument_name, default) from sqlalchemy.sql.visitors.VisitableType
     |      Add a new kind of dialect-specific keyword argument for this class.
     |      
     |      E.g.::
     |      
     |          Index.argument_for("mydialect", "length", None)
     |      
     |          some_index = Index('a', 'b', mydialect_length=5)
     |      
     |      The :meth:`.DialectKWArgs.argument_for` method is a per-argument
     |      way adding extra arguments to the
     |      :attr:`.DefaultDialect.construct_arguments` dictionary. This
     |      dictionary provides a list of argument names accepted by various
     |      schema-level constructs on behalf of a dialect.
     |      
     |      New dialects should typically specify this dictionary all at once as a
     |      data member of the dialect class.  The use case for ad-hoc addition of
     |      argument names is typically for end-user code that is also using
     |      a custom compilation scheme which consumes the additional arguments.
     |      
     |      :param dialect_name: name of a dialect.  The dialect must be
     |       locatable, else a :class:`.NoSuchModuleError` is raised.   The
     |       dialect must also include an existing
     |       :attr:`.DefaultDialect.construct_arguments` collection, indicating
     |       that it participates in the keyword-argument validation and default
     |       system, else :class:`.ArgumentError` is raised.  If the dialect does
     |       not include this collection, then any keyword argument can be
     |       specified on behalf of this dialect already.  All dialects packaged
     |       within SQLAlchemy include this collection, however for third party
     |       dialects, support may vary.
     |      
     |      :param argument_name: name of the parameter.
     |      
     |      :param default: default value of the parameter.
     |      
     |      .. versionadded:: 0.9.4
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.base.DialectKWArgs:
     |  
     |  kwargs
     |      A synonym for :attr:`.DialectKWArgs.dialect_kwargs`.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  __repr__(self)
     |  
     |  get_children(self, **kwargs)
     |      used to allow SchemaVisitor access
     |  
     |  info(...)
     |      Info dictionary associated with the object, allowing user-defined
     |      data to be associated with this :class:`.SchemaItem`.
     |      
     |      The dictionary is automatically generated when first accessed.
     |      It can also be specified in the constructor of some objects,
     |      such as :class:`.Table` and :class:`.Column`.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SchemaItem:
     |  
     |  quote
     |      Return the value of the ``quote`` flag passed
     |      to this schema object, for those schema items which
     |      have a ``name`` field.
     |      
     |      .. deprecated:: 0.9 Use ``<obj>.name.quote``
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  dispatch = <sqlalchemy.event.base.DDLEventsDispatch object>
    
    INT = class INTEGER(Integer)
     |  The SQL INT or INTEGER type.
     |  
     |  Method resolution order:
     |      INTEGER
     |      Integer
     |      _LookupExpressionAdapter
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'INTEGER'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Integer:
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Integer:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _LookupExpressionAdapter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _LookupExpressionAdapter:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class INTEGER(Integer)
     |  The SQL INT or INTEGER type.
     |  
     |  Method resolution order:
     |      INTEGER
     |      Integer
     |      _LookupExpressionAdapter
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'INTEGER'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Integer:
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Integer:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _LookupExpressionAdapter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _LookupExpressionAdapter:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class Index(sqlalchemy.sql.base.DialectKWArgs, ColumnCollectionMixin, SchemaItem)
     |  A table-level INDEX.
     |  
     |  Defines a composite (one or more column) INDEX.
     |  
     |  E.g.::
     |  
     |      sometable = Table("sometable", metadata,
     |                      Column("name", String(50)),
     |                      Column("address", String(100))
     |                  )
     |  
     |      Index("some_index", sometable.c.name)
     |  
     |  For a no-frills, single column index, adding
     |  :class:`.Column` also supports ``index=True``::
     |  
     |      sometable = Table("sometable", metadata,
     |                      Column("name", String(50), index=True)
     |                  )
     |  
     |  For a composite index, multiple columns can be specified::
     |  
     |      Index("some_index", sometable.c.name, sometable.c.address)
     |  
     |  Functional indexes are supported as well, typically by using the
     |  :data:`.func` construct in conjunction with table-bound
     |  :class:`.Column` objects::
     |  
     |      Index("some_index", func.lower(sometable.c.name))
     |  
     |  .. versionadded:: 0.8 support for functional and expression-based indexes.
     |  
     |  An :class:`.Index` can also be manually associated with a :class:`.Table`,
     |  either through inline declaration or using
     |  :meth:`.Table.append_constraint`.  When this approach is used, the names
     |  of the indexed columns can be specified as strings::
     |  
     |      Table("sometable", metadata,
     |                      Column("name", String(50)),
     |                      Column("address", String(100)),
     |                      Index("some_index", "name", "address")
     |              )
     |  
     |  To support functional or expression-based indexes in this form, the
     |  :func:`.text` construct may be used::
     |  
     |      from sqlalchemy import text
     |  
     |      Table("sometable", metadata,
     |                      Column("name", String(50)),
     |                      Column("address", String(100)),
     |                      Index("some_index", text("lower(name)"))
     |              )
     |  
     |  .. versionadded:: 0.9.5 the :func:`.text` construct may be used to
     |     specify :class:`.Index` expressions, provided the :class:`.Index`
     |     is explicitly associated with the :class:`.Table`.
     |  
     |  
     |  .. seealso::
     |  
     |      :ref:`schema_indexes` - General information on :class:`.Index`.
     |  
     |      :ref:`postgresql_indexes` - PostgreSQL-specific options available for
     |      the :class:`.Index` construct.
     |  
     |      :ref:`mysql_indexes` - MySQL-specific options available for the
     |      :class:`.Index` construct.
     |  
     |      :ref:`mssql_indexes` - MSSQL-specific options available for the
     |      :class:`.Index` construct.
     |  
     |  Method resolution order:
     |      Index
     |      sqlalchemy.sql.base.DialectKWArgs
     |      ColumnCollectionMixin
     |      SchemaItem
     |      sqlalchemy.sql.base.SchemaEventTarget
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, name, *expressions, **kw)
     |      Construct an index object.
     |      
     |      :param name:
     |        The name of the index
     |      
     |      :param \*expressions:
     |        Column expressions to include in the index.   The expressions
     |        are normally instances of :class:`.Column`, but may also
     |        be arbitrary SQL expressions which ultimately refer to a
     |        :class:`.Column`.
     |      
     |      :param unique=False:
     |          Keyword only argument; if True, create a unique index.
     |      
     |      :param quote=None:
     |          Keyword only argument; whether to apply quoting to the name of
     |          the index.  Works in the same manner as that of
     |          :paramref:`.Column.quote`.
     |      
     |      :param info=None: Optional data dictionary which will be populated
     |          into the :attr:`.SchemaItem.info` attribute of this object.
     |      
     |          .. versionadded:: 1.0.0
     |      
     |      :param \**kw: Additional keyword arguments not mentioned above are
     |          dialect specific, and passed in the form
     |          ``<dialectname>_<argname>``. See the documentation regarding an
     |          individual dialect at :ref:`dialect_toplevel` for detail on
     |          documented arguments.
     |  
     |  __repr__(self)
     |  
     |  create(self, bind=None)
     |      Issue a ``CREATE`` statement for this
     |      :class:`.Index`, using the given :class:`.Connectable`
     |      for connectivity.
     |      
     |      .. seealso::
     |      
     |          :meth:`.MetaData.create_all`.
     |  
     |  drop(self, bind=None)
     |      Issue a ``DROP`` statement for this
     |      :class:`.Index`, using the given :class:`.Connectable`
     |      for connectivity.
     |      
     |      .. seealso::
     |      
     |          :meth:`.MetaData.drop_all`.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  bind
     |      Return the connectable associated with this Index.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'index'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.DialectKWArgs:
     |  
     |  dialect_kwargs(...)
     |      A collection of keyword arguments specified as dialect-specific
     |      options to this construct.
     |      
     |      The arguments are present here in their original ``<dialect>_<kwarg>``
     |      format.  Only arguments that were actually passed are included;
     |      unlike the :attr:`.DialectKWArgs.dialect_options` collection, which
     |      contains all options known by this dialect including defaults.
     |      
     |      The collection is also writable; keys are accepted of the
     |      form ``<dialect>_<kwarg>`` where the value will be assembled
     |      into the list of options.
     |      
     |      .. versionadded:: 0.9.2
     |      
     |      .. versionchanged:: 0.9.4 The :attr:`.DialectKWArgs.dialect_kwargs`
     |         collection is now writable.
     |      
     |      .. seealso::
     |      
     |          :attr:`.DialectKWArgs.dialect_options` - nested dictionary form
     |  
     |  dialect_options(...)
     |      A collection of keyword arguments specified as dialect-specific
     |      options to this construct.
     |      
     |      This is a two-level nested registry, keyed to ``<dialect_name>``
     |      and ``<argument_name>``.  For example, the ``postgresql_where``
     |      argument would be locatable as::
     |      
     |          arg = my_object.dialect_options['postgresql']['where']
     |      
     |      .. versionadded:: 0.9.2
     |      
     |      .. seealso::
     |      
     |          :attr:`.DialectKWArgs.dialect_kwargs` - flat dictionary form
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from sqlalchemy.sql.base.DialectKWArgs:
     |  
     |  argument_for(cls, dialect_name, argument_name, default) from sqlalchemy.sql.visitors.VisitableType
     |      Add a new kind of dialect-specific keyword argument for this class.
     |      
     |      E.g.::
     |      
     |          Index.argument_for("mydialect", "length", None)
     |      
     |          some_index = Index('a', 'b', mydialect_length=5)
     |      
     |      The :meth:`.DialectKWArgs.argument_for` method is a per-argument
     |      way adding extra arguments to the
     |      :attr:`.DefaultDialect.construct_arguments` dictionary. This
     |      dictionary provides a list of argument names accepted by various
     |      schema-level constructs on behalf of a dialect.
     |      
     |      New dialects should typically specify this dictionary all at once as a
     |      data member of the dialect class.  The use case for ad-hoc addition of
     |      argument names is typically for end-user code that is also using
     |      a custom compilation scheme which consumes the additional arguments.
     |      
     |      :param dialect_name: name of a dialect.  The dialect must be
     |       locatable, else a :class:`.NoSuchModuleError` is raised.   The
     |       dialect must also include an existing
     |       :attr:`.DefaultDialect.construct_arguments` collection, indicating
     |       that it participates in the keyword-argument validation and default
     |       system, else :class:`.ArgumentError` is raised.  If the dialect does
     |       not include this collection, then any keyword argument can be
     |       specified on behalf of this dialect already.  All dialects packaged
     |       within SQLAlchemy include this collection, however for third party
     |       dialects, support may vary.
     |      
     |      :param argument_name: name of the parameter.
     |      
     |      :param default: default value of the parameter.
     |      
     |      .. versionadded:: 0.9.4
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.base.DialectKWArgs:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  kwargs
     |      A synonym for :attr:`.DialectKWArgs.dialect_kwargs`.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ColumnCollectionMixin:
     |  
     |  columns = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  get_children(self, **kwargs)
     |      used to allow SchemaVisitor access
     |  
     |  info(...)
     |      Info dictionary associated with the object, allowing user-defined
     |      data to be associated with this :class:`.SchemaItem`.
     |      
     |      The dictionary is automatically generated when first accessed.
     |      It can also be specified in the constructor of some objects,
     |      such as :class:`.Table` and :class:`.Column`.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SchemaItem:
     |  
     |  quote
     |      Return the value of the ``quote`` flag passed
     |      to this schema object, for those schema items which
     |      have a ``name`` field.
     |      
     |      .. deprecated:: 0.9 Use ``<obj>.name.quote``
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  dispatch = <sqlalchemy.event.base.DDLEventsDispatch object>
    
    class Integer(_LookupExpressionAdapter, sqlalchemy.sql.type_api.TypeEngine)
     |  A type for ``int`` integers.
     |  
     |  Method resolution order:
     |      Integer
     |      _LookupExpressionAdapter
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'integer'
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _LookupExpressionAdapter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _LookupExpressionAdapter:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class Interval(sqlalchemy.sql.type_api.Emulated, _AbstractInterval, sqlalchemy.sql.type_api.TypeDecorator)
     |  A type for ``datetime.timedelta()`` objects.
     |  
     |  The Interval type deals with ``datetime.timedelta`` objects.  In
     |  PostgreSQL, the native ``INTERVAL`` type is used; for others, the
     |  value is stored as a date which is relative to the "epoch"
     |  (Jan. 1, 1970).
     |  
     |  Note that the ``Interval`` type does not currently provide date arithmetic
     |  operations on platforms which do not support interval types natively. Such
     |  operations usually require transformation of both sides of the expression
     |  (such as, conversion of both sides into integer epoch values first) which
     |  currently is a manual procedure (such as via
     |  :attr:`~sqlalchemy.sql.expression.func`).
     |  
     |  Method resolution order:
     |      Interval
     |      sqlalchemy.sql.type_api.Emulated
     |      _AbstractInterval
     |      _LookupExpressionAdapter
     |      sqlalchemy.sql.type_api.TypeDecorator
     |      sqlalchemy.sql.base.SchemaEventTarget
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, native=True, second_precision=None, day_precision=None)
     |      Construct an Interval object.
     |      
     |      :param native: when True, use the actual
     |        INTERVAL type provided by the database, if
     |        supported (currently PostgreSQL, Oracle).
     |        Otherwise, represent the interval data as
     |        an epoch value regardless.
     |      
     |      :param second_precision: For native interval types
     |        which support a "fractional seconds precision" parameter,
     |        i.e. Oracle and PostgreSQL
     |      
     |      :param day_precision: for native interval types which
     |        support a "day precision" parameter, i.e. Oracle.
     |  
     |  adapt_to_emulated(self, impltype, **kw)
     |  
     |  bind_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  epoch = datetime.datetime(1970, 1, 1, 0, 0)
     |  
     |  impl = <class 'sqlalchemy.sql.sqltypes.DateTime'>
     |      A type for ``datetime.datetime()`` objects.
     |      
     |      Date and time types return objects from the Python ``datetime``
     |      module.  Most DBAPIs have built in support for the datetime
     |      module, with the noted exception of SQLite.  In the case of
     |      SQLite, date and time types are stored as strings which are then
     |      converted back to datetime objects when rows are returned.
     |      
     |      For the time representation within the datetime type, some
     |      backends include additional options, such as timezone support and
     |      fractional seconds support.  For fractional seconds, use the
     |      dialect-specific datatype, such as :class:`.mysql.TIME`.  For
     |      timezone support, use at least the :class:`~.types.TIMESTAMP` datatype,
     |      if not the dialect-specific datatype object.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.Emulated:
     |  
     |  adapt(self, impltype, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.type_api.Emulated:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _AbstractInterval:
     |  
     |  coerce_compared_value(self, op, value)
     |      See :meth:`.TypeEngine.coerce_compared_value` for a description.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _LookupExpressionAdapter:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeDecorator:
     |  
     |  __getattr__(self, key)
     |      Proxy all other undefined accessors to the underlying
     |      implementation.
     |  
     |  __repr__(self)
     |  
     |  compare_values(self, x, y)
     |      Given two values, compare them for equality.
     |      
     |      By default this calls upon :meth:`.TypeEngine.compare_values`
     |      of the underlying "impl", which in turn usually
     |      uses the Python equals operator ``==``.
     |      
     |      This function is used by the ORM to compare
     |      an original-loaded value with an intercepted
     |      "changed" value, to determine if a net change
     |      has occurred.
     |  
     |  copy(self, **kw)
     |      Produce a copy of this :class:`.TypeDecorator` instance.
     |      
     |      This is a shallow copy and is provided to fulfill part of
     |      the :class:`.TypeEngine` contract.  It usually does not
     |      need to be overridden unless the user-defined :class:`.TypeDecorator`
     |      has local state that should be deep-copied.
     |  
     |  get_dbapi_type(self, dbapi)
     |      Return the DBAPI type object represented by this
     |      :class:`.TypeDecorator`.
     |      
     |      By default this calls upon :meth:`.TypeEngine.get_dbapi_type` of the
     |      underlying "impl".
     |  
     |  literal_processor(self, dialect)
     |      Provide a literal processing function for the given
     |      :class:`.Dialect`.
     |      
     |      Subclasses here will typically override
     |      :meth:`.TypeDecorator.process_literal_param` instead of this method
     |      directly.
     |      
     |      By default, this method makes use of
     |      :meth:`.TypeDecorator.process_bind_param` if that method is
     |      implemented, where :meth:`.TypeDecorator.process_literal_param` is
     |      not.  The rationale here is that :class:`.TypeDecorator` typically
     |      deals with Python conversions of data that are above the layer of
     |      database presentation.  With the value converted by
     |      :meth:`.TypeDecorator.process_bind_param`, the underlying type will
     |      then handle whether it needs to be presented to the DBAPI as a bound
     |      parameter or to the database as an inline SQL value.
     |      
     |      .. versionadded:: 0.9.0
     |  
     |  load_dialect_impl(self, dialect)
     |      Return a :class:`.TypeEngine` object corresponding to a dialect.
     |      
     |      This is an end-user override hook that can be used to provide
     |      differing types depending on the given dialect.  It is used
     |      by the :class:`.TypeDecorator` implementation of :meth:`type_engine`
     |      to help determine what type should ultimately be returned
     |      for a given :class:`.TypeDecorator`.
     |      
     |      By default returns ``self.impl``.
     |  
     |  process_bind_param(self, value, dialect)
     |      Receive a bound parameter value to be converted.
     |      
     |      Subclasses override this method to return the
     |      value that should be passed along to the underlying
     |      :class:`.TypeEngine` object, and from there to the
     |      DBAPI ``execute()`` method.
     |      
     |      The operation could be anything desired to perform custom
     |      behavior, such as transforming or serializing data.
     |      This could also be used as a hook for validating logic.
     |      
     |      This operation should be designed with the reverse operation
     |      in mind, which would be the process_result_value method of
     |      this class.
     |      
     |      :param value: Data to operate upon, of any type expected by
     |       this method in the subclass.  Can be ``None``.
     |      :param dialect: the :class:`.Dialect` in use.
     |  
     |  process_literal_param(self, value, dialect)
     |      Receive a literal parameter value to be rendered inline within
     |      a statement.
     |      
     |      This method is used when the compiler renders a
     |      literal value without using binds, typically within DDL
     |      such as in the "server default" of a column or an expression
     |      within a CHECK constraint.
     |      
     |      The returned string will be rendered into the output string.
     |      
     |      .. versionadded:: 0.9.0
     |  
     |  process_result_value(self, value, dialect)
     |      Receive a result-row column value to be converted.
     |      
     |      Subclasses should implement this method to operate on data
     |      fetched from the database.
     |      
     |      Subclasses override this method to return the
     |      value that should be passed back to the application,
     |      given a value that is already processed by
     |      the underlying :class:`.TypeEngine` object, originally
     |      from the DBAPI cursor method ``fetchone()`` or similar.
     |      
     |      The operation could be anything desired to perform custom
     |      behavior, such as transforming or serializing data.
     |      This could also be used as a hook for validating logic.
     |      
     |      :param value: Data to operate upon, of any type expected by
     |       this method in the subclass.  Can be ``None``.
     |      :param dialect: the :class:`.Dialect` in use.
     |      
     |      This operation should be designed to be reversible by
     |      the "process_bind_param" method of this class.
     |  
     |  type_engine(self, dialect)
     |      Return a dialect-specific :class:`.TypeEngine` instance
     |      for this :class:`.TypeDecorator`.
     |      
     |      In most cases this returns a dialect-adapted form of
     |      the :class:`.TypeEngine` type represented by ``self.impl``.
     |      Makes usage of :meth:`dialect_impl` but also traverses
     |      into wrapped :class:`.TypeDecorator` instances.
     |      Behavior can be customized here by overriding
     |      :meth:`load_dialect_impl`.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeDecorator:
     |  
     |  __visit_name__ = 'type_decorator'
     |  
     |  coerce_to_is_types = (<type 'NoneType'>,)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  dispatch = <sqlalchemy.event.base.DDLEventsDispatch object>
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __str__(self)
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class JSON(Indexable, sqlalchemy.sql.type_api.TypeEngine)
     |  Represent a SQL JSON type.
     |  
     |  .. note::  :class:`.types.JSON` is provided as a facade for vendor-specific
     |     JSON types.  Since it supports JSON SQL operations, it only
     |     works on backends that have an actual JSON type, currently
     |     PostgreSQL as well as certain versions of MySQL.
     |  
     |  :class:`.types.JSON` is part of the Core in support of the growing
     |  popularity of native JSON datatypes.
     |  
     |  The :class:`.types.JSON` type stores arbitrary JSON format data, e.g.::
     |  
     |      data_table = Table('data_table', metadata,
     |          Column('id', Integer, primary_key=True),
     |          Column('data', JSON)
     |      )
     |  
     |      with engine.connect() as conn:
     |          conn.execute(
     |              data_table.insert(),
     |              data = {"key1": "value1", "key2": "value2"}
     |          )
     |  
     |  The base :class:`.types.JSON` provides these two operations:
     |  
     |  * Keyed index operations::
     |  
     |      data_table.c.data['some key']
     |  
     |  * Integer index operations::
     |  
     |      data_table.c.data[3]
     |  
     |  * Path index operations::
     |  
     |      data_table.c.data[('key_1', 'key_2', 5, ..., 'key_n')]
     |  
     |  Additional operations are available from the dialect-specific versions
     |  of :class:`.types.JSON`, such as :class:`.postgresql.JSON` and
     |  :class:`.postgresql.JSONB`, each of which offer more operators than
     |  just the basic type.
     |  
     |  Index operations return an expression object whose type defaults to
     |  :class:`.JSON` by default, so that further JSON-oriented instructions
     |  may be called upon the result type.   Note that there are backend-specific
     |  idiosyncracies here, including that the Postgresql database does not generally
     |  compare a "json" to a "json" structure without type casts.  These idiosyncracies
     |  can be accommodated in a backend-neutral way by by making explicit use
     |  of the :func:`.cast` and :func:`.type_coerce` constructs.
     |  Comparison of specific index elements of a :class:`.JSON` object
     |  to other objects work best if the **left hand side is CAST to a string**
     |  and the **right hand side is rendered as a json string**; a future SQLAlchemy
     |  feature such as a generic "astext" modifier may simplify this at some point:
     |  
     |  * **Compare an element of a JSON structure to a string**::
     |  
     |      from sqlalchemy import cast, type_coerce
     |      from sqlalchemy import String, JSON
     |  
     |      cast(
     |          data_table.c.data['some_key'], String
     |      ) == '"some_value"'
     |  
     |      cast(
     |          data_table.c.data['some_key'], String
     |      ) == type_coerce("some_value", JSON)
     |  
     |  * **Compare an element of a JSON structure to an integer**::
     |  
     |      from sqlalchemy import cast, type_coerce
     |      from sqlalchemy import String, JSON
     |  
     |      cast(data_table.c.data['some_key'], String) == '55'
     |  
     |      cast(
     |          data_table.c.data['some_key'], String
     |      ) == type_coerce(55, JSON)
     |  
     |  * **Compare an element of a JSON structure to some other JSON structure** - note
     |    that Python dictionaries are typically not ordered so care should be taken
     |    here to assert that the JSON structures are identical::
     |  
     |      from sqlalchemy import cast, type_coerce
     |      from sqlalchemy import String, JSON
     |      import json
     |  
     |      cast(
     |          data_table.c.data['some_key'], String
     |      ) == json.dumps({"foo": "bar"})
     |  
     |      cast(
     |          data_table.c.data['some_key'], String
     |      ) == type_coerce({"foo": "bar"}, JSON)
     |  
     |  The :class:`.JSON` type, when used with the SQLAlchemy ORM, does not
     |  detect in-place mutations to the structure.  In order to detect these, the
     |  :mod:`sqlalchemy.ext.mutable` extension must be used.  This extension will
     |  allow "in-place" changes to the datastructure to produce events which
     |  will be detected by the unit of work.  See the example at :class:`.HSTORE`
     |  for a simple example involving a dictionary.
     |  
     |  When working with NULL values, the :class:`.JSON` type recommends the
     |  use of two specific constants in order to differentiate between a column
     |  that evaluates to SQL NULL, e.g. no value, vs. the JSON-encoded string
     |  of ``"null"``.   To insert or select against a value that is SQL NULL,
     |  use the constant :func:`.null`::
     |  
     |      from sqlalchemy import null
     |      conn.execute(table.insert(), json_value=null())
     |  
     |  To insert or select against a value that is JSON ``"null"``, use the
     |  constant :attr:`.JSON.NULL`::
     |  
     |      conn.execute(table.insert(), json_value=JSON.NULL)
     |  
     |  The :class:`.JSON` type supports a flag
     |  :paramref:`.JSON.none_as_null` which when set to True will result
     |  in the Python constant ``None`` evaluating to the value of SQL
     |  NULL, and when set to False results in the Python constant
     |  ``None`` evaluating to the value of JSON ``"null"``.    The Python
     |  value ``None`` may be used in conjunction with either
     |  :attr:`.JSON.NULL` and :func:`.null` in order to indicate NULL
     |  values, but care must be taken as to the value of the
     |  :paramref:`.JSON.none_as_null` in these cases.
     |  
     |  .. seealso::
     |  
     |      :class:`.postgresql.JSON`
     |  
     |      :class:`.postgresql.JSONB`
     |  
     |      :class:`.mysql.JSON`
     |  
     |  .. versionadded:: 1.1
     |  
     |  Method resolution order:
     |      JSON
     |      Indexable
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, none_as_null=False)
     |      Construct a :class:`.types.JSON` type.
     |      
     |      :param none_as_null=False: if True, persist the value ``None`` as a
     |       SQL NULL value, not the JSON encoding of ``null``.   Note that
     |       when this flag is False, the :func:`.null` construct can still
     |       be used to persist a NULL value::
     |      
     |           from sqlalchemy import null
     |           conn.execute(table.insert(), data=null())
     |      
     |       .. note::
     |      
     |            :paramref:`.JSON.none_as_null` does **not** apply to the
     |            values passed to :paramref:`.Column.default` and
     |            :paramref:`.Column.server_default`; a value of ``None`` passed for
     |            these parameters means "no default present".
     |      
     |       .. seealso::
     |      
     |            :attr:`.types.JSON.NULL`
     |  
     |  bind_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  python_type
     |  
     |  should_evaluate_none
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |      Define comparison operations for :class:`.types.JSON`.
     |  
     |  JSONElementType = <class 'sqlalchemy.sql.sqltypes.JSONElementType'>
     |      common function for index / path elements in a JSON expression.
     |  
     |  JSONIndexType = <class 'sqlalchemy.sql.sqltypes.JSONIndexType'>
     |      Placeholder for the datatype of a JSON index value.
     |      
     |      This allows execution-time processing of JSON index values
     |      for special syntaxes.
     |  
     |  JSONPathType = <class 'sqlalchemy.sql.sqltypes.JSONPathType'>
     |      Placeholder type for JSON path operations.
     |      
     |      This allows execution-time processing of a path-based
     |      index value into a specific SQL syntax.
     |  
     |  NULL = symbol('JSON_NULL')
     |  
     |  __visit_name__ = 'JSON'
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |      Define comparison operations for :class:`.types.JSON`.
     |  
     |  hashable = False
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Indexable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  get_dbapi_type(self, dbapi)
     |      Return the corresponding type object from the underlying DB-API, if
     |      any.
     |      
     |       This can be useful for calling ``setinputsizes()``, for example.
     |  
     |  literal_processor(self, dialect)
     |      Return a conversion function for processing literal values that are
     |      to be rendered directly without using binds.
     |      
     |      This function is used when the compiler makes use of the
     |      "literal_binds" flag, typically used in DDL generation as well
     |      as in certain scenarios where backends don't accept bound parameters.
     |      
     |      .. versionadded:: 0.9.0
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
    
    class LargeBinary(_Binary)
     |  A type for large binary byte data.
     |  
     |  The :class:`.LargeBinary` type corresponds to a large and/or unlengthed
     |  binary type for the target platform, such as BLOB on MySQL and BYTEA for
     |  PostgreSQL.  It also handles the necessary conversions for the DBAPI.
     |  
     |  Method resolution order:
     |      LargeBinary
     |      _Binary
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, length=None)
     |      Construct a LargeBinary type.
     |      
     |      :param length: optional, a length for the column for use in
     |        DDL statements, for those binary types that accept a length,
     |        such as the MySQL BLOB type.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'large_binary'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _Binary:
     |  
     |  bind_processor(self, dialect)
     |      # Python 3 - sqlite3 doesn't need the `Binary` conversion
     |      # here, though pg8000 does to indicate "bytea"
     |  
     |  coerce_compared_value(self, op, value)
     |      See :meth:`.TypeEngine.coerce_compared_value` for a description.
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _Binary:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  Comparator = <class 'sqlalchemy.sql.type_api.Comparator'>
     |      Base class for custom comparison operations defined at the
     |      type level.  See :attr:`.TypeEngine.comparator_factory`.
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.type_api.Comparator'>
     |      Base class for custom comparison operations defined at the
     |      type level.  See :attr:`.TypeEngine.comparator_factory`.
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class MetaData(SchemaItem)
     |  A collection of :class:`.Table` objects and their associated schema
     |  constructs.
     |  
     |  Holds a collection of :class:`.Table` objects as well as
     |  an optional binding to an :class:`.Engine` or
     |  :class:`.Connection`.  If bound, the :class:`.Table` objects
     |  in the collection and their columns may participate in implicit SQL
     |  execution.
     |  
     |  The :class:`.Table` objects themselves are stored in the
     |  :attr:`.MetaData.tables` dictionary.
     |  
     |  :class:`.MetaData` is a thread-safe object for read operations.
     |  Construction of new tables within a single :class:`.MetaData` object,
     |  either explicitly or via reflection, may not be completely thread-safe.
     |  
     |  .. seealso::
     |  
     |      :ref:`metadata_describing` - Introduction to database metadata
     |  
     |  Method resolution order:
     |      MetaData
     |      SchemaItem
     |      sqlalchemy.sql.base.SchemaEventTarget
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __contains__(self, table_or_key)
     |  
     |  __getstate__(self)
     |  
     |  __init__(self, bind=None, reflect=False, schema=None, quote_schema=None, naming_convention=immutabledict({'ix': 'ix_%(column_0_label)s'}), info=None)
     |      Create a new MetaData object.
     |      
     |      :param bind:
     |        An Engine or Connection to bind to.  May also be a string or URL
     |        instance, these are passed to create_engine() and this MetaData will
     |        be bound to the resulting engine.
     |      
     |      :param reflect:
     |        Optional, automatically load all tables from the bound database.
     |        Defaults to False. ``bind`` is required when this option is set.
     |      
     |        .. deprecated:: 0.8
     |              Please use the :meth:`.MetaData.reflect` method.
     |      
     |      :param schema:
     |         The default schema to use for the :class:`.Table`,
     |         :class:`.Sequence`, and potentially other objects associated with
     |         this :class:`.MetaData`. Defaults to ``None``.
     |      
     |         When this value is set, any :class:`.Table` or :class:`.Sequence`
     |         which specifies ``None`` for the schema parameter will instead
     |         have this schema name defined.  To build a :class:`.Table`
     |         or :class:`.Sequence` that still has ``None`` for the schema
     |         even when this parameter is present, use the :attr:`.BLANK_SCHEMA`
     |         symbol.
     |      
     |         .. note::
     |      
     |              As refered above, the :paramref:`.MetaData.schema` parameter
     |              only refers to the **default value** that will be applied to
     |              the :paramref:`.Table.schema` parameter of an incoming
     |              :class:`.Table` object.   It does not refer to how the
     |              :class:`.Table` is catalogued within the :class:`.MetaData`,
     |              which remains consistent vs. a :class:`.MetaData` collection
     |              that does not define this parameter.  The :class:`.Table`
     |              within the :class:`.MetaData` will still be keyed based on its
     |              schema-qualified name, e.g.
     |              ``my_metadata.tables["some_schema.my_table"]``.
     |      
     |              The current behavior of the :class:`.ForeignKey` object is to
     |              circumvent this restriction, where it can locate a table given
     |              the table name alone, where the schema will be assumed to be
     |              present from this value as specified on the owning
     |              :class:`.MetaData` collection.  However, this implies  that a
     |              table qualified with BLANK_SCHEMA cannot currently be referred
     |              to by string name from :class:`.ForeignKey`.    Other parts of
     |              SQLAlchemy such as Declarative may not have similar behaviors
     |              built in, however may do so in a future release, along with a
     |              consistent method of referring to a table in BLANK_SCHEMA.
     |      
     |      
     |         .. seealso::
     |      
     |              :paramref:`.Table.schema`
     |      
     |              :paramref:`.Sequence.schema`
     |      
     |      :param quote_schema:
     |          Sets the ``quote_schema`` flag for those :class:`.Table`,
     |          :class:`.Sequence`, and other objects which make usage of the
     |          local ``schema`` name.
     |      
     |      :param info: Optional data dictionary which will be populated into the
     |          :attr:`.SchemaItem.info` attribute of this object.
     |      
     |          .. versionadded:: 1.0.0
     |      
     |      :param naming_convention: a dictionary referring to values which
     |        will establish default naming conventions for :class:`.Constraint`
     |        and :class:`.Index` objects, for those objects which are not given
     |        a name explicitly.
     |      
     |        The keys of this dictionary may be:
     |      
     |        * a constraint or Index class, e.g. the :class:`.UniqueConstraint`,
     |          :class:`.ForeignKeyConstraint` class, the :class:`.Index` class
     |      
     |        * a string mnemonic for one of the known constraint classes;
     |          ``"fk"``, ``"pk"``, ``"ix"``, ``"ck"``, ``"uq"`` for foreign key,
     |          primary key, index, check, and unique constraint, respectively.
     |      
     |        * the string name of a user-defined "token" that can be used
     |          to define new naming tokens.
     |      
     |        The values associated with each "constraint class" or "constraint
     |        mnemonic" key are string naming templates, such as
     |        ``"uq_%(table_name)s_%(column_0_name)s"``,
     |        which describe how the name should be composed.  The values
     |        associated with user-defined "token" keys should be callables of the
     |        form ``fn(constraint, table)``, which accepts the constraint/index
     |        object and :class:`.Table` as arguments, returning a string
     |        result.
     |      
     |        The built-in names are as follows, some of which may only be
     |        available for certain types of constraint:
     |      
     |          * ``%(table_name)s`` - the name of the :class:`.Table` object
     |            associated with the constraint.
     |      
     |          * ``%(referred_table_name)s`` - the name of the :class:`.Table`
     |            object associated with the referencing target of a
     |            :class:`.ForeignKeyConstraint`.
     |      
     |          * ``%(column_0_name)s`` - the name of the :class:`.Column` at
     |            index position "0" within the constraint.
     |      
     |          * ``%(column_0_label)s`` - the label of the :class:`.Column` at
     |            index position "0", e.g. :attr:`.Column.label`
     |      
     |          * ``%(column_0_key)s`` - the key of the :class:`.Column` at
     |            index position "0", e.g. :attr:`.Column.key`
     |      
     |          * ``%(referred_column_0_name)s`` - the name of a :class:`.Column`
     |            at index position "0" referenced by a
     |            :class:`.ForeignKeyConstraint`.
     |      
     |          * ``%(constraint_name)s`` - a special key that refers to the
     |            existing name given to the constraint.  When this key is
     |            present, the :class:`.Constraint` object's existing name will be
     |            replaced with one that is composed from template string that
     |            uses this token. When this token is present, it is required that
     |            the :class:`.Constraint` is given an explicit name ahead of time.
     |      
     |          * user-defined: any additional token may be implemented by passing
     |            it along with a ``fn(constraint, table)`` callable to the
     |            naming_convention dictionary.
     |      
     |        .. versionadded:: 0.9.2
     |      
     |        .. seealso::
     |      
     |              :ref:`constraint_naming_conventions` - for detailed usage
     |              examples.
     |  
     |  __repr__(self)
     |  
     |  __setstate__(self, state)
     |  
     |  append_ddl_listener(self, event_name, listener)
     |      Append a DDL event listener to this ``MetaData``.
     |      
     |      .. deprecated:: 0.7
     |          See :class:`.DDLEvents`.
     |  
     |  clear(self)
     |      Clear all Table objects from this MetaData.
     |  
     |  create_all(self, bind=None, tables=None, checkfirst=True)
     |      Create all tables stored in this metadata.
     |      
     |      Conditional by default, will not attempt to recreate tables already
     |      present in the target database.
     |      
     |      :param bind:
     |        A :class:`.Connectable` used to access the
     |        database; if None, uses the existing bind on this ``MetaData``, if
     |        any.
     |      
     |      :param tables:
     |        Optional list of ``Table`` objects, which is a subset of the total
     |        tables in the ``MetaData`` (others are ignored).
     |      
     |      :param checkfirst:
     |        Defaults to True, don't issue CREATEs for tables already present
     |        in the target database.
     |  
     |  drop_all(self, bind=None, tables=None, checkfirst=True)
     |      Drop all tables stored in this metadata.
     |      
     |      Conditional by default, will not attempt to drop tables not present in
     |      the target database.
     |      
     |      :param bind:
     |        A :class:`.Connectable` used to access the
     |        database; if None, uses the existing bind on this ``MetaData``, if
     |        any.
     |      
     |      :param tables:
     |        Optional list of ``Table`` objects, which is a subset of the
     |        total tables in the ``MetaData`` (others are ignored).
     |      
     |      :param checkfirst:
     |        Defaults to True, only issue DROPs for tables confirmed to be
     |        present in the target database.
     |  
     |  is_bound(self)
     |      True if this MetaData is bound to an Engine or Connection.
     |  
     |  reflect(self, bind=None, schema=None, views=False, only=None, extend_existing=False, autoload_replace=True, **dialect_kwargs)
     |      Load all available table definitions from the database.
     |      
     |      Automatically creates ``Table`` entries in this ``MetaData`` for any
     |      table available in the database but not yet present in the
     |      ``MetaData``.  May be called multiple times to pick up tables recently
     |      added to the database, however no special action is taken if a table
     |      in this ``MetaData`` no longer exists in the database.
     |      
     |      :param bind:
     |        A :class:`.Connectable` used to access the database; if None, uses
     |        the existing bind on this ``MetaData``, if any.
     |      
     |      :param schema:
     |        Optional, query and reflect tables from an alterate schema.
     |        If None, the schema associated with this :class:`.MetaData`
     |        is used, if any.
     |      
     |      :param views:
     |        If True, also reflect views.
     |      
     |      :param only:
     |        Optional.  Load only a sub-set of available named tables.  May be
     |        specified as a sequence of names or a callable.
     |      
     |        If a sequence of names is provided, only those tables will be
     |        reflected.  An error is raised if a table is requested but not
     |        available.  Named tables already present in this ``MetaData`` are
     |        ignored.
     |      
     |        If a callable is provided, it will be used as a boolean predicate to
     |        filter the list of potential table names.  The callable is called
     |        with a table name and this ``MetaData`` instance as positional
     |        arguments and should return a true value for any table to reflect.
     |      
     |      :param extend_existing: Passed along to each :class:`.Table` as
     |        :paramref:`.Table.extend_existing`.
     |      
     |        .. versionadded:: 0.9.1
     |      
     |      :param autoload_replace: Passed along to each :class:`.Table` as
     |        :paramref:`.Table.autoload_replace`.
     |      
     |        .. versionadded:: 0.9.1
     |      
     |      :param \**dialect_kwargs: Additional keyword arguments not mentioned
     |       above are dialect specific, and passed in the form
     |       ``<dialectname>_<argname>``.  See the documentation regarding an
     |       individual dialect at :ref:`dialect_toplevel` for detail on
     |       documented arguments.
     |      
     |        .. versionadded:: 0.9.2 - Added
     |           :paramref:`.MetaData.reflect.**dialect_kwargs` to support
     |           dialect-level reflection options for all :class:`.Table`
     |           objects reflected.
     |  
     |  remove(self, table)
     |      Remove the given Table object from this MetaData.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  bind
     |      An :class:`.Engine` or :class:`.Connection` to which this
     |      :class:`.MetaData` is bound.
     |      
     |      Typically, a :class:`.Engine` is assigned to this attribute
     |      so that "implicit execution" may be used, or alternatively
     |      as a means of providing engine binding information to an
     |      ORM :class:`.Session` object::
     |      
     |          engine = create_engine("someurl://")
     |          metadata.bind = engine
     |      
     |      .. seealso::
     |      
     |         :ref:`dbengine_implicit` - background on "bound metadata"
     |  
     |  sorted_tables
     |      Returns a list of :class:`.Table` objects sorted in order of
     |      foreign key dependency.
     |      
     |      The sorting will place :class:`.Table` objects that have dependencies
     |      first, before the dependencies themselves, representing the
     |      order in which they can be created.   To get the order in which
     |      the tables would be dropped, use the ``reversed()`` Python built-in.
     |      
     |      .. warning::
     |      
     |          The :attr:`.sorted_tables` accessor cannot by itself accommodate
     |          automatic resolution of dependency cycles between tables, which
     |          are usually caused by mutually dependent foreign key constraints.
     |          To resolve these cycles, either the
     |          :paramref:`.ForeignKeyConstraint.use_alter` parameter may be appled
     |          to those constraints, or use the
     |          :func:`.schema.sort_tables_and_constraints` function which will break
     |          out foreign key constraints involved in cycles separately.
     |      
     |      .. seealso::
     |      
     |          :func:`.schema.sort_tables`
     |      
     |          :func:`.schema.sort_tables_and_constraints`
     |      
     |          :attr:`.MetaData.tables`
     |      
     |          :meth:`.Inspector.get_table_names`
     |      
     |          :meth:`.Inspector.get_sorted_table_and_fkc_names`
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'metadata'
     |  
     |  tables = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  get_children(self, **kwargs)
     |      used to allow SchemaVisitor access
     |  
     |  info(...)
     |      Info dictionary associated with the object, allowing user-defined
     |      data to be associated with this :class:`.SchemaItem`.
     |      
     |      The dictionary is automatically generated when first accessed.
     |      It can also be specified in the constructor of some objects,
     |      such as :class:`.Table` and :class:`.Column`.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SchemaItem:
     |  
     |  quote
     |      Return the value of the ``quote`` flag passed
     |      to this schema object, for those schema items which
     |      have a ``name`` field.
     |      
     |      .. deprecated:: 0.9 Use ``<obj>.name.quote``
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  dispatch = <sqlalchemy.event.base.DDLEventsDispatch object>
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class NCHAR(Unicode)
     |  The SQL NCHAR type.
     |  
     |  Method resolution order:
     |      NCHAR
     |      Unicode
     |      String
     |      Concatenable
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'NCHAR'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Unicode:
     |  
     |  __init__(self, length=None, **kwargs)
     |      Create a :class:`.Unicode` object.
     |      
     |      Parameters are the same as that of :class:`.String`,
     |      with the exception that ``convert_unicode``
     |      defaults to ``True``.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String:
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from String:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Concatenable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Concatenable:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class NUMERIC(Numeric)
     |  The SQL NUMERIC type.
     |  
     |  Method resolution order:
     |      NUMERIC
     |      Numeric
     |      _LookupExpressionAdapter
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'NUMERIC'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Numeric:
     |  
     |  __init__(self, precision=None, scale=None, decimal_return_scale=None, asdecimal=True)
     |      Construct a Numeric.
     |      
     |      :param precision: the numeric precision for use in DDL ``CREATE
     |        TABLE``.
     |      
     |      :param scale: the numeric scale for use in DDL ``CREATE TABLE``.
     |      
     |      :param asdecimal: default True.  Return whether or not
     |        values should be sent as Python Decimal objects, or
     |        as floats.   Different DBAPIs send one or the other based on
     |        datatypes - the Numeric type will ensure that return values
     |        are one or the other across DBAPIs consistently.
     |      
     |      :param decimal_return_scale: Default scale to use when converting
     |       from floats to Python decimals.  Floating point values will typically
     |       be much longer due to decimal inaccuracy, and most floating point
     |       database types don't have a notion of "scale", so by default the
     |       float type looks for the first ten decimal places when converting.
     |       Specfiying this value will override that length.  Types which
     |       do include an explicit ".scale" value, such as the base
     |       :class:`.Numeric` as well as the MySQL float types, will use the
     |       value of ".scale" as the default for decimal_return_scale, if not
     |       otherwise specified.
     |      
     |       .. versionadded:: 0.9.0
     |      
     |      When using the ``Numeric`` type, care should be taken to ensure
     |      that the asdecimal setting is apppropriate for the DBAPI in use -
     |      when Numeric applies a conversion from Decimal->float or float->
     |      Decimal, this conversion incurs an additional performance overhead
     |      for all result columns received.
     |      
     |      DBAPIs that return Decimal natively (e.g. psycopg2) will have
     |      better accuracy and higher performance with a setting of ``True``,
     |      as the native translation to Decimal reduces the amount of floating-
     |      point issues at play, and the Numeric type itself doesn't need
     |      to apply any further conversions.  However, another DBAPI which
     |      returns floats natively *will* incur an additional conversion
     |      overhead, and is still subject to floating point data loss - in
     |      which case ``asdecimal=False`` will at least remove the extra
     |      conversion overhead.
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Numeric:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _LookupExpressionAdapter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _LookupExpressionAdapter:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class NVARCHAR(Unicode)
     |  The SQL NVARCHAR type.
     |  
     |  Method resolution order:
     |      NVARCHAR
     |      Unicode
     |      String
     |      Concatenable
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'NVARCHAR'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Unicode:
     |  
     |  __init__(self, length=None, **kwargs)
     |      Create a :class:`.Unicode` object.
     |      
     |      Parameters are the same as that of :class:`.String`,
     |      with the exception that ``convert_unicode``
     |      defaults to ``True``.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String:
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from String:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Concatenable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Concatenable:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class Numeric(_LookupExpressionAdapter, sqlalchemy.sql.type_api.TypeEngine)
     |  A type for fixed precision numbers, such as ``NUMERIC`` or ``DECIMAL``.
     |  
     |  This type returns Python ``decimal.Decimal`` objects by default, unless
     |  the :paramref:`.Numeric.asdecimal` flag is set to False, in which case
     |  they are coerced to Python ``float`` objects.
     |  
     |  .. note::
     |  
     |      The :class:`.Numeric` type is designed to receive data from a database
     |      type that is explicitly known to be a decimal type
     |      (e.g. ``DECIMAL``, ``NUMERIC``, others) and not a floating point
     |      type (e.g. ``FLOAT``, ``REAL``, others).
     |      If the database column on the server is in fact a floating-point type
     |      type, such as ``FLOAT`` or ``REAL``, use the :class:`.Float`
     |      type or a subclass, otherwise numeric coercion between
     |      ``float``/``Decimal`` may or may not function as expected.
     |  
     |  .. note::
     |  
     |     The Python ``decimal.Decimal`` class is generally slow
     |     performing; cPython 3.3 has now switched to use the `cdecimal
     |     <http://pypi.python.org/pypi/cdecimal/>`_ library natively. For
     |     older Python versions, the ``cdecimal`` library can be patched
     |     into any application where it will replace the ``decimal``
     |     library fully, however this needs to be applied globally and
     |     before any other modules have been imported, as follows::
     |  
     |         import sys
     |         import cdecimal
     |         sys.modules["decimal"] = cdecimal
     |  
     |     Note that the ``cdecimal`` and ``decimal`` libraries are **not
     |     compatible with each other**, so patching ``cdecimal`` at the
     |     global level is the only way it can be used effectively with
     |     various DBAPIs that hardcode to import the ``decimal`` library.
     |  
     |  Method resolution order:
     |      Numeric
     |      _LookupExpressionAdapter
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, precision=None, scale=None, decimal_return_scale=None, asdecimal=True)
     |      Construct a Numeric.
     |      
     |      :param precision: the numeric precision for use in DDL ``CREATE
     |        TABLE``.
     |      
     |      :param scale: the numeric scale for use in DDL ``CREATE TABLE``.
     |      
     |      :param asdecimal: default True.  Return whether or not
     |        values should be sent as Python Decimal objects, or
     |        as floats.   Different DBAPIs send one or the other based on
     |        datatypes - the Numeric type will ensure that return values
     |        are one or the other across DBAPIs consistently.
     |      
     |      :param decimal_return_scale: Default scale to use when converting
     |       from floats to Python decimals.  Floating point values will typically
     |       be much longer due to decimal inaccuracy, and most floating point
     |       database types don't have a notion of "scale", so by default the
     |       float type looks for the first ten decimal places when converting.
     |       Specfiying this value will override that length.  Types which
     |       do include an explicit ".scale" value, such as the base
     |       :class:`.Numeric` as well as the MySQL float types, will use the
     |       value of ".scale" as the default for decimal_return_scale, if not
     |       otherwise specified.
     |      
     |       .. versionadded:: 0.9.0
     |      
     |      When using the ``Numeric`` type, care should be taken to ensure
     |      that the asdecimal setting is apppropriate for the DBAPI in use -
     |      when Numeric applies a conversion from Decimal->float or float->
     |      Decimal, this conversion incurs an additional performance overhead
     |      for all result columns received.
     |      
     |      DBAPIs that return Decimal natively (e.g. psycopg2) will have
     |      better accuracy and higher performance with a setting of ``True``,
     |      as the native translation to Decimal reduces the amount of floating-
     |      point issues at play, and the Numeric type itself doesn't need
     |      to apply any further conversions.  However, another DBAPI which
     |      returns floats natively *will* incur an additional conversion
     |      overhead, and is still subject to floating point data loss - in
     |      which case ``asdecimal=False`` will at least remove the extra
     |      conversion overhead.
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'numeric'
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _LookupExpressionAdapter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _LookupExpressionAdapter:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class PassiveDefault(DefaultClause)
     |  A DDL-specified DEFAULT column value.
     |  
     |  .. deprecated:: 0.6
     |      :class:`.PassiveDefault` is deprecated.
     |      Use :class:`.DefaultClause`.
     |  
     |  Method resolution order:
     |      PassiveDefault
     |      DefaultClause
     |      FetchedValue
     |      _NotAColumnExpr
     |      sqlalchemy.sql.base.SchemaEventTarget
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, *arg, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from DefaultClause:
     |  
     |  __repr__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from DefaultClause:
     |  
     |  has_argument = True
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from FetchedValue:
     |  
     |  is_server_default = True
     |  
     |  reflected = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _NotAColumnExpr:
     |  
     |  __clause_element__ lambda self
     |  
     |  self_group lambda self
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _NotAColumnExpr:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  dispatch = <sqlalchemy.event.base.DDLEventsDispatch object>
    
    class PickleType(sqlalchemy.sql.type_api.TypeDecorator)
     |  Holds Python objects, which are serialized using pickle.
     |  
     |  PickleType builds upon the Binary type to apply Python's
     |  ``pickle.dumps()`` to incoming objects, and ``pickle.loads()`` on
     |  the way out, allowing any pickleable Python object to be stored as
     |  a serialized binary field.
     |  
     |  To allow ORM change events to propagate for elements associated
     |  with :class:`.PickleType`, see :ref:`mutable_toplevel`.
     |  
     |  Method resolution order:
     |      PickleType
     |      sqlalchemy.sql.type_api.TypeDecorator
     |      sqlalchemy.sql.base.SchemaEventTarget
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, protocol=2, pickler=None, comparator=None)
     |      Construct a PickleType.
     |      
     |      :param protocol: defaults to ``pickle.HIGHEST_PROTOCOL``.
     |      
     |      :param pickler: defaults to cPickle.pickle or pickle.pickle if
     |        cPickle is not available.  May be any object with
     |        pickle-compatible ``dumps` and ``loads`` methods.
     |      
     |      :param comparator: a 2-arg callable predicate used
     |        to compare values of this type.  If left as ``None``,
     |        the Python "equals" operator is used to compare values.
     |  
     |  __reduce__(self)
     |  
     |  bind_processor(self, dialect)
     |  
     |  compare_values(self, x, y)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  impl = <class 'sqlalchemy.sql.sqltypes.LargeBinary'>
     |      A type for large binary byte data.
     |      
     |      The :class:`.LargeBinary` type corresponds to a large and/or unlengthed
     |      binary type for the target platform, such as BLOB on MySQL and BYTEA for
     |      PostgreSQL.  It also handles the necessary conversions for the DBAPI.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeDecorator:
     |  
     |  __getattr__(self, key)
     |      Proxy all other undefined accessors to the underlying
     |      implementation.
     |  
     |  __repr__(self)
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      By default, returns self.   This method is called by
     |      the expression system when an object using this type is
     |      on the left or right side of an expression against a plain Python
     |      object which does not yet have a SQLAlchemy type assigned::
     |      
     |          expr = table.c.somecolumn + 35
     |      
     |      Where above, if ``somecolumn`` uses this type, this method will
     |      be called with the value ``operator.add``
     |      and ``35``.  The return value is whatever SQLAlchemy type should
     |      be used for ``35`` for this particular operation.
     |  
     |  copy(self, **kw)
     |      Produce a copy of this :class:`.TypeDecorator` instance.
     |      
     |      This is a shallow copy and is provided to fulfill part of
     |      the :class:`.TypeEngine` contract.  It usually does not
     |      need to be overridden unless the user-defined :class:`.TypeDecorator`
     |      has local state that should be deep-copied.
     |  
     |  get_dbapi_type(self, dbapi)
     |      Return the DBAPI type object represented by this
     |      :class:`.TypeDecorator`.
     |      
     |      By default this calls upon :meth:`.TypeEngine.get_dbapi_type` of the
     |      underlying "impl".
     |  
     |  literal_processor(self, dialect)
     |      Provide a literal processing function for the given
     |      :class:`.Dialect`.
     |      
     |      Subclasses here will typically override
     |      :meth:`.TypeDecorator.process_literal_param` instead of this method
     |      directly.
     |      
     |      By default, this method makes use of
     |      :meth:`.TypeDecorator.process_bind_param` if that method is
     |      implemented, where :meth:`.TypeDecorator.process_literal_param` is
     |      not.  The rationale here is that :class:`.TypeDecorator` typically
     |      deals with Python conversions of data that are above the layer of
     |      database presentation.  With the value converted by
     |      :meth:`.TypeDecorator.process_bind_param`, the underlying type will
     |      then handle whether it needs to be presented to the DBAPI as a bound
     |      parameter or to the database as an inline SQL value.
     |      
     |      .. versionadded:: 0.9.0
     |  
     |  load_dialect_impl(self, dialect)
     |      Return a :class:`.TypeEngine` object corresponding to a dialect.
     |      
     |      This is an end-user override hook that can be used to provide
     |      differing types depending on the given dialect.  It is used
     |      by the :class:`.TypeDecorator` implementation of :meth:`type_engine`
     |      to help determine what type should ultimately be returned
     |      for a given :class:`.TypeDecorator`.
     |      
     |      By default returns ``self.impl``.
     |  
     |  process_bind_param(self, value, dialect)
     |      Receive a bound parameter value to be converted.
     |      
     |      Subclasses override this method to return the
     |      value that should be passed along to the underlying
     |      :class:`.TypeEngine` object, and from there to the
     |      DBAPI ``execute()`` method.
     |      
     |      The operation could be anything desired to perform custom
     |      behavior, such as transforming or serializing data.
     |      This could also be used as a hook for validating logic.
     |      
     |      This operation should be designed with the reverse operation
     |      in mind, which would be the process_result_value method of
     |      this class.
     |      
     |      :param value: Data to operate upon, of any type expected by
     |       this method in the subclass.  Can be ``None``.
     |      :param dialect: the :class:`.Dialect` in use.
     |  
     |  process_literal_param(self, value, dialect)
     |      Receive a literal parameter value to be rendered inline within
     |      a statement.
     |      
     |      This method is used when the compiler renders a
     |      literal value without using binds, typically within DDL
     |      such as in the "server default" of a column or an expression
     |      within a CHECK constraint.
     |      
     |      The returned string will be rendered into the output string.
     |      
     |      .. versionadded:: 0.9.0
     |  
     |  process_result_value(self, value, dialect)
     |      Receive a result-row column value to be converted.
     |      
     |      Subclasses should implement this method to operate on data
     |      fetched from the database.
     |      
     |      Subclasses override this method to return the
     |      value that should be passed back to the application,
     |      given a value that is already processed by
     |      the underlying :class:`.TypeEngine` object, originally
     |      from the DBAPI cursor method ``fetchone()`` or similar.
     |      
     |      The operation could be anything desired to perform custom
     |      behavior, such as transforming or serializing data.
     |      This could also be used as a hook for validating logic.
     |      
     |      :param value: Data to operate upon, of any type expected by
     |       this method in the subclass.  Can be ``None``.
     |      :param dialect: the :class:`.Dialect` in use.
     |      
     |      This operation should be designed to be reversible by
     |      the "process_bind_param" method of this class.
     |  
     |  type_engine(self, dialect)
     |      Return a dialect-specific :class:`.TypeEngine` instance
     |      for this :class:`.TypeDecorator`.
     |      
     |      In most cases this returns a dialect-adapted form of
     |      the :class:`.TypeEngine` type represented by ``self.impl``.
     |      Makes usage of :meth:`dialect_impl` but also traverses
     |      into wrapped :class:`.TypeDecorator` instances.
     |      Behavior can be customized here by overriding
     |      :meth:`load_dialect_impl`.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.type_api.TypeDecorator:
     |  
     |  comparator_factory
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeDecorator:
     |  
     |  Comparator = <class 'sqlalchemy.sql.type_api.Comparator'>
     |  
     |  
     |  __visit_name__ = 'type_decorator'
     |  
     |  coerce_to_is_types = (<type 'NoneType'>,)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  dispatch = <sqlalchemy.event.base.DDLEventsDispatch object>
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  python_type
     |      Return the Python type object expected to be returned
     |      by instances of this type, if known.
     |      
     |      Basically, for those types which enforce a return type,
     |      or are known across the board to do such for all common
     |      DBAPIs (like ``int`` for example), will return that type.
     |      
     |      If a return type is not defined, raises
     |      ``NotImplementedError``.
     |      
     |      Note that any type also accommodates NULL in SQL which
     |      means you can also get back ``None`` from any type
     |      in practice.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class PrimaryKeyConstraint(ColumnCollectionConstraint)
     |  A table-level PRIMARY KEY constraint.
     |  
     |  The :class:`.PrimaryKeyConstraint` object is present automatically
     |  on any :class:`.Table` object; it is assigned a set of
     |  :class:`.Column` objects corresponding to those marked with
     |  the :paramref:`.Column.primary_key` flag::
     |  
     |      >>> my_table = Table('mytable', metadata,
     |      ...                 Column('id', Integer, primary_key=True),
     |      ...                 Column('version_id', Integer, primary_key=True),
     |      ...                 Column('data', String(50))
     |      ...     )
     |      >>> my_table.primary_key
     |      PrimaryKeyConstraint(
     |          Column('id', Integer(), table=<mytable>,
     |                 primary_key=True, nullable=False),
     |          Column('version_id', Integer(), table=<mytable>,
     |                 primary_key=True, nullable=False)
     |      )
     |  
     |  The primary key of a :class:`.Table` can also be specified by using
     |  a :class:`.PrimaryKeyConstraint` object explicitly; in this mode of usage,
     |  the "name" of the constraint can also be specified, as well as other
     |  options which may be recognized by dialects::
     |  
     |      my_table = Table('mytable', metadata,
     |                  Column('id', Integer),
     |                  Column('version_id', Integer),
     |                  Column('data', String(50)),
     |                  PrimaryKeyConstraint('id', 'version_id',
     |                                       name='mytable_pk')
     |              )
     |  
     |  The two styles of column-specification should generally not be mixed.
     |  An warning is emitted if the columns present in the
     |  :class:`.PrimaryKeyConstraint`
     |  don't match the columns that were marked as ``primary_key=True``, if both
     |  are present; in this case, the columns are taken strictly from the
     |  :class:`.PrimaryKeyConstraint` declaration, and those columns otherwise
     |  marked as ``primary_key=True`` are ignored.  This behavior is intended to
     |  be backwards compatible with previous behavior.
     |  
     |  .. versionchanged:: 0.9.2  Using a mixture of columns within a
     |     :class:`.PrimaryKeyConstraint` in addition to columns marked as
     |     ``primary_key=True`` now emits a warning if the lists don't match.
     |     The ultimate behavior of ignoring those columns marked with the flag
     |     only is currently maintained for backwards compatibility; this warning
     |     may raise an exception in a future release.
     |  
     |  For the use case where specific options are to be specified on the
     |  :class:`.PrimaryKeyConstraint`, but the usual style of using
     |  ``primary_key=True`` flags is still desirable, an empty
     |  :class:`.PrimaryKeyConstraint` may be specified, which will take on the
     |  primary key column collection from the :class:`.Table` based on the
     |  flags::
     |  
     |      my_table = Table('mytable', metadata,
     |                  Column('id', Integer, primary_key=True),
     |                  Column('version_id', Integer, primary_key=True),
     |                  Column('data', String(50)),
     |                  PrimaryKeyConstraint(name='mytable_pk',
     |                                       mssql_clustered=True)
     |              )
     |  
     |  .. versionadded:: 0.9.2 an empty :class:`.PrimaryKeyConstraint` may now
     |     be specified for the purposes of establishing keyword arguments with
     |     the constraint, independently of the specification of "primary key"
     |     columns within the :class:`.Table` itself; columns marked as
     |     ``primary_key=True`` will be gathered into the empty constraint's
     |     column collection.
     |  
     |  Method resolution order:
     |      PrimaryKeyConstraint
     |      ColumnCollectionConstraint
     |      ColumnCollectionMixin
     |      Constraint
     |      sqlalchemy.sql.base.DialectKWArgs
     |      SchemaItem
     |      sqlalchemy.sql.base.SchemaEventTarget
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, *columns, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  columns_autoinc_first
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'primary_key_constraint'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ColumnCollectionConstraint:
     |  
     |  __contains__(self, x)
     |  
     |  __iter__(self)
     |  
     |  __len__(self)
     |  
     |  contains_column(self, col)
     |      Return True if this constraint contains the given column.
     |      
     |      Note that this object also contains an attribute ``.columns``
     |      which is a :class:`.ColumnCollection` of :class:`.Column` objects.
     |  
     |  copy(self, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ColumnCollectionConstraint:
     |  
     |  columns = None
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ColumnCollectionMixin:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Constraint:
     |  
     |  table
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.DialectKWArgs:
     |  
     |  dialect_kwargs(...)
     |      A collection of keyword arguments specified as dialect-specific
     |      options to this construct.
     |      
     |      The arguments are present here in their original ``<dialect>_<kwarg>``
     |      format.  Only arguments that were actually passed are included;
     |      unlike the :attr:`.DialectKWArgs.dialect_options` collection, which
     |      contains all options known by this dialect including defaults.
     |      
     |      The collection is also writable; keys are accepted of the
     |      form ``<dialect>_<kwarg>`` where the value will be assembled
     |      into the list of options.
     |      
     |      .. versionadded:: 0.9.2
     |      
     |      .. versionchanged:: 0.9.4 The :attr:`.DialectKWArgs.dialect_kwargs`
     |         collection is now writable.
     |      
     |      .. seealso::
     |      
     |          :attr:`.DialectKWArgs.dialect_options` - nested dictionary form
     |  
     |  dialect_options(...)
     |      A collection of keyword arguments specified as dialect-specific
     |      options to this construct.
     |      
     |      This is a two-level nested registry, keyed to ``<dialect_name>``
     |      and ``<argument_name>``.  For example, the ``postgresql_where``
     |      argument would be locatable as::
     |      
     |          arg = my_object.dialect_options['postgresql']['where']
     |      
     |      .. versionadded:: 0.9.2
     |      
     |      .. seealso::
     |      
     |          :attr:`.DialectKWArgs.dialect_kwargs` - flat dictionary form
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from sqlalchemy.sql.base.DialectKWArgs:
     |  
     |  argument_for(cls, dialect_name, argument_name, default) from sqlalchemy.sql.visitors.VisitableType
     |      Add a new kind of dialect-specific keyword argument for this class.
     |      
     |      E.g.::
     |      
     |          Index.argument_for("mydialect", "length", None)
     |      
     |          some_index = Index('a', 'b', mydialect_length=5)
     |      
     |      The :meth:`.DialectKWArgs.argument_for` method is a per-argument
     |      way adding extra arguments to the
     |      :attr:`.DefaultDialect.construct_arguments` dictionary. This
     |      dictionary provides a list of argument names accepted by various
     |      schema-level constructs on behalf of a dialect.
     |      
     |      New dialects should typically specify this dictionary all at once as a
     |      data member of the dialect class.  The use case for ad-hoc addition of
     |      argument names is typically for end-user code that is also using
     |      a custom compilation scheme which consumes the additional arguments.
     |      
     |      :param dialect_name: name of a dialect.  The dialect must be
     |       locatable, else a :class:`.NoSuchModuleError` is raised.   The
     |       dialect must also include an existing
     |       :attr:`.DefaultDialect.construct_arguments` collection, indicating
     |       that it participates in the keyword-argument validation and default
     |       system, else :class:`.ArgumentError` is raised.  If the dialect does
     |       not include this collection, then any keyword argument can be
     |       specified on behalf of this dialect already.  All dialects packaged
     |       within SQLAlchemy include this collection, however for third party
     |       dialects, support may vary.
     |      
     |      :param argument_name: name of the parameter.
     |      
     |      :param default: default value of the parameter.
     |      
     |      .. versionadded:: 0.9.4
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.base.DialectKWArgs:
     |  
     |  kwargs
     |      A synonym for :attr:`.DialectKWArgs.dialect_kwargs`.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  __repr__(self)
     |  
     |  get_children(self, **kwargs)
     |      used to allow SchemaVisitor access
     |  
     |  info(...)
     |      Info dictionary associated with the object, allowing user-defined
     |      data to be associated with this :class:`.SchemaItem`.
     |      
     |      The dictionary is automatically generated when first accessed.
     |      It can also be specified in the constructor of some objects,
     |      such as :class:`.Table` and :class:`.Column`.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SchemaItem:
     |  
     |  quote
     |      Return the value of the ``quote`` flag passed
     |      to this schema object, for those schema items which
     |      have a ``name`` field.
     |      
     |      .. deprecated:: 0.9 Use ``<obj>.name.quote``
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  dispatch = <sqlalchemy.event.base.DDLEventsDispatch object>
    
    class REAL(Float)
     |  The SQL REAL type.
     |  
     |  Method resolution order:
     |      REAL
     |      Float
     |      Numeric
     |      _LookupExpressionAdapter
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'REAL'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Float:
     |  
     |  __init__(self, precision=None, asdecimal=False, decimal_return_scale=None, **kwargs)
     |      Construct a Float.
     |      
     |      :param precision: the numeric precision for use in DDL ``CREATE
     |         TABLE``.
     |      
     |      :param asdecimal: the same flag as that of :class:`.Numeric`, but
     |        defaults to ``False``.   Note that setting this flag to ``True``
     |        results in floating point conversion.
     |      
     |      :param decimal_return_scale: Default scale to use when converting
     |       from floats to Python decimals.  Floating point values will typically
     |       be much longer due to decimal inaccuracy, and most floating point
     |       database types don't have a notion of "scale", so by default the
     |       float type looks for the first ten decimal places when converting.
     |       Specfiying this value will override that length.  Note that the
     |       MySQL float types, which do include "scale", will use "scale"
     |       as the default for decimal_return_scale, if not otherwise specified.
     |      
     |       .. versionadded:: 0.9.0
     |      
     |      :param \**kwargs: deprecated.  Additional arguments here are ignored
     |       by the default :class:`.Float` type.  For database specific
     |       floats that support additional arguments, see that dialect's
     |       documentation for details, such as
     |       :class:`sqlalchemy.dialects.mysql.FLOAT`.
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Float:
     |  
     |  scale = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Numeric:
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Numeric:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _LookupExpressionAdapter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _LookupExpressionAdapter:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class SMALLINT(SmallInteger)
     |  The SQL SMALLINT type.
     |  
     |  Method resolution order:
     |      SMALLINT
     |      SmallInteger
     |      Integer
     |      _LookupExpressionAdapter
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'SMALLINT'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Integer:
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Integer:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _LookupExpressionAdapter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _LookupExpressionAdapter:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class Sequence(DefaultGenerator)
     |  Represents a named database sequence.
     |  
     |  The :class:`.Sequence` object represents the name and configurational
     |  parameters of a database sequence.   It also represents
     |  a construct that can be "executed" by a SQLAlchemy :class:`.Engine`
     |  or :class:`.Connection`, rendering the appropriate "next value" function
     |  for the target database and returning a result.
     |  
     |  The :class:`.Sequence` is typically associated with a primary key column::
     |  
     |      some_table = Table(
     |          'some_table', metadata,
     |          Column('id', Integer, Sequence('some_table_seq'),
     |          primary_key=True)
     |      )
     |  
     |  When CREATE TABLE is emitted for the above :class:`.Table`, if the
     |  target platform supports sequences, a CREATE SEQUENCE statement will
     |  be emitted as well.   For platforms that don't support sequences,
     |  the :class:`.Sequence` construct is ignored.
     |  
     |  .. seealso::
     |  
     |      :class:`.CreateSequence`
     |  
     |      :class:`.DropSequence`
     |  
     |  Method resolution order:
     |      Sequence
     |      DefaultGenerator
     |      _NotAColumnExpr
     |      SchemaItem
     |      sqlalchemy.sql.base.SchemaEventTarget
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, name, start=None, increment=None, minvalue=None, maxvalue=None, nominvalue=None, nomaxvalue=None, cycle=None, schema=None, cache=None, order=None, optional=False, quote=None, metadata=None, quote_schema=None, for_update=False)
     |      Construct a :class:`.Sequence` object.
     |      
     |      :param name: The name of the sequence.
     |      :param start: the starting index of the sequence.  This value is
     |       used when the CREATE SEQUENCE command is emitted to the database
     |       as the value of the "START WITH" clause.   If ``None``, the
     |       clause is omitted, which on most platforms indicates a starting
     |       value of 1.
     |      :param increment: the increment value of the sequence.  This
     |       value is used when the CREATE SEQUENCE command is emitted to
     |       the database as the value of the "INCREMENT BY" clause.  If ``None``,
     |       the clause is omitted, which on most platforms indicates an
     |       increment of 1.
     |      :param minvalue: the minimum value of the sequence.  This
     |       value is used when the CREATE SEQUENCE command is emitted to
     |       the database as the value of the "MINVALUE" clause.  If ``None``,
     |       the clause is omitted, which on most platforms indicates a
     |       minvalue of 1 and -2^63-1 for ascending and descending sequences,
     |       respectively.
     |      
     |       .. versionadded:: 1.0.7
     |      
     |      :param maxvalue: the maximum value of the sequence.  This
     |       value is used when the CREATE SEQUENCE command is emitted to
     |       the database as the value of the "MAXVALUE" clause.  If ``None``,
     |       the clause is omitted, which on most platforms indicates a
     |       maxvalue of 2^63-1 and -1 for ascending and descending sequences,
     |       respectively.
     |      
     |       .. versionadded:: 1.0.7
     |      
     |      :param nominvalue: no minimum value of the sequence.  This
     |       value is used when the CREATE SEQUENCE command is emitted to
     |       the database as the value of the "NO MINVALUE" clause.  If ``None``,
     |       the clause is omitted, which on most platforms indicates a
     |       minvalue of 1 and -2^63-1 for ascending and descending sequences,
     |       respectively.
     |      
     |       .. versionadded:: 1.0.7
     |      
     |      :param nomaxvalue: no maximum value of the sequence.  This
     |       value is used when the CREATE SEQUENCE command is emitted to
     |       the database as the value of the "NO MAXVALUE" clause.  If ``None``,
     |       the clause is omitted, which on most platforms indicates a
     |       maxvalue of 2^63-1 and -1 for ascending and descending sequences,
     |       respectively.
     |      
     |       .. versionadded:: 1.0.7
     |      
     |      :param cycle: allows the sequence to wrap around when the maxvalue
     |       or minvalue has been reached by an ascending or descending sequence
     |       respectively.  This value is used when the CREATE SEQUENCE command
     |       is emitted to the database as the "CYCLE" clause.  If the limit is
     |       reached, the next number generated will be the minvalue or maxvalue,
     |       respectively.  If cycle=False (the default) any calls to nextval
     |       after the sequence has reached its maximum value will return an
     |       error.
     |      
     |       .. versionadded:: 1.0.7
     |      
     |      :param schema: Optional schema name for the sequence, if located
     |       in a schema other than the default.  The rules for selecting the
     |       schema name when a :class:`.MetaData` is also present are the same
     |       as that of :paramref:`.Table.schema`.
     |      
     |      :param cache: optional integer value; number of future values in the
     |       sequence which are calculated in advance.  Renders the CACHE keyword
     |       understood by Oracle and PostgreSQL.
     |      
     |       .. versionadded:: 1.1.12
     |      
     |      :param order: optional boolean value; if true, renders the
     |       ORDER keyword, understood by Oracle, indicating the sequence is
     |       definitively ordered.   May be necessary to provide deterministic
     |       ordering using Oracle RAC.
     |      
     |       .. versionadded:: 1.1.12
     |      
     |      :param optional: boolean value, when ``True``, indicates that this
     |       :class:`.Sequence` object only needs to be explicitly generated
     |       on backends that don't provide another way to generate primary
     |       key identifiers.  Currently, it essentially means, "don't create
     |       this sequence on the PostgreSQL backend, where the SERIAL keyword
     |       creates a sequence for us automatically".
     |      :param quote: boolean value, when ``True`` or ``False``, explicitly
     |       forces quoting of the schema name on or off.  When left at its
     |       default of ``None``, normal quoting rules based on casing and
     |       reserved words take place.
     |      :param quote_schema: set the quoting preferences for the ``schema``
     |       name.
     |      
     |      :param metadata: optional :class:`.MetaData` object which this
     |       :class:`.Sequence` will be associated with.  A :class:`.Sequence`
     |       that is associated with a :class:`.MetaData` gains the following
     |       capabilities:
     |      
     |       * The :class:`.Sequence` will inherit the :paramref:`.MetaData.schema`
     |         parameter specified to the target :class:`.MetaData`, which
     |         affects the production of CREATE / DROP DDL, if any.
     |      
     |       * The :meth:`.Sequence.create` and :meth:`.Sequence.drop` methods
     |         automatically use the engine bound to the :class:`.MetaData`
     |         object, if any.
     |      
     |       * The :meth:`.MetaData.create_all` and :meth:`.MetaData.drop_all`
     |         methods will emit CREATE / DROP for this :class:`.Sequence`,
     |         even if the :class:`.Sequence` is not associated with any
     |         :class:`.Table` / :class:`.Column` that's a member of this
     |         :class:`.MetaData`.
     |      
     |       The above behaviors can only occur if the :class:`.Sequence` is
     |       explicitly associated with the :class:`.MetaData` via this parameter.
     |      
     |       .. seealso::
     |      
     |          :ref:`sequence_metadata` - full discussion of the
     |          :paramref:`.Sequence.metadata` parameter.
     |      
     |      :param for_update: Indicates this :class:`.Sequence`, when associated
     |       with a :class:`.Column`, should be invoked for UPDATE statements
     |       on that column's table, rather than for INSERT statements, when
     |       no value is otherwise present for that column in the statement.
     |  
     |  create(self, bind=None, checkfirst=True)
     |      Creates this sequence in the database.
     |  
     |  drop(self, bind=None, checkfirst=True)
     |      Drops this sequence from the database.
     |  
     |  is_callable(...)
     |  
     |  is_clause_element(...)
     |  
     |  next_value(self)
     |      Return a :class:`.next_value` function element
     |      which will render the appropriate increment function
     |      for this :class:`.Sequence` within any SQL expression.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  bind
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'sequence'
     |  
     |  is_sequence = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from DefaultGenerator:
     |  
     |  execute(self, bind=None, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from DefaultGenerator:
     |  
     |  column = None
     |  
     |  is_server_default = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _NotAColumnExpr:
     |  
     |  __clause_element__ lambda self
     |  
     |  self_group lambda self
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _NotAColumnExpr:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  __repr__(self)
     |  
     |  get_children(self, **kwargs)
     |      used to allow SchemaVisitor access
     |  
     |  info(...)
     |      Info dictionary associated with the object, allowing user-defined
     |      data to be associated with this :class:`.SchemaItem`.
     |      
     |      The dictionary is automatically generated when first accessed.
     |      It can also be specified in the constructor of some objects,
     |      such as :class:`.Table` and :class:`.Column`.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SchemaItem:
     |  
     |  quote
     |      Return the value of the ``quote`` flag passed
     |      to this schema object, for those schema items which
     |      have a ``name`` field.
     |      
     |      .. deprecated:: 0.9 Use ``<obj>.name.quote``
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  dispatch = <sqlalchemy.event.base.DDLEventsDispatch object>
    
    class SmallInteger(Integer)
     |  A type for smaller ``int`` integers.
     |  
     |  Typically generates a ``SMALLINT`` in DDL, and otherwise acts like
     |  a normal :class:`.Integer` on the Python side.
     |  
     |  Method resolution order:
     |      SmallInteger
     |      Integer
     |      _LookupExpressionAdapter
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'small_integer'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Integer:
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Integer:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _LookupExpressionAdapter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _LookupExpressionAdapter:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class String(Concatenable, sqlalchemy.sql.type_api.TypeEngine)
     |  The base for all string and character types.
     |  
     |  In SQL, corresponds to VARCHAR.  Can also take Python unicode objects
     |  and encode to the database's encoding in bind params (and the reverse for
     |  result sets.)
     |  
     |  The `length` field is usually required when the `String` type is
     |  used within a CREATE TABLE statement, as VARCHAR requires a length
     |  on most databases.
     |  
     |  Method resolution order:
     |      String
     |      Concatenable
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, length=None, collation=None, convert_unicode=False, unicode_error=None, _warn_on_bytestring=False)
     |      Create a string-holding type.
     |      
     |      :param length: optional, a length for the column for use in
     |        DDL and CAST expressions.  May be safely omitted if no ``CREATE
     |        TABLE`` will be issued.  Certain databases may require a
     |        ``length`` for use in DDL, and will raise an exception when
     |        the ``CREATE TABLE`` DDL is issued if a ``VARCHAR``
     |        with no length is included.  Whether the value is
     |        interpreted as bytes or characters is database specific.
     |      
     |      :param collation: Optional, a column-level collation for
     |        use in DDL and CAST expressions.  Renders using the
     |        COLLATE keyword supported by SQLite, MySQL, and PostgreSQL.
     |        E.g.::
     |      
     |          >>> from sqlalchemy import cast, select, String
     |          >>> print select([cast('some string', String(collation='utf8'))])
     |          SELECT CAST(:param_1 AS VARCHAR COLLATE utf8) AS anon_1
     |      
     |        .. versionadded:: 0.8 Added support for COLLATE to all
     |           string types.
     |      
     |      :param convert_unicode: When set to ``True``, the
     |        :class:`.String` type will assume that
     |        input is to be passed as Python ``unicode`` objects,
     |        and results returned as Python ``unicode`` objects.
     |        If the DBAPI in use does not support Python unicode
     |        (which is fewer and fewer these days), SQLAlchemy
     |        will encode/decode the value, using the
     |        value of the ``encoding`` parameter passed to
     |        :func:`.create_engine` as the encoding.
     |      
     |        When using a DBAPI that natively supports Python
     |        unicode objects, this flag generally does not
     |        need to be set.  For columns that are explicitly
     |        intended to store non-ASCII data, the :class:`.Unicode`
     |        or :class:`.UnicodeText`
     |        types should be used regardless, which feature
     |        the same behavior of ``convert_unicode`` but
     |        also indicate an underlying column type that
     |        directly supports unicode, such as ``NVARCHAR``.
     |      
     |        For the extremely rare case that Python ``unicode``
     |        is to be encoded/decoded by SQLAlchemy on a backend
     |        that does natively support Python ``unicode``,
     |        the value ``force`` can be passed here which will
     |        cause SQLAlchemy's encode/decode services to be
     |        used unconditionally.
     |      
     |      :param unicode_error: Optional, a method to use to handle Unicode
     |        conversion errors. Behaves like the ``errors`` keyword argument to
     |        the standard library's ``string.decode()`` functions.   This flag
     |        requires that ``convert_unicode`` is set to ``force`` - otherwise,
     |        SQLAlchemy is not guaranteed to handle the task of unicode
     |        conversion.   Note that this flag adds significant performance
     |        overhead to row-fetching operations for backends that already
     |        return unicode objects natively (which most DBAPIs do).  This
     |        flag should only be used as a last resort for reading
     |        strings from a column with varied or corrupted encodings.
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'string'
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Concatenable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Concatenable:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class TEXT(Text)
     |  The SQL TEXT type.
     |  
     |  Method resolution order:
     |      TEXT
     |      Text
     |      String
     |      Concatenable
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'TEXT'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String:
     |  
     |  __init__(self, length=None, collation=None, convert_unicode=False, unicode_error=None, _warn_on_bytestring=False)
     |      Create a string-holding type.
     |      
     |      :param length: optional, a length for the column for use in
     |        DDL and CAST expressions.  May be safely omitted if no ``CREATE
     |        TABLE`` will be issued.  Certain databases may require a
     |        ``length`` for use in DDL, and will raise an exception when
     |        the ``CREATE TABLE`` DDL is issued if a ``VARCHAR``
     |        with no length is included.  Whether the value is
     |        interpreted as bytes or characters is database specific.
     |      
     |      :param collation: Optional, a column-level collation for
     |        use in DDL and CAST expressions.  Renders using the
     |        COLLATE keyword supported by SQLite, MySQL, and PostgreSQL.
     |        E.g.::
     |      
     |          >>> from sqlalchemy import cast, select, String
     |          >>> print select([cast('some string', String(collation='utf8'))])
     |          SELECT CAST(:param_1 AS VARCHAR COLLATE utf8) AS anon_1
     |      
     |        .. versionadded:: 0.8 Added support for COLLATE to all
     |           string types.
     |      
     |      :param convert_unicode: When set to ``True``, the
     |        :class:`.String` type will assume that
     |        input is to be passed as Python ``unicode`` objects,
     |        and results returned as Python ``unicode`` objects.
     |        If the DBAPI in use does not support Python unicode
     |        (which is fewer and fewer these days), SQLAlchemy
     |        will encode/decode the value, using the
     |        value of the ``encoding`` parameter passed to
     |        :func:`.create_engine` as the encoding.
     |      
     |        When using a DBAPI that natively supports Python
     |        unicode objects, this flag generally does not
     |        need to be set.  For columns that are explicitly
     |        intended to store non-ASCII data, the :class:`.Unicode`
     |        or :class:`.UnicodeText`
     |        types should be used regardless, which feature
     |        the same behavior of ``convert_unicode`` but
     |        also indicate an underlying column type that
     |        directly supports unicode, such as ``NVARCHAR``.
     |      
     |        For the extremely rare case that Python ``unicode``
     |        is to be encoded/decoded by SQLAlchemy on a backend
     |        that does natively support Python ``unicode``,
     |        the value ``force`` can be passed here which will
     |        cause SQLAlchemy's encode/decode services to be
     |        used unconditionally.
     |      
     |      :param unicode_error: Optional, a method to use to handle Unicode
     |        conversion errors. Behaves like the ``errors`` keyword argument to
     |        the standard library's ``string.decode()`` functions.   This flag
     |        requires that ``convert_unicode`` is set to ``force`` - otherwise,
     |        SQLAlchemy is not guaranteed to handle the task of unicode
     |        conversion.   Note that this flag adds significant performance
     |        overhead to row-fetching operations for backends that already
     |        return unicode objects natively (which most DBAPIs do).  This
     |        flag should only be used as a last resort for reading
     |        strings from a column with varied or corrupted encodings.
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from String:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Concatenable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Concatenable:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class TIME(Time)
     |  The SQL TIME type.
     |  
     |  Method resolution order:
     |      TIME
     |      Time
     |      _LookupExpressionAdapter
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'TIME'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Time:
     |  
     |  __init__(self, timezone=False)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Time:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _LookupExpressionAdapter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _LookupExpressionAdapter:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  literal_processor(self, dialect)
     |      Return a conversion function for processing literal values that are
     |      to be rendered directly without using binds.
     |      
     |      This function is used when the compiler makes use of the
     |      "literal_binds" flag, typically used in DDL generation as well
     |      as in certain scenarios where backends don't accept bound parameters.
     |      
     |      .. versionadded:: 0.9.0
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class TIMESTAMP(DateTime)
     |  The SQL TIMESTAMP type.
     |  
     |  :class:`~.types.TIMESTAMP` datatypes have support for timezone
     |  storage on some backends, such as PostgreSQL and Oracle.  Use the
     |  :paramref:`~types.TIMESTAMP.timezone` argument in order to enable
     |  "TIMESTAMP WITH TIMEZONE" for these backends.
     |  
     |  Method resolution order:
     |      TIMESTAMP
     |      DateTime
     |      _LookupExpressionAdapter
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, timezone=False)
     |      Construct a new :class:`.TIMESTAMP`.
     |      
     |      :param timezone: boolean.  Indicates that the TIMESTAMP type should
     |       enable timezone support, if available on the target database.
     |       On a per-dialect basis is similar to "TIMESTAMP WITH TIMEZONE".
     |       If the target database does not support timezones, this flag is
     |       ignored.
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'TIMESTAMP'
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DateTime:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _LookupExpressionAdapter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _LookupExpressionAdapter:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  literal_processor(self, dialect)
     |      Return a conversion function for processing literal values that are
     |      to be rendered directly without using binds.
     |      
     |      This function is used when the compiler makes use of the
     |      "literal_binds" flag, typically used in DDL generation as well
     |      as in certain scenarios where backends don't accept bound parameters.
     |      
     |      .. versionadded:: 0.9.0
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class Table(sqlalchemy.sql.base.DialectKWArgs, SchemaItem, sqlalchemy.sql.selectable.TableClause)
     |  Represent a table in a database.
     |  
     |  e.g.::
     |  
     |      mytable = Table("mytable", metadata,
     |                      Column('mytable_id', Integer, primary_key=True),
     |                      Column('value', String(50))
     |                 )
     |  
     |  The :class:`.Table` object constructs a unique instance of itself based
     |  on its name and optional schema name within the given
     |  :class:`.MetaData` object. Calling the :class:`.Table`
     |  constructor with the same name and same :class:`.MetaData` argument
     |  a second time will return the *same* :class:`.Table` object - in this way
     |  the :class:`.Table` constructor acts as a registry function.
     |  
     |  .. seealso::
     |  
     |      :ref:`metadata_describing` - Introduction to database metadata
     |  
     |  Constructor arguments are as follows:
     |  
     |  :param name: The name of this table as represented in the database.
     |  
     |      The table name, along with the value of the ``schema`` parameter,
     |      forms a key which uniquely identifies this :class:`.Table` within
     |      the owning :class:`.MetaData` collection.
     |      Additional calls to :class:`.Table` with the same name, metadata,
     |      and schema name will return the same :class:`.Table` object.
     |  
     |      Names which contain no upper case characters
     |      will be treated as case insensitive names, and will not be quoted
     |      unless they are a reserved word or contain special characters.
     |      A name with any number of upper case characters is considered
     |      to be case sensitive, and will be sent as quoted.
     |  
     |      To enable unconditional quoting for the table name, specify the flag
     |      ``quote=True`` to the constructor, or use the :class:`.quoted_name`
     |      construct to specify the name.
     |  
     |  :param metadata: a :class:`.MetaData` object which will contain this
     |      table.  The metadata is used as a point of association of this table
     |      with other tables which are referenced via foreign key.  It also
     |      may be used to associate this table with a particular
     |      :class:`.Connectable`.
     |  
     |  :param \*args: Additional positional arguments are used primarily
     |      to add the list of :class:`.Column` objects contained within this
     |      table. Similar to the style of a CREATE TABLE statement, other
     |      :class:`.SchemaItem` constructs may be added here, including
     |      :class:`.PrimaryKeyConstraint`, and :class:`.ForeignKeyConstraint`.
     |  
     |  :param autoload: Defaults to False, unless :paramref:`.Table.autoload_with`
     |      is set in which case it defaults to True; :class:`.Column` objects
     |      for this table should be reflected from the database, possibly
     |      augmenting or replacing existing :class:`.Column` objects that were
     |      explicitly specified.
     |  
     |      .. versionchanged:: 1.0.0 setting the :paramref:`.Table.autoload_with`
     |         parameter implies that :paramref:`.Table.autoload` will default
     |         to True.
     |  
     |      .. seealso::
     |  
     |          :ref:`metadata_reflection_toplevel`
     |  
     |  :param autoload_replace: Defaults to ``True``; when using
     |      :paramref:`.Table.autoload`
     |      in conjunction with :paramref:`.Table.extend_existing`, indicates
     |      that :class:`.Column` objects present in the already-existing
     |      :class:`.Table` object should be replaced with columns of the same
     |      name retrieved from the autoload process.   When ``False``, columns
     |      already present under existing names will be omitted from the
     |      reflection process.
     |  
     |      Note that this setting does not impact :class:`.Column` objects
     |      specified programmatically within the call to :class:`.Table` that
     |      also is autoloading; those :class:`.Column` objects will always
     |      replace existing columns of the same name when
     |      :paramref:`.Table.extend_existing` is ``True``.
     |  
     |      .. versionadded:: 0.7.5
     |  
     |      .. seealso::
     |  
     |          :paramref:`.Table.autoload`
     |  
     |          :paramref:`.Table.extend_existing`
     |  
     |  :param autoload_with: An :class:`.Engine` or :class:`.Connection` object
     |      with which this :class:`.Table` object will be reflected; when
     |      set to a non-None value, it implies that :paramref:`.Table.autoload`
     |      is ``True``.   If left unset, but :paramref:`.Table.autoload` is
     |      explicitly set to ``True``, an autoload operation will attempt to
     |      proceed by locating an :class:`.Engine` or :class:`.Connection` bound
     |      to the underlying :class:`.MetaData` object.
     |  
     |      .. seealso::
     |  
     |          :paramref:`.Table.autoload`
     |  
     |  :param extend_existing: When ``True``, indicates that if this
     |      :class:`.Table` is already present in the given :class:`.MetaData`,
     |      apply further arguments within the constructor to the existing
     |      :class:`.Table`.
     |  
     |      If :paramref:`.Table.extend_existing` or
     |      :paramref:`.Table.keep_existing` are not set, and the given name
     |      of the new :class:`.Table` refers to a :class:`.Table` that is
     |      already present in the target :class:`.MetaData` collection, and
     |      this :class:`.Table` specifies additional columns or other constructs
     |      or flags that modify the table's state, an
     |      error is raised.  The purpose of these two mutually-exclusive flags
     |      is to specify what action should be taken when a :class:`.Table`
     |      is specified that matches an existing :class:`.Table`, yet specifies
     |      additional constructs.
     |  
     |      :paramref:`.Table.extend_existing` will also work in conjunction
     |      with :paramref:`.Table.autoload` to run a new reflection
     |      operation against the database, even if a :class:`.Table`
     |      of the same name is already present in the target
     |      :class:`.MetaData`; newly reflected :class:`.Column` objects
     |      and other options will be added into the state of the
     |      :class:`.Table`, potentially overwriting existing columns
     |      and options of the same name.
     |  
     |      .. versionchanged:: 0.7.4 :paramref:`.Table.extend_existing` will
     |         invoke a new reflection operation when combined with
     |         :paramref:`.Table.autoload` set to True.
     |  
     |      As is always the case with :paramref:`.Table.autoload`,
     |      :class:`.Column` objects can be specified in the same :class:`.Table`
     |      constructor, which will take precedence.  Below, the existing
     |      table ``mytable`` will be augmented with :class:`.Column` objects
     |      both reflected from the database, as well as the given :class:`.Column`
     |      named "y"::
     |  
     |          Table("mytable", metadata,
     |                      Column('y', Integer),
     |                      extend_existing=True,
     |                      autoload=True,
     |                      autoload_with=engine
     |                  )
     |  
     |      .. seealso::
     |  
     |          :paramref:`.Table.autoload`
     |  
     |          :paramref:`.Table.autoload_replace`
     |  
     |          :paramref:`.Table.keep_existing`
     |  
     |  
     |  :param implicit_returning: True by default - indicates that
     |      RETURNING can be used by default to fetch newly inserted primary key
     |      values, for backends which support this.  Note that
     |      create_engine() also provides an implicit_returning flag.
     |  
     |  :param include_columns: A list of strings indicating a subset of
     |      columns to be loaded via the ``autoload`` operation; table columns who
     |      aren't present in this list will not be represented on the resulting
     |      ``Table`` object. Defaults to ``None`` which indicates all columns
     |      should be reflected.
     |  
     |  :param info: Optional data dictionary which will be populated into the
     |      :attr:`.SchemaItem.info` attribute of this object.
     |  
     |  :param keep_existing: When ``True``, indicates that if this Table
     |      is already present in the given :class:`.MetaData`, ignore
     |      further arguments within the constructor to the existing
     |      :class:`.Table`, and return the :class:`.Table` object as
     |      originally created. This is to allow a function that wishes
     |      to define a new :class:`.Table` on first call, but on
     |      subsequent calls will return the same :class:`.Table`,
     |      without any of the declarations (particularly constraints)
     |      being applied a second time.
     |  
     |      If :paramref:`.Table.extend_existing` or
     |      :paramref:`.Table.keep_existing` are not set, and the given name
     |      of the new :class:`.Table` refers to a :class:`.Table` that is
     |      already present in the target :class:`.MetaData` collection, and
     |      this :class:`.Table` specifies additional columns or other constructs
     |      or flags that modify the table's state, an
     |      error is raised.  The purpose of these two mutually-exclusive flags
     |      is to specify what action should be taken when a :class:`.Table`
     |      is specified that matches an existing :class:`.Table`, yet specifies
     |      additional constructs.
     |  
     |      .. seealso::
     |  
     |          :paramref:`.Table.extend_existing`
     |  
     |  :param listeners: A list of tuples of the form ``(<eventname>, <fn>)``
     |      which will be passed to :func:`.event.listen` upon construction.
     |      This alternate hook to :func:`.event.listen` allows the establishment
     |      of a listener function specific to this :class:`.Table` before
     |      the "autoload" process begins.  Particularly useful for
     |      the :meth:`.DDLEvents.column_reflect` event::
     |  
     |          def listen_for_reflect(table, column_info):
     |              "handle the column reflection event"
     |              # ...
     |  
     |          t = Table(
     |              'sometable',
     |              autoload=True,
     |              listeners=[
     |                  ('column_reflect', listen_for_reflect)
     |              ])
     |  
     |  :param mustexist: When ``True``, indicates that this Table must already
     |      be present in the given :class:`.MetaData` collection, else
     |      an exception is raised.
     |  
     |  :param prefixes:
     |      A list of strings to insert after CREATE in the CREATE TABLE
     |      statement.  They will be separated by spaces.
     |  
     |  :param quote: Force quoting of this table's name on or off, corresponding
     |      to ``True`` or ``False``.  When left at its default of ``None``,
     |      the column identifier will be quoted according to whether the name is
     |      case sensitive (identifiers with at least one upper case character are
     |      treated as case sensitive), or if it's a reserved word.  This flag
     |      is only needed to force quoting of a reserved word which is not known
     |      by the SQLAlchemy dialect.
     |  
     |  :param quote_schema: same as 'quote' but applies to the schema identifier.
     |  
     |  :param schema: The schema name for this table, which is required if
     |      the table resides in a schema other than the default selected schema
     |      for the engine's database connection.  Defaults to ``None``.
     |  
     |      If the owning :class:`.MetaData` of this :class:`.Table` specifies
     |      its own :paramref:`.MetaData.schema` parameter, then that schema
     |      name will be applied to this :class:`.Table` if the schema parameter
     |      here is set to ``None``.  To set a blank schema name on a :class:`.Table`
     |      that would otherwise use the schema set on the owning :class:`.MetaData`,
     |      specify the special symbol :attr:`.BLANK_SCHEMA`.
     |  
     |      .. versionadded:: 1.0.14  Added the :attr:`.BLANK_SCHEMA` symbol to
     |         allow a :class:`.Table` to have a blank schema name even when the
     |         parent :class:`.MetaData` specifies :paramref:`.MetaData.schema`.
     |  
     |      The quoting rules for the schema name are the same as those for the
     |      ``name`` parameter, in that quoting is applied for reserved words or
     |      case-sensitive names; to enable unconditional quoting for the
     |      schema name, specify the flag
     |      ``quote_schema=True`` to the constructor, or use the
     |      :class:`.quoted_name` construct to specify the name.
     |  
     |  :param useexisting: Deprecated.  Use :paramref:`.Table.extend_existing`.
     |  
     |  :param comment: Optional string that will render an SQL comment on table
     |       creation.
     |  
     |       .. versionadded:: 1.2 Added the :paramref:`.Table.comment` parameter
     |          to :class:`.Table`.
     |  
     |  :param \**kw: Additional keyword arguments not mentioned above are
     |      dialect specific, and passed in the form ``<dialectname>_<argname>``.
     |      See the documentation regarding an individual dialect at
     |      :ref:`dialect_toplevel` for detail on documented arguments.
     |  
     |  Method resolution order:
     |      Table
     |      sqlalchemy.sql.base.DialectKWArgs
     |      SchemaItem
     |      sqlalchemy.sql.base.SchemaEventTarget
     |      sqlalchemy.sql.selectable.TableClause
     |      sqlalchemy.sql.base.Immutable
     |      sqlalchemy.sql.selectable.FromClause
     |      sqlalchemy.sql.selectable.Selectable
     |      sqlalchemy.sql.elements.ClauseElement
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, *args, **kw)
     |      Constructor for :class:`~.schema.Table`.
     |      
     |      This method is a no-op.   See the top-level
     |      documentation for :class:`~.schema.Table`
     |      for constructor arguments.
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  add_is_dependent_on(self, table)
     |      Add a 'dependency' for this Table.
     |      
     |      This is another Table object which must be created
     |      first before this one can, or dropped after this one.
     |      
     |      Usually, dependencies between tables are determined via
     |      ForeignKey objects.   However, for other situations that
     |      create dependencies outside of foreign keys (rules, inheriting),
     |      this method can manually establish such a link.
     |  
     |  append_column(self, column)
     |      Append a :class:`~.schema.Column` to this :class:`~.schema.Table`.
     |      
     |      The "key" of the newly added :class:`~.schema.Column`, i.e. the
     |      value of its ``.key`` attribute, will then be available
     |      in the ``.c`` collection of this :class:`~.schema.Table`, and the
     |      column definition will be included in any CREATE TABLE, SELECT,
     |      UPDATE, etc. statements generated from this :class:`~.schema.Table`
     |      construct.
     |      
     |      Note that this does **not** change the definition of the table
     |      as it exists within any underlying database, assuming that
     |      table has already been created in the database.   Relational
     |      databases support the addition of columns to existing tables
     |      using the SQL ALTER command, which would need to be
     |      emitted for an already-existing table that doesn't contain
     |      the newly added column.
     |  
     |  append_constraint(self, constraint)
     |      Append a :class:`~.schema.Constraint` to this
     |      :class:`~.schema.Table`.
     |      
     |      This has the effect of the constraint being included in any
     |      future CREATE TABLE statement, assuming specific DDL creation
     |      events have not been associated with the given
     |      :class:`~.schema.Constraint` object.
     |      
     |      Note that this does **not** produce the constraint within the
     |      relational database automatically, for a table that already exists
     |      in the database.   To add a constraint to an
     |      existing relational database table, the SQL ALTER command must
     |      be used.  SQLAlchemy also provides the
     |      :class:`.AddConstraint` construct which can produce this SQL when
     |      invoked as an executable clause.
     |  
     |  append_ddl_listener(self, event_name, listener)
     |      Append a DDL event listener to this ``Table``.
     |      
     |      .. deprecated:: 0.7
     |          See :class:`.DDLEvents`.
     |  
     |  create(self, bind=None, checkfirst=False)
     |      Issue a ``CREATE`` statement for this
     |      :class:`.Table`, using the given :class:`.Connectable`
     |      for connectivity.
     |      
     |      .. seealso::
     |      
     |          :meth:`.MetaData.create_all`.
     |  
     |  drop(self, bind=None, checkfirst=False)
     |      Issue a ``DROP`` statement for this
     |      :class:`.Table`, using the given :class:`.Connectable`
     |      for connectivity.
     |      
     |      .. seealso::
     |      
     |          :meth:`.MetaData.drop_all`.
     |  
     |  exists(self, bind=None)
     |      Return True if this table exists.
     |  
     |  get_children(self, column_collections=True, schema_visitor=False, **kw)
     |  
     |  tometadata(self, metadata, schema=symbol('retain_schema'), referred_schema_fn=None, name=None)
     |      Return a copy of this :class:`.Table` associated with a different
     |      :class:`.MetaData`.
     |      
     |      E.g.::
     |      
     |          m1 = MetaData()
     |      
     |          user = Table('user', m1, Column('id', Integer, priamry_key=True))
     |      
     |          m2 = MetaData()
     |          user_copy = user.tometadata(m2)
     |      
     |      :param metadata: Target :class:`.MetaData` object, into which the
     |       new :class:`.Table` object will be created.
     |      
     |      :param schema: optional string name indicating the target schema.
     |       Defaults to the special symbol :attr:`.RETAIN_SCHEMA` which indicates
     |       that no change to the schema name should be made in the new
     |       :class:`.Table`.  If set to a string name, the new :class:`.Table`
     |       will have this new name as the ``.schema``.  If set to ``None``, the
     |       schema will be set to that of the schema set on the target
     |       :class:`.MetaData`, which is typically ``None`` as well, unless
     |       set explicitly::
     |      
     |          m2 = MetaData(schema='newschema')
     |      
     |          # user_copy_one will have "newschema" as the schema name
     |          user_copy_one = user.tometadata(m2, schema=None)
     |      
     |          m3 = MetaData()  # schema defaults to None
     |      
     |          # user_copy_two will have None as the schema name
     |          user_copy_two = user.tometadata(m3, schema=None)
     |      
     |      :param referred_schema_fn: optional callable which can be supplied
     |       in order to provide for the schema name that should be assigned
     |       to the referenced table of a :class:`.ForeignKeyConstraint`.
     |       The callable accepts this parent :class:`.Table`, the
     |       target schema that we are changing to, the
     |       :class:`.ForeignKeyConstraint` object, and the existing
     |       "target schema" of that constraint.  The function should return the
     |       string schema name that should be applied.
     |       E.g.::
     |      
     |              def referred_schema_fn(table, to_schema,
     |                                              constraint, referred_schema):
     |                  if referred_schema == 'base_tables':
     |                      return referred_schema
     |                  else:
     |                      return to_schema
     |      
     |              new_table = table.tometadata(m2, schema="alt_schema",
     |                                      referred_schema_fn=referred_schema_fn)
     |      
     |       .. versionadded:: 0.9.2
     |      
     |      :param name: optional string name indicating the target table name.
     |       If not specified or None, the table name is retained.  This allows
     |       a :class:`.Table` to be copied to the same :class:`.MetaData` target
     |       with a new name.
     |      
     |       .. versionadded:: 1.0.0
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(cls, *args, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  bind
     |      Return the connectable associated with this Table.
     |  
     |  foreign_key_constraints
     |      :class:`.ForeignKeyConstraint` objects referred to by this
     |      :class:`.Table`.
     |      
     |      This list is produced from the collection of :class:`.ForeignKey`
     |      objects currently associated.
     |      
     |      .. versionadded:: 1.0.0
     |  
     |  key
     |      Return the 'key' for this :class:`.Table`.
     |      
     |      This value is used as the dictionary key within the
     |      :attr:`.MetaData.tables` collection.   It is typically the same
     |      as that of :attr:`.Table.name` for a table with no
     |      :attr:`.Table.schema` set; otherwise it is typically of the form
     |      ``schemaname.tablename``.
     |  
     |  quote_schema
     |      Return the value of the ``quote_schema`` flag passed
     |      to this :class:`.Table`.
     |      
     |      .. deprecated:: 0.9 Use ``table.schema.quote``
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'table'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.DialectKWArgs:
     |  
     |  dialect_kwargs(...)
     |      A collection of keyword arguments specified as dialect-specific
     |      options to this construct.
     |      
     |      The arguments are present here in their original ``<dialect>_<kwarg>``
     |      format.  Only arguments that were actually passed are included;
     |      unlike the :attr:`.DialectKWArgs.dialect_options` collection, which
     |      contains all options known by this dialect including defaults.
     |      
     |      The collection is also writable; keys are accepted of the
     |      form ``<dialect>_<kwarg>`` where the value will be assembled
     |      into the list of options.
     |      
     |      .. versionadded:: 0.9.2
     |      
     |      .. versionchanged:: 0.9.4 The :attr:`.DialectKWArgs.dialect_kwargs`
     |         collection is now writable.
     |      
     |      .. seealso::
     |      
     |          :attr:`.DialectKWArgs.dialect_options` - nested dictionary form
     |  
     |  dialect_options(...)
     |      A collection of keyword arguments specified as dialect-specific
     |      options to this construct.
     |      
     |      This is a two-level nested registry, keyed to ``<dialect_name>``
     |      and ``<argument_name>``.  For example, the ``postgresql_where``
     |      argument would be locatable as::
     |      
     |          arg = my_object.dialect_options['postgresql']['where']
     |      
     |      .. versionadded:: 0.9.2
     |      
     |      .. seealso::
     |      
     |          :attr:`.DialectKWArgs.dialect_kwargs` - flat dictionary form
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from sqlalchemy.sql.base.DialectKWArgs:
     |  
     |  argument_for(cls, dialect_name, argument_name, default) from sqlalchemy.sql.visitors.VisitableType
     |      Add a new kind of dialect-specific keyword argument for this class.
     |      
     |      E.g.::
     |      
     |          Index.argument_for("mydialect", "length", None)
     |      
     |          some_index = Index('a', 'b', mydialect_length=5)
     |      
     |      The :meth:`.DialectKWArgs.argument_for` method is a per-argument
     |      way adding extra arguments to the
     |      :attr:`.DefaultDialect.construct_arguments` dictionary. This
     |      dictionary provides a list of argument names accepted by various
     |      schema-level constructs on behalf of a dialect.
     |      
     |      New dialects should typically specify this dictionary all at once as a
     |      data member of the dialect class.  The use case for ad-hoc addition of
     |      argument names is typically for end-user code that is also using
     |      a custom compilation scheme which consumes the additional arguments.
     |      
     |      :param dialect_name: name of a dialect.  The dialect must be
     |       locatable, else a :class:`.NoSuchModuleError` is raised.   The
     |       dialect must also include an existing
     |       :attr:`.DefaultDialect.construct_arguments` collection, indicating
     |       that it participates in the keyword-argument validation and default
     |       system, else :class:`.ArgumentError` is raised.  If the dialect does
     |       not include this collection, then any keyword argument can be
     |       specified on behalf of this dialect already.  All dialects packaged
     |       within SQLAlchemy include this collection, however for third party
     |       dialects, support may vary.
     |      
     |      :param argument_name: name of the parameter.
     |      
     |      :param default: default value of the parameter.
     |      
     |      .. versionadded:: 0.9.4
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.base.DialectKWArgs:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  kwargs
     |      A synonym for :attr:`.DialectKWArgs.dialect_kwargs`.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  info(...)
     |      Info dictionary associated with the object, allowing user-defined
     |      data to be associated with this :class:`.SchemaItem`.
     |      
     |      The dictionary is automatically generated when first accessed.
     |      It can also be specified in the constructor of some objects,
     |      such as :class:`.Table` and :class:`.Column`.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SchemaItem:
     |  
     |  quote
     |      Return the value of the ``quote`` flag passed
     |      to this schema object, for those schema items which
     |      have a ``name`` field.
     |      
     |      .. deprecated:: 0.9 Use ``<obj>.name.quote``
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  dispatch = <sqlalchemy.event.base.DDLEventsDispatch object>
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.selectable.TableClause:
     |  
     |  delete(self, whereclause=None, **kwargs)
     |      Generate a :func:`.delete` construct against this
     |      :class:`.TableClause`.
     |      
     |      E.g.::
     |      
     |          table.delete().where(table.c.id==7)
     |      
     |      See :func:`.delete` for argument and usage information.
     |  
     |  description(...)
     |  
     |  insert(self, values=None, inline=False, **kwargs)
     |      Generate an :func:`.insert` construct against this
     |      :class:`.TableClause`.
     |      
     |      E.g.::
     |      
     |          table.insert().values(name='foo')
     |      
     |      See :func:`.insert` for argument and usage information.
     |  
     |  update(self, whereclause=None, values=None, inline=False, **kwargs)
     |      Generate an :func:`.update` construct against this
     |      :class:`.TableClause`.
     |      
     |      E.g.::
     |      
     |          table.update().where(table.c.id==7).values(name='foo')
     |      
     |      See :func:`.update` for argument and usage information.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.selectable.TableClause:
     |  
     |  implicit_returning = False
     |  
     |  named_with_column = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.Immutable:
     |  
     |  params(self, *optionaldict, **kwargs)
     |  
     |  unique_params(self, *optionaldict, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.selectable.FromClause:
     |  
     |  alias(self, name=None, flat=False)
     |      return an alias of this :class:`.FromClause`.
     |      
     |      This is shorthand for calling::
     |      
     |          from sqlalchemy import alias
     |          a = alias(self, name=name)
     |      
     |      See :func:`~.expression.alias` for details.
     |  
     |  columns(...)
     |      A named-based collection of :class:`.ColumnElement` objects
     |      maintained by this :class:`.FromClause`.
     |      
     |      The :attr:`.columns`, or :attr:`.c` collection, is the gateway
     |      to the construction of SQL expressions using table-bound or
     |      other selectable-bound columns::
     |      
     |          select([mytable]).where(mytable.c.somecolumn == 5)
     |  
     |  correspond_on_equivalents(self, column, equivalents)
     |      Return corresponding_column for the given column, or if None
     |      search for a match in the given dictionary.
     |  
     |  corresponding_column(self, column, require_embedded=False)
     |      Given a :class:`.ColumnElement`, return the exported
     |      :class:`.ColumnElement` object from this :class:`.Selectable`
     |      which corresponds to that original
     |      :class:`~sqlalchemy.schema.Column` via a common ancestor
     |      column.
     |      
     |      :param column: the target :class:`.ColumnElement` to be matched
     |      
     |      :param require_embedded: only return corresponding columns for
     |       the given :class:`.ColumnElement`, if the given
     |       :class:`.ColumnElement` is actually present within a sub-element
     |       of this :class:`.FromClause`.  Normally the column will match if
     |       it merely shares a common ancestor with one of the exported
     |       columns of this :class:`.FromClause`.
     |  
     |  count(self, whereclause=None, **params)
     |      return a SELECT COUNT generated against this
     |      :class:`.FromClause`.
     |      
     |      .. deprecated:: 1.1 ``FromClause.count()`` is deprecated. Counting rows requires that the correct column expression and accommodations for joins, DISTINCT, etc. must be made, otherwise results may not be what's expected. Please use an appropriate ``func.count()`` expression directly.
     |      
     |      The function generates COUNT against the
     |      first column in the primary key of the table, or against
     |      the first column in the table overall.   Explicit use of
     |      ``func.count()`` should be preferred::
     |      
     |          row_count = conn.scalar(
     |              select([func.count('*')]).select_from(table)
     |          )
     |      
     |      
     |      .. seealso::
     |      
     |          :data:`.func`
     |  
     |  foreign_keys(...)
     |      Return the collection of ForeignKey objects which this
     |      FromClause references.
     |  
     |  is_derived_from(self, fromclause)
     |      Return True if this FromClause is 'derived' from the given
     |      FromClause.
     |      
     |      An example would be an Alias of a Table is derived from that Table.
     |  
     |  join(self, right, onclause=None, isouter=False, full=False)
     |      Return a :class:`.Join` from this :class:`.FromClause`
     |      to another :class:`FromClause`.
     |      
     |      E.g.::
     |      
     |          from sqlalchemy import join
     |      
     |          j = user_table.join(address_table,
     |                          user_table.c.id == address_table.c.user_id)
     |          stmt = select([user_table]).select_from(j)
     |      
     |      would emit SQL along the lines of::
     |      
     |          SELECT user.id, user.name FROM user
     |          JOIN address ON user.id = address.user_id
     |      
     |      :param right: the right side of the join; this is any
     |       :class:`.FromClause` object such as a :class:`.Table` object, and
     |       may also be a selectable-compatible object such as an ORM-mapped
     |       class.
     |      
     |      :param onclause: a SQL expression representing the ON clause of the
     |       join.  If left at ``None``, :meth:`.FromClause.join` will attempt to
     |       join the two tables based on a foreign key relationship.
     |      
     |      :param isouter: if True, render a LEFT OUTER JOIN, instead of JOIN.
     |      
     |      :param full: if True, render a FULL OUTER JOIN, instead of LEFT OUTER
     |       JOIN.  Implies :paramref:`.FromClause.join.isouter`.
     |      
     |       .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :func:`.join` - standalone function
     |      
     |          :class:`.Join` - the type of object produced
     |  
     |  lateral(self, name=None)
     |      Return a LATERAL alias of this :class:`.FromClause`.
     |      
     |      The return value is the :class:`.Lateral` construct also
     |      provided by the top-level :func:`~.expression.lateral` function.
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`lateral_selects` -  overview of usage.
     |  
     |  outerjoin(self, right, onclause=None, full=False)
     |      Return a :class:`.Join` from this :class:`.FromClause`
     |      to another :class:`FromClause`, with the "isouter" flag set to
     |      True.
     |      
     |      E.g.::
     |      
     |          from sqlalchemy import outerjoin
     |      
     |          j = user_table.outerjoin(address_table,
     |                          user_table.c.id == address_table.c.user_id)
     |      
     |      The above is equivalent to::
     |      
     |          j = user_table.join(
     |              address_table,
     |              user_table.c.id == address_table.c.user_id,
     |              isouter=True)
     |      
     |      :param right: the right side of the join; this is any
     |       :class:`.FromClause` object such as a :class:`.Table` object, and
     |       may also be a selectable-compatible object such as an ORM-mapped
     |       class.
     |      
     |      :param onclause: a SQL expression representing the ON clause of the
     |       join.  If left at ``None``, :meth:`.FromClause.join` will attempt to
     |       join the two tables based on a foreign key relationship.
     |      
     |      :param full: if True, render a FULL OUTER JOIN, instead of
     |       LEFT OUTER JOIN.
     |      
     |       .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :meth:`.FromClause.join`
     |      
     |          :class:`.Join`
     |  
     |  primary_key(...)
     |      Return the collection of Column objects which comprise the
     |      primary key of this FromClause.
     |  
     |  replace_selectable(self, old, alias)
     |      replace all occurrences of FromClause 'old' with the given Alias
     |      object, returning a copy of this :class:`.FromClause`.
     |  
     |  select(self, whereclause=None, **params)
     |      return a SELECT of this :class:`.FromClause`.
     |      
     |      .. seealso::
     |      
     |          :func:`~.sql.expression.select` - general purpose
     |          method which allows for arbitrary column lists.
     |  
     |  tablesample(self, sampling, name=None, seed=None)
     |      Return a TABLESAMPLE alias of this :class:`.FromClause`.
     |      
     |      The return value is the :class:`.TableSample` construct also
     |      provided by the top-level :func:`~.expression.tablesample` function.
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :func:`~.expression.tablesample` - usage guidelines and parameters
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.selectable.FromClause:
     |  
     |  c
     |      An alias for the :attr:`.columns` attribute.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.selectable.FromClause:
     |  
     |  schema = None
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.selectable.Selectable:
     |  
     |  selectable
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.selectable.Selectable:
     |  
     |  is_selectable = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.elements.ClauseElement:
     |  
     |  __and__(self, other)
     |      'and' at the ClauseElement level.
     |      
     |      .. deprecated:: 0.9.5 - conjunctions are intended to be
     |         at the :class:`.ColumnElement`. level
     |  
     |  __bool__(self)
     |  
     |  __getstate__(self)
     |  
     |  __invert__(self)
     |  
     |  __nonzero__ = __bool__(self)
     |  
     |  __or__(self, other)
     |      'or' at the ClauseElement level.
     |      
     |      .. deprecated:: 0.9.5 - conjunctions are intended to be
     |         at the :class:`.ColumnElement`. level
     |  
     |  compare(self, other, **kw)
     |      Compare this ClauseElement to the given ClauseElement.
     |      
     |      Subclasses should override the default behavior, which is a
     |      straight identity comparison.
     |      
     |      \**kw are arguments consumed by subclass compare() methods and
     |      may be used to modify the criteria for comparison.
     |      (see :class:`.ColumnElement`)
     |  
     |  compile(self, bind=None, dialect=None, **kw)
     |      Compile this SQL expression.
     |      
     |      The return value is a :class:`~.Compiled` object.
     |      Calling ``str()`` or ``unicode()`` on the returned value will yield a
     |      string representation of the result. The
     |      :class:`~.Compiled` object also can return a
     |      dictionary of bind parameter names and values
     |      using the ``params`` accessor.
     |      
     |      :param bind: An ``Engine`` or ``Connection`` from which a
     |          ``Compiled`` will be acquired. This argument takes precedence over
     |          this :class:`.ClauseElement`'s bound engine, if any.
     |      
     |      :param column_keys: Used for INSERT and UPDATE statements, a list of
     |          column names which should be present in the VALUES clause of the
     |          compiled statement. If ``None``, all columns from the target table
     |          object are rendered.
     |      
     |      :param dialect: A ``Dialect`` instance from which a ``Compiled``
     |          will be acquired. This argument takes precedence over the `bind`
     |          argument as well as this :class:`.ClauseElement`'s bound engine,
     |          if any.
     |      
     |      :param inline: Used for INSERT statements, for a dialect which does
     |          not support inline retrieval of newly generated primary key
     |          columns, will force the expression used to create the new primary
     |          key value to be rendered inline within the INSERT statement's
     |          VALUES clause. This typically refers to Sequence execution but may
     |          also refer to any server-side default generation function
     |          associated with a primary key `Column`.
     |      
     |      :param compile_kwargs: optional dictionary of additional parameters
     |          that will be passed through to the compiler within all "visit"
     |          methods.  This allows any custom flag to be passed through to
     |          a custom compilation construct, for example.  It is also used
     |          for the case of passing the ``literal_binds`` flag through::
     |      
     |              from sqlalchemy.sql import table, column, select
     |      
     |              t = table('t', column('x'))
     |      
     |              s = select([t]).where(t.c.x == 5)
     |      
     |              print s.compile(compile_kwargs={"literal_binds": True})
     |      
     |          .. versionadded:: 0.9.0
     |      
     |      .. seealso::
     |      
     |          :ref:`faq_sql_expression_string`
     |  
     |  self_group(self, against=None)
     |      Apply a 'grouping' to this :class:`.ClauseElement`.
     |      
     |      This method is overridden by subclasses to return a
     |      "grouping" construct, i.e. parenthesis.   In particular
     |      it's used by "binary" expressions to provide a grouping
     |      around themselves when placed into a larger expression,
     |      as well as by :func:`.select` constructs when placed into
     |      the FROM clause of another :func:`.select`.  (Note that
     |      subqueries should be normally created using the
     |      :meth:`.Select.alias` method, as many platforms require
     |      nested SELECT statements to be named).
     |      
     |      As expressions are composed together, the application of
     |      :meth:`self_group` is automatic - end-user code should never
     |      need to use this method directly.  Note that SQLAlchemy's
     |      clause constructs take operator precedence into account -
     |      so parenthesis might not be needed, for example, in
     |      an expression like ``x OR (y AND z)`` - AND takes precedence
     |      over OR.
     |      
     |      The base :meth:`self_group` method of :class:`.ClauseElement`
     |      just returns self.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.elements.ClauseElement:
     |  
     |  is_clause_element = True
     |  
     |  supports_execution = False
    
    class Text(String)
     |  A variably sized string type.
     |  
     |  In SQL, usually corresponds to CLOB or TEXT. Can also take Python
     |  unicode objects and encode to the database's encoding in bind
     |  params (and the reverse for result sets.)  In general, TEXT objects
     |  do not have a length; while some databases will accept a length
     |  argument here, it will be rejected by others.
     |  
     |  Method resolution order:
     |      Text
     |      String
     |      Concatenable
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'text'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String:
     |  
     |  __init__(self, length=None, collation=None, convert_unicode=False, unicode_error=None, _warn_on_bytestring=False)
     |      Create a string-holding type.
     |      
     |      :param length: optional, a length for the column for use in
     |        DDL and CAST expressions.  May be safely omitted if no ``CREATE
     |        TABLE`` will be issued.  Certain databases may require a
     |        ``length`` for use in DDL, and will raise an exception when
     |        the ``CREATE TABLE`` DDL is issued if a ``VARCHAR``
     |        with no length is included.  Whether the value is
     |        interpreted as bytes or characters is database specific.
     |      
     |      :param collation: Optional, a column-level collation for
     |        use in DDL and CAST expressions.  Renders using the
     |        COLLATE keyword supported by SQLite, MySQL, and PostgreSQL.
     |        E.g.::
     |      
     |          >>> from sqlalchemy import cast, select, String
     |          >>> print select([cast('some string', String(collation='utf8'))])
     |          SELECT CAST(:param_1 AS VARCHAR COLLATE utf8) AS anon_1
     |      
     |        .. versionadded:: 0.8 Added support for COLLATE to all
     |           string types.
     |      
     |      :param convert_unicode: When set to ``True``, the
     |        :class:`.String` type will assume that
     |        input is to be passed as Python ``unicode`` objects,
     |        and results returned as Python ``unicode`` objects.
     |        If the DBAPI in use does not support Python unicode
     |        (which is fewer and fewer these days), SQLAlchemy
     |        will encode/decode the value, using the
     |        value of the ``encoding`` parameter passed to
     |        :func:`.create_engine` as the encoding.
     |      
     |        When using a DBAPI that natively supports Python
     |        unicode objects, this flag generally does not
     |        need to be set.  For columns that are explicitly
     |        intended to store non-ASCII data, the :class:`.Unicode`
     |        or :class:`.UnicodeText`
     |        types should be used regardless, which feature
     |        the same behavior of ``convert_unicode`` but
     |        also indicate an underlying column type that
     |        directly supports unicode, such as ``NVARCHAR``.
     |      
     |        For the extremely rare case that Python ``unicode``
     |        is to be encoded/decoded by SQLAlchemy on a backend
     |        that does natively support Python ``unicode``,
     |        the value ``force`` can be passed here which will
     |        cause SQLAlchemy's encode/decode services to be
     |        used unconditionally.
     |      
     |      :param unicode_error: Optional, a method to use to handle Unicode
     |        conversion errors. Behaves like the ``errors`` keyword argument to
     |        the standard library's ``string.decode()`` functions.   This flag
     |        requires that ``convert_unicode`` is set to ``force`` - otherwise,
     |        SQLAlchemy is not guaranteed to handle the task of unicode
     |        conversion.   Note that this flag adds significant performance
     |        overhead to row-fetching operations for backends that already
     |        return unicode objects natively (which most DBAPIs do).  This
     |        flag should only be used as a last resort for reading
     |        strings from a column with varied or corrupted encodings.
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from String:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Concatenable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Concatenable:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class ThreadLocalMetaData(MetaData)
     |  A MetaData variant that presents a different ``bind`` in every thread.
     |  
     |  Makes the ``bind`` property of the MetaData a thread-local value, allowing
     |  this collection of tables to be bound to different ``Engine``
     |  implementations or connections in each thread.
     |  
     |  The ThreadLocalMetaData starts off bound to None in each thread.  Binds
     |  must be made explicitly by assigning to the ``bind`` property or using
     |  ``connect()``.  You can also re-bind dynamically multiple times per
     |  thread, just like a regular ``MetaData``.
     |  
     |  Method resolution order:
     |      ThreadLocalMetaData
     |      MetaData
     |      SchemaItem
     |      sqlalchemy.sql.base.SchemaEventTarget
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |      Construct a ThreadLocalMetaData.
     |  
     |  dispose(self)
     |      Dispose all bound engines, in all thread contexts.
     |  
     |  is_bound(self)
     |      True if there is a bind for this thread.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  bind
     |      The bound Engine or Connection for this thread.
     |      
     |      This property may be assigned an Engine or Connection, or assigned a
     |      string or URL to automatically create a basic Engine for this bind
     |      with ``create_engine()``.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'metadata'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MetaData:
     |  
     |  __contains__(self, table_or_key)
     |  
     |  __getstate__(self)
     |  
     |  __repr__(self)
     |  
     |  __setstate__(self, state)
     |  
     |  append_ddl_listener(self, event_name, listener)
     |      Append a DDL event listener to this ``MetaData``.
     |      
     |      .. deprecated:: 0.7
     |          See :class:`.DDLEvents`.
     |  
     |  clear(self)
     |      Clear all Table objects from this MetaData.
     |  
     |  create_all(self, bind=None, tables=None, checkfirst=True)
     |      Create all tables stored in this metadata.
     |      
     |      Conditional by default, will not attempt to recreate tables already
     |      present in the target database.
     |      
     |      :param bind:
     |        A :class:`.Connectable` used to access the
     |        database; if None, uses the existing bind on this ``MetaData``, if
     |        any.
     |      
     |      :param tables:
     |        Optional list of ``Table`` objects, which is a subset of the total
     |        tables in the ``MetaData`` (others are ignored).
     |      
     |      :param checkfirst:
     |        Defaults to True, don't issue CREATEs for tables already present
     |        in the target database.
     |  
     |  drop_all(self, bind=None, tables=None, checkfirst=True)
     |      Drop all tables stored in this metadata.
     |      
     |      Conditional by default, will not attempt to drop tables not present in
     |      the target database.
     |      
     |      :param bind:
     |        A :class:`.Connectable` used to access the
     |        database; if None, uses the existing bind on this ``MetaData``, if
     |        any.
     |      
     |      :param tables:
     |        Optional list of ``Table`` objects, which is a subset of the
     |        total tables in the ``MetaData`` (others are ignored).
     |      
     |      :param checkfirst:
     |        Defaults to True, only issue DROPs for tables confirmed to be
     |        present in the target database.
     |  
     |  reflect(self, bind=None, schema=None, views=False, only=None, extend_existing=False, autoload_replace=True, **dialect_kwargs)
     |      Load all available table definitions from the database.
     |      
     |      Automatically creates ``Table`` entries in this ``MetaData`` for any
     |      table available in the database but not yet present in the
     |      ``MetaData``.  May be called multiple times to pick up tables recently
     |      added to the database, however no special action is taken if a table
     |      in this ``MetaData`` no longer exists in the database.
     |      
     |      :param bind:
     |        A :class:`.Connectable` used to access the database; if None, uses
     |        the existing bind on this ``MetaData``, if any.
     |      
     |      :param schema:
     |        Optional, query and reflect tables from an alterate schema.
     |        If None, the schema associated with this :class:`.MetaData`
     |        is used, if any.
     |      
     |      :param views:
     |        If True, also reflect views.
     |      
     |      :param only:
     |        Optional.  Load only a sub-set of available named tables.  May be
     |        specified as a sequence of names or a callable.
     |      
     |        If a sequence of names is provided, only those tables will be
     |        reflected.  An error is raised if a table is requested but not
     |        available.  Named tables already present in this ``MetaData`` are
     |        ignored.
     |      
     |        If a callable is provided, it will be used as a boolean predicate to
     |        filter the list of potential table names.  The callable is called
     |        with a table name and this ``MetaData`` instance as positional
     |        arguments and should return a true value for any table to reflect.
     |      
     |      :param extend_existing: Passed along to each :class:`.Table` as
     |        :paramref:`.Table.extend_existing`.
     |      
     |        .. versionadded:: 0.9.1
     |      
     |      :param autoload_replace: Passed along to each :class:`.Table` as
     |        :paramref:`.Table.autoload_replace`.
     |      
     |        .. versionadded:: 0.9.1
     |      
     |      :param \**dialect_kwargs: Additional keyword arguments not mentioned
     |       above are dialect specific, and passed in the form
     |       ``<dialectname>_<argname>``.  See the documentation regarding an
     |       individual dialect at :ref:`dialect_toplevel` for detail on
     |       documented arguments.
     |      
     |        .. versionadded:: 0.9.2 - Added
     |           :paramref:`.MetaData.reflect.**dialect_kwargs` to support
     |           dialect-level reflection options for all :class:`.Table`
     |           objects reflected.
     |  
     |  remove(self, table)
     |      Remove the given Table object from this MetaData.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MetaData:
     |  
     |  sorted_tables
     |      Returns a list of :class:`.Table` objects sorted in order of
     |      foreign key dependency.
     |      
     |      The sorting will place :class:`.Table` objects that have dependencies
     |      first, before the dependencies themselves, representing the
     |      order in which they can be created.   To get the order in which
     |      the tables would be dropped, use the ``reversed()`` Python built-in.
     |      
     |      .. warning::
     |      
     |          The :attr:`.sorted_tables` accessor cannot by itself accommodate
     |          automatic resolution of dependency cycles between tables, which
     |          are usually caused by mutually dependent foreign key constraints.
     |          To resolve these cycles, either the
     |          :paramref:`.ForeignKeyConstraint.use_alter` parameter may be appled
     |          to those constraints, or use the
     |          :func:`.schema.sort_tables_and_constraints` function which will break
     |          out foreign key constraints involved in cycles separately.
     |      
     |      .. seealso::
     |      
     |          :func:`.schema.sort_tables`
     |      
     |          :func:`.schema.sort_tables_and_constraints`
     |      
     |          :attr:`.MetaData.tables`
     |      
     |          :meth:`.Inspector.get_table_names`
     |      
     |          :meth:`.Inspector.get_sorted_table_and_fkc_names`
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MetaData:
     |  
     |  tables = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  get_children(self, **kwargs)
     |      used to allow SchemaVisitor access
     |  
     |  info(...)
     |      Info dictionary associated with the object, allowing user-defined
     |      data to be associated with this :class:`.SchemaItem`.
     |      
     |      The dictionary is automatically generated when first accessed.
     |      It can also be specified in the constructor of some objects,
     |      such as :class:`.Table` and :class:`.Column`.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SchemaItem:
     |  
     |  quote
     |      Return the value of the ``quote`` flag passed
     |      to this schema object, for those schema items which
     |      have a ``name`` field.
     |      
     |      .. deprecated:: 0.9 Use ``<obj>.name.quote``
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  dispatch = <sqlalchemy.event.base.DDLEventsDispatch object>
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Time(_LookupExpressionAdapter, sqlalchemy.sql.type_api.TypeEngine)
     |  A type for ``datetime.time()`` objects.
     |  
     |  Method resolution order:
     |      Time
     |      _LookupExpressionAdapter
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, timezone=False)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'time'
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _LookupExpressionAdapter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _LookupExpressionAdapter:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  literal_processor(self, dialect)
     |      Return a conversion function for processing literal values that are
     |      to be rendered directly without using binds.
     |      
     |      This function is used when the compiler makes use of the
     |      "literal_binds" flag, typically used in DDL generation as well
     |      as in certain scenarios where backends don't accept bound parameters.
     |      
     |      .. versionadded:: 0.9.0
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class TypeDecorator(sqlalchemy.sql.base.SchemaEventTarget, TypeEngine)
     |  Allows the creation of types which add additional functionality
     |  to an existing type.
     |  
     |  This method is preferred to direct subclassing of SQLAlchemy's
     |  built-in types as it ensures that all required functionality of
     |  the underlying type is kept in place.
     |  
     |  Typical usage::
     |  
     |    import sqlalchemy.types as types
     |  
     |    class MyType(types.TypeDecorator):
     |        '''Prefixes Unicode values with "PREFIX:" on the way in and
     |        strips it off on the way out.
     |        '''
     |  
     |        impl = types.Unicode
     |  
     |        def process_bind_param(self, value, dialect):
     |            return "PREFIX:" + value
     |  
     |        def process_result_value(self, value, dialect):
     |            return value[7:]
     |  
     |        def copy(self, **kw):
     |            return MyType(self.impl.length)
     |  
     |  The class-level "impl" attribute is required, and can reference any
     |  TypeEngine class.  Alternatively, the load_dialect_impl() method
     |  can be used to provide different type classes based on the dialect
     |  given; in this case, the "impl" variable can reference
     |  ``TypeEngine`` as a placeholder.
     |  
     |  Types that receive a Python type that isn't similar to the ultimate type
     |  used may want to define the :meth:`TypeDecorator.coerce_compared_value`
     |  method. This is used to give the expression system a hint when coercing
     |  Python objects into bind parameters within expressions. Consider this
     |  expression::
     |  
     |      mytable.c.somecol + datetime.date(2009, 5, 15)
     |  
     |  Above, if "somecol" is an ``Integer`` variant, it makes sense that
     |  we're doing date arithmetic, where above is usually interpreted
     |  by databases as adding a number of days to the given date.
     |  The expression system does the right thing by not attempting to
     |  coerce the "date()" value into an integer-oriented bind parameter.
     |  
     |  However, in the case of ``TypeDecorator``, we are usually changing an
     |  incoming Python type to something new - ``TypeDecorator`` by default will
     |  "coerce" the non-typed side to be the same type as itself. Such as below,
     |  we define an "epoch" type that stores a date value as an integer::
     |  
     |      class MyEpochType(types.TypeDecorator):
     |          impl = types.Integer
     |  
     |          epoch = datetime.date(1970, 1, 1)
     |  
     |          def process_bind_param(self, value, dialect):
     |              return (value - self.epoch).days
     |  
     |          def process_result_value(self, value, dialect):
     |              return self.epoch + timedelta(days=value)
     |  
     |  Our expression of ``somecol + date`` with the above type will coerce the
     |  "date" on the right side to also be treated as ``MyEpochType``.
     |  
     |  This behavior can be overridden via the
     |  :meth:`~TypeDecorator.coerce_compared_value` method, which returns a type
     |  that should be used for the value of the expression. Below we set it such
     |  that an integer value will be treated as an ``Integer``, and any other
     |  value is assumed to be a date and will be treated as a ``MyEpochType``::
     |  
     |      def coerce_compared_value(self, op, value):
     |          if isinstance(value, int):
     |              return Integer()
     |          else:
     |              return self
     |  
     |  .. warning::
     |  
     |     Note that the **behavior of coerce_compared_value is not inherited
     |     by default from that of the base type**.
     |     If the :class:`.TypeDecorator` is augmenting a
     |     type that requires special logic for certain types of operators,
     |     this method **must** be overridden.  A key example is when decorating
     |     the :class:`.postgresql.JSON` and :class:`.postgresql.JSONB` types;
     |     the default rules of :meth:`.TypeEngine.coerce_compared_value` should
     |     be used in order to deal with operators like index operations::
     |  
     |          class MyJsonType(TypeDecorator):
     |              impl = postgresql.JSON
     |  
     |              def coerce_compared_value(self, op, value):
     |                  return self.impl.coerce_compared_value(op, value)
     |  
     |     Without the above step, index operations such as ``mycol['foo']``
     |     will cause the index value ``'foo'`` to be JSON encoded.
     |  
     |  Method resolution order:
     |      TypeDecorator
     |      sqlalchemy.sql.base.SchemaEventTarget
     |      TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __getattr__(self, key)
     |      Proxy all other undefined accessors to the underlying
     |      implementation.
     |  
     |  __init__(self, *args, **kwargs)
     |      Construct a :class:`.TypeDecorator`.
     |      
     |      Arguments sent here are passed to the constructor
     |      of the class assigned to the ``impl`` class level attribute,
     |      assuming the ``impl`` is a callable, and the resulting
     |      object is assigned to the ``self.impl`` instance attribute
     |      (thus overriding the class attribute of the same name).
     |      
     |      If the class level ``impl`` is not a callable (the unusual case),
     |      it will be assigned to the same instance attribute 'as-is',
     |      ignoring those arguments passed to the constructor.
     |      
     |      Subclasses can override this to customize the generation
     |      of ``self.impl`` entirely.
     |  
     |  __repr__(self)
     |  
     |  bind_processor(self, dialect)
     |      Provide a bound value processing function for the
     |      given :class:`.Dialect`.
     |      
     |      This is the method that fulfills the :class:`.TypeEngine`
     |      contract for bound value conversion.   :class:`.TypeDecorator`
     |      will wrap a user-defined implementation of
     |      :meth:`process_bind_param` here.
     |      
     |      User-defined code can override this method directly,
     |      though its likely best to use :meth:`process_bind_param` so that
     |      the processing provided by ``self.impl`` is maintained.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      This method is the reverse counterpart to the
     |      :meth:`result_processor` method of this class.
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      By default, returns self.   This method is called by
     |      the expression system when an object using this type is
     |      on the left or right side of an expression against a plain Python
     |      object which does not yet have a SQLAlchemy type assigned::
     |      
     |          expr = table.c.somecolumn + 35
     |      
     |      Where above, if ``somecolumn`` uses this type, this method will
     |      be called with the value ``operator.add``
     |      and ``35``.  The return value is whatever SQLAlchemy type should
     |      be used for ``35`` for this particular operation.
     |  
     |  compare_values(self, x, y)
     |      Given two values, compare them for equality.
     |      
     |      By default this calls upon :meth:`.TypeEngine.compare_values`
     |      of the underlying "impl", which in turn usually
     |      uses the Python equals operator ``==``.
     |      
     |      This function is used by the ORM to compare
     |      an original-loaded value with an intercepted
     |      "changed" value, to determine if a net change
     |      has occurred.
     |  
     |  copy(self, **kw)
     |      Produce a copy of this :class:`.TypeDecorator` instance.
     |      
     |      This is a shallow copy and is provided to fulfill part of
     |      the :class:`.TypeEngine` contract.  It usually does not
     |      need to be overridden unless the user-defined :class:`.TypeDecorator`
     |      has local state that should be deep-copied.
     |  
     |  get_dbapi_type(self, dbapi)
     |      Return the DBAPI type object represented by this
     |      :class:`.TypeDecorator`.
     |      
     |      By default this calls upon :meth:`.TypeEngine.get_dbapi_type` of the
     |      underlying "impl".
     |  
     |  literal_processor(self, dialect)
     |      Provide a literal processing function for the given
     |      :class:`.Dialect`.
     |      
     |      Subclasses here will typically override
     |      :meth:`.TypeDecorator.process_literal_param` instead of this method
     |      directly.
     |      
     |      By default, this method makes use of
     |      :meth:`.TypeDecorator.process_bind_param` if that method is
     |      implemented, where :meth:`.TypeDecorator.process_literal_param` is
     |      not.  The rationale here is that :class:`.TypeDecorator` typically
     |      deals with Python conversions of data that are above the layer of
     |      database presentation.  With the value converted by
     |      :meth:`.TypeDecorator.process_bind_param`, the underlying type will
     |      then handle whether it needs to be presented to the DBAPI as a bound
     |      parameter or to the database as an inline SQL value.
     |      
     |      .. versionadded:: 0.9.0
     |  
     |  load_dialect_impl(self, dialect)
     |      Return a :class:`.TypeEngine` object corresponding to a dialect.
     |      
     |      This is an end-user override hook that can be used to provide
     |      differing types depending on the given dialect.  It is used
     |      by the :class:`.TypeDecorator` implementation of :meth:`type_engine`
     |      to help determine what type should ultimately be returned
     |      for a given :class:`.TypeDecorator`.
     |      
     |      By default returns ``self.impl``.
     |  
     |  process_bind_param(self, value, dialect)
     |      Receive a bound parameter value to be converted.
     |      
     |      Subclasses override this method to return the
     |      value that should be passed along to the underlying
     |      :class:`.TypeEngine` object, and from there to the
     |      DBAPI ``execute()`` method.
     |      
     |      The operation could be anything desired to perform custom
     |      behavior, such as transforming or serializing data.
     |      This could also be used as a hook for validating logic.
     |      
     |      This operation should be designed with the reverse operation
     |      in mind, which would be the process_result_value method of
     |      this class.
     |      
     |      :param value: Data to operate upon, of any type expected by
     |       this method in the subclass.  Can be ``None``.
     |      :param dialect: the :class:`.Dialect` in use.
     |  
     |  process_literal_param(self, value, dialect)
     |      Receive a literal parameter value to be rendered inline within
     |      a statement.
     |      
     |      This method is used when the compiler renders a
     |      literal value without using binds, typically within DDL
     |      such as in the "server default" of a column or an expression
     |      within a CHECK constraint.
     |      
     |      The returned string will be rendered into the output string.
     |      
     |      .. versionadded:: 0.9.0
     |  
     |  process_result_value(self, value, dialect)
     |      Receive a result-row column value to be converted.
     |      
     |      Subclasses should implement this method to operate on data
     |      fetched from the database.
     |      
     |      Subclasses override this method to return the
     |      value that should be passed back to the application,
     |      given a value that is already processed by
     |      the underlying :class:`.TypeEngine` object, originally
     |      from the DBAPI cursor method ``fetchone()`` or similar.
     |      
     |      The operation could be anything desired to perform custom
     |      behavior, such as transforming or serializing data.
     |      This could also be used as a hook for validating logic.
     |      
     |      :param value: Data to operate upon, of any type expected by
     |       this method in the subclass.  Can be ``None``.
     |      :param dialect: the :class:`.Dialect` in use.
     |      
     |      This operation should be designed to be reversible by
     |      the "process_bind_param" method of this class.
     |  
     |  result_processor(self, dialect, coltype)
     |      Provide a result value processing function for the given
     |      :class:`.Dialect`.
     |      
     |      This is the method that fulfills the :class:`.TypeEngine`
     |      contract for result value conversion.   :class:`.TypeDecorator`
     |      will wrap a user-defined implementation of
     |      :meth:`process_result_value` here.
     |      
     |      User-defined code can override this method directly,
     |      though its likely best to use :meth:`process_result_value` so that
     |      the processing provided by ``self.impl`` is maintained.
     |      
     |      :param dialect: Dialect instance in use.
     |      :param coltype: A SQLAlchemy data type
     |      
     |      This method is the reverse counterpart to the
     |      :meth:`bind_processor` method of this class.
     |  
     |  type_engine(self, dialect)
     |      Return a dialect-specific :class:`.TypeEngine` instance
     |      for this :class:`.TypeDecorator`.
     |      
     |      In most cases this returns a dialect-adapted form of
     |      the :class:`.TypeEngine` type represented by ``self.impl``.
     |      Makes usage of :meth:`dialect_impl` but also traverses
     |      into wrapped :class:`.TypeDecorator` instances.
     |      Behavior can be customized here by overriding
     |      :meth:`load_dialect_impl`.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  comparator_factory
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  Comparator = <class 'sqlalchemy.sql.type_api.Comparator'>
     |  
     |  
     |  __visit_name__ = 'type_decorator'
     |  
     |  coerce_to_is_types = (<type 'NoneType'>,)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  dispatch = <sqlalchemy.event.base.DDLEventsDispatch object>
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from TypeEngine:
     |  
     |  python_type
     |      Return the Python type object expected to be returned
     |      by instances of this type, if known.
     |      
     |      Basically, for those types which enforce a return type,
     |      or are known across the board to do such for all common
     |      DBAPIs (like ``int`` for example), will return that type.
     |      
     |      If a return type is not defined, raises
     |      ``NotImplementedError``.
     |      
     |      Note that any type also accommodates NULL in SQL which
     |      means you can also get back ``None`` from any type
     |      in practice.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class Unicode(String)
     |  A variable length Unicode string type.
     |  
     |  The :class:`.Unicode` type is a :class:`.String` subclass
     |  that assumes input and output as Python ``unicode`` data,
     |  and in that regard is equivalent to the usage of the
     |  ``convert_unicode`` flag with the :class:`.String` type.
     |  However, unlike plain :class:`.String`, it also implies an
     |  underlying column type that is explicitly supporting of non-ASCII
     |  data, such as ``NVARCHAR`` on Oracle and SQL Server.
     |  This can impact the output of ``CREATE TABLE`` statements
     |  and ``CAST`` functions at the dialect level, and can
     |  also affect the handling of bound parameters in some
     |  specific DBAPI scenarios.
     |  
     |  The encoding used by the :class:`.Unicode` type is usually
     |  determined by the DBAPI itself; most modern DBAPIs
     |  feature support for Python ``unicode`` objects as bound
     |  values and result set values, and the encoding should
     |  be configured as detailed in the notes for the target
     |  DBAPI in the :ref:`dialect_toplevel` section.
     |  
     |  For those DBAPIs which do not support, or are not configured
     |  to accommodate Python ``unicode`` objects
     |  directly, SQLAlchemy does the encoding and decoding
     |  outside of the DBAPI.   The encoding in this scenario
     |  is determined by the ``encoding`` flag passed to
     |  :func:`.create_engine`.
     |  
     |  When using the :class:`.Unicode` type, it is only appropriate
     |  to pass Python ``unicode`` objects, and not plain ``str``.
     |  If a plain ``str`` is passed under Python 2, a warning
     |  is emitted.  If you notice your application emitting these warnings but
     |  you're not sure of the source of them, the Python
     |  ``warnings`` filter, documented at
     |  http://docs.python.org/library/warnings.html,
     |  can be used to turn these warnings into exceptions
     |  which will illustrate a stack trace::
     |  
     |    import warnings
     |    warnings.simplefilter('error')
     |  
     |  For an application that wishes to pass plain bytestrings
     |  and Python ``unicode`` objects to the ``Unicode`` type
     |  equally, the bytestrings must first be decoded into
     |  unicode.  The recipe at :ref:`coerce_to_unicode` illustrates
     |  how this is done.
     |  
     |  See also:
     |  
     |      :class:`.UnicodeText` - unlengthed textual counterpart
     |      to :class:`.Unicode`.
     |  
     |  Method resolution order:
     |      Unicode
     |      String
     |      Concatenable
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, length=None, **kwargs)
     |      Create a :class:`.Unicode` object.
     |      
     |      Parameters are the same as that of :class:`.String`,
     |      with the exception that ``convert_unicode``
     |      defaults to ``True``.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'unicode'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String:
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from String:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Concatenable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Concatenable:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class UnicodeText(Text)
     |  An unbounded-length Unicode string type.
     |  
     |  See :class:`.Unicode` for details on the unicode
     |  behavior of this object.
     |  
     |  Like :class:`.Unicode`, usage the :class:`.UnicodeText` type implies a
     |  unicode-capable type being used on the backend, such as
     |  ``NCLOB``, ``NTEXT``.
     |  
     |  Method resolution order:
     |      UnicodeText
     |      Text
     |      String
     |      Concatenable
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, length=None, **kwargs)
     |      Create a Unicode-converting Text type.
     |      
     |      Parameters are the same as that of :class:`.Text`,
     |      with the exception that ``convert_unicode``
     |      defaults to ``True``.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'unicode_text'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String:
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from String:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Concatenable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Concatenable:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
    
    class UniqueConstraint(ColumnCollectionConstraint)
     |  A table-level UNIQUE constraint.
     |  
     |  Defines a single column or composite UNIQUE constraint. For a no-frills,
     |  single column constraint, adding ``unique=True`` to the ``Column``
     |  definition is a shorthand equivalent for an unnamed, single column
     |  UniqueConstraint.
     |  
     |  Method resolution order:
     |      UniqueConstraint
     |      ColumnCollectionConstraint
     |      ColumnCollectionMixin
     |      Constraint
     |      sqlalchemy.sql.base.DialectKWArgs
     |      SchemaItem
     |      sqlalchemy.sql.base.SchemaEventTarget
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'unique_constraint'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ColumnCollectionConstraint:
     |  
     |  __contains__(self, x)
     |  
     |  __init__(self, *columns, **kw)
     |      :param \*columns:
     |        A sequence of column names or Column objects.
     |      
     |      :param name:
     |        Optional, the in-database name of this constraint.
     |      
     |      :param deferrable:
     |        Optional bool.  If set, emit DEFERRABLE or NOT DEFERRABLE when
     |        issuing DDL for this constraint.
     |      
     |      :param initially:
     |        Optional string.  If set, emit INITIALLY <value> when issuing DDL
     |        for this constraint.
     |      
     |      :param \**kw: other keyword arguments including dialect-specific
     |        arguments are propagated to the :class:`.Constraint` superclass.
     |  
     |  __iter__(self)
     |  
     |  __len__(self)
     |  
     |  contains_column(self, col)
     |      Return True if this constraint contains the given column.
     |      
     |      Note that this object also contains an attribute ``.columns``
     |      which is a :class:`.ColumnCollection` of :class:`.Column` objects.
     |  
     |  copy(self, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ColumnCollectionConstraint:
     |  
     |  columns = None
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ColumnCollectionMixin:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Constraint:
     |  
     |  table
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.DialectKWArgs:
     |  
     |  dialect_kwargs(...)
     |      A collection of keyword arguments specified as dialect-specific
     |      options to this construct.
     |      
     |      The arguments are present here in their original ``<dialect>_<kwarg>``
     |      format.  Only arguments that were actually passed are included;
     |      unlike the :attr:`.DialectKWArgs.dialect_options` collection, which
     |      contains all options known by this dialect including defaults.
     |      
     |      The collection is also writable; keys are accepted of the
     |      form ``<dialect>_<kwarg>`` where the value will be assembled
     |      into the list of options.
     |      
     |      .. versionadded:: 0.9.2
     |      
     |      .. versionchanged:: 0.9.4 The :attr:`.DialectKWArgs.dialect_kwargs`
     |         collection is now writable.
     |      
     |      .. seealso::
     |      
     |          :attr:`.DialectKWArgs.dialect_options` - nested dictionary form
     |  
     |  dialect_options(...)
     |      A collection of keyword arguments specified as dialect-specific
     |      options to this construct.
     |      
     |      This is a two-level nested registry, keyed to ``<dialect_name>``
     |      and ``<argument_name>``.  For example, the ``postgresql_where``
     |      argument would be locatable as::
     |      
     |          arg = my_object.dialect_options['postgresql']['where']
     |      
     |      .. versionadded:: 0.9.2
     |      
     |      .. seealso::
     |      
     |          :attr:`.DialectKWArgs.dialect_kwargs` - flat dictionary form
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from sqlalchemy.sql.base.DialectKWArgs:
     |  
     |  argument_for(cls, dialect_name, argument_name, default) from sqlalchemy.sql.visitors.VisitableType
     |      Add a new kind of dialect-specific keyword argument for this class.
     |      
     |      E.g.::
     |      
     |          Index.argument_for("mydialect", "length", None)
     |      
     |          some_index = Index('a', 'b', mydialect_length=5)
     |      
     |      The :meth:`.DialectKWArgs.argument_for` method is a per-argument
     |      way adding extra arguments to the
     |      :attr:`.DefaultDialect.construct_arguments` dictionary. This
     |      dictionary provides a list of argument names accepted by various
     |      schema-level constructs on behalf of a dialect.
     |      
     |      New dialects should typically specify this dictionary all at once as a
     |      data member of the dialect class.  The use case for ad-hoc addition of
     |      argument names is typically for end-user code that is also using
     |      a custom compilation scheme which consumes the additional arguments.
     |      
     |      :param dialect_name: name of a dialect.  The dialect must be
     |       locatable, else a :class:`.NoSuchModuleError` is raised.   The
     |       dialect must also include an existing
     |       :attr:`.DefaultDialect.construct_arguments` collection, indicating
     |       that it participates in the keyword-argument validation and default
     |       system, else :class:`.ArgumentError` is raised.  If the dialect does
     |       not include this collection, then any keyword argument can be
     |       specified on behalf of this dialect already.  All dialects packaged
     |       within SQLAlchemy include this collection, however for third party
     |       dialects, support may vary.
     |      
     |      :param argument_name: name of the parameter.
     |      
     |      :param default: default value of the parameter.
     |      
     |      .. versionadded:: 0.9.4
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.base.DialectKWArgs:
     |  
     |  kwargs
     |      A synonym for :attr:`.DialectKWArgs.dialect_kwargs`.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  __repr__(self)
     |  
     |  get_children(self, **kwargs)
     |      used to allow SchemaVisitor access
     |  
     |  info(...)
     |      Info dictionary associated with the object, allowing user-defined
     |      data to be associated with this :class:`.SchemaItem`.
     |      
     |      The dictionary is automatically generated when first accessed.
     |      It can also be specified in the constructor of some objects,
     |      such as :class:`.Table` and :class:`.Column`.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SchemaItem:
     |  
     |  quote
     |      Return the value of the ``quote`` flag passed
     |      to this schema object, for those schema items which
     |      have a ``name`` field.
     |      
     |      .. deprecated:: 0.9 Use ``<obj>.name.quote``
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.base.SchemaEventTarget:
     |  
     |  dispatch = <sqlalchemy.event.base.DDLEventsDispatch object>
    
    class VARBINARY(_Binary)
     |  The SQL VARBINARY type.
     |  
     |  Method resolution order:
     |      VARBINARY
     |      _Binary
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'VARBINARY'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _Binary:
     |  
     |  __init__(self, length=None)
     |  
     |  bind_processor(self, dialect)
     |      # Python 3 - sqlite3 doesn't need the `Binary` conversion
     |      # here, though pg8000 does to indicate "bytea"
     |  
     |  coerce_compared_value(self, op, value)
     |      See :meth:`.TypeEngine.coerce_compared_value` for a description.
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _Binary:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  Comparator = <class 'sqlalchemy.sql.type_api.Comparator'>
     |      Base class for custom comparison operations defined at the
     |      type level.  See :attr:`.TypeEngine.comparator_factory`.
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.type_api.Comparator'>
     |      Base class for custom comparison operations defined at the
     |      type level.  See :attr:`.TypeEngine.comparator_factory`.
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class VARCHAR(String)
     |  The SQL VARCHAR type.
     |  
     |  Method resolution order:
     |      VARCHAR
     |      String
     |      Concatenable
     |      sqlalchemy.sql.type_api.TypeEngine
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'VARCHAR'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String:
     |  
     |  __init__(self, length=None, collation=None, convert_unicode=False, unicode_error=None, _warn_on_bytestring=False)
     |      Create a string-holding type.
     |      
     |      :param length: optional, a length for the column for use in
     |        DDL and CAST expressions.  May be safely omitted if no ``CREATE
     |        TABLE`` will be issued.  Certain databases may require a
     |        ``length`` for use in DDL, and will raise an exception when
     |        the ``CREATE TABLE`` DDL is issued if a ``VARCHAR``
     |        with no length is included.  Whether the value is
     |        interpreted as bytes or characters is database specific.
     |      
     |      :param collation: Optional, a column-level collation for
     |        use in DDL and CAST expressions.  Renders using the
     |        COLLATE keyword supported by SQLite, MySQL, and PostgreSQL.
     |        E.g.::
     |      
     |          >>> from sqlalchemy import cast, select, String
     |          >>> print select([cast('some string', String(collation='utf8'))])
     |          SELECT CAST(:param_1 AS VARCHAR COLLATE utf8) AS anon_1
     |      
     |        .. versionadded:: 0.8 Added support for COLLATE to all
     |           string types.
     |      
     |      :param convert_unicode: When set to ``True``, the
     |        :class:`.String` type will assume that
     |        input is to be passed as Python ``unicode`` objects,
     |        and results returned as Python ``unicode`` objects.
     |        If the DBAPI in use does not support Python unicode
     |        (which is fewer and fewer these days), SQLAlchemy
     |        will encode/decode the value, using the
     |        value of the ``encoding`` parameter passed to
     |        :func:`.create_engine` as the encoding.
     |      
     |        When using a DBAPI that natively supports Python
     |        unicode objects, this flag generally does not
     |        need to be set.  For columns that are explicitly
     |        intended to store non-ASCII data, the :class:`.Unicode`
     |        or :class:`.UnicodeText`
     |        types should be used regardless, which feature
     |        the same behavior of ``convert_unicode`` but
     |        also indicate an underlying column type that
     |        directly supports unicode, such as ``NVARCHAR``.
     |      
     |        For the extremely rare case that Python ``unicode``
     |        is to be encoded/decoded by SQLAlchemy on a backend
     |        that does natively support Python ``unicode``,
     |        the value ``force`` can be passed here which will
     |        cause SQLAlchemy's encode/decode services to be
     |        used unconditionally.
     |      
     |      :param unicode_error: Optional, a method to use to handle Unicode
     |        conversion errors. Behaves like the ``errors`` keyword argument to
     |        the standard library's ``string.decode()`` functions.   This flag
     |        requires that ``convert_unicode`` is set to ``force`` - otherwise,
     |        SQLAlchemy is not guaranteed to handle the task of unicode
     |        conversion.   Note that this flag adds significant performance
     |        overhead to row-fetching operations for backends that already
     |        return unicode objects natively (which most DBAPIs do).  This
     |        flag should only be used as a last resort for reading
     |        strings from a column with varied or corrupted encodings.
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  literal_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from String:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Concatenable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Concatenable:
     |  
     |  Comparator = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  comparator_factory = <class 'sqlalchemy.sql.sqltypes.Comparator'>
     |  
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class
     |      to work with.
     |      
     |      This method is used internally to associate generic
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_expression(self, bindvalue)
     |      "Given a bind value (i.e. a :class:`.BindParameter` instance),
     |      return a SQL expression in its place.
     |      
     |      This is typically a SQL function that wraps the existing bound
     |      parameter within the statement.  It is used for special data types
     |      that require literals being wrapped in some special database function
     |      in order to coerce an application-level value into a database-specific
     |      format.  It is the SQL analogue of the
     |      :meth:`.TypeEngine.bind_processor` method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      Note that this method, when implemented, should always return
     |      the exact same structure, without any conditional logic, as it
     |      may be used in an executemany() call against an arbitrary number
     |      of bound parameter sets.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      Given an operator and value, gives the type a chance
     |      to return a type which the value should be coerced into.
     |      
     |      The default behavior here is conservative; if the right-hand
     |      side is already coerced into a SQL type based on its
     |      Python type, it is usually left alone.
     |      
     |      End-user functionality extension here should generally be via
     |      :class:`.TypeDecorator`, which provides more liberal behavior in that
     |      it defaults to coercing the other side of the expression into this
     |      type, thus applying special Python conversions above and beyond those
     |      needed by the DBAPI to both ides. It also provides the public method
     |      :meth:`.TypeDecorator.coerce_compared_value` which is intended for
     |      end-user customization of this behavior.
     |  
     |  column_expression(self, colexpr)
     |      Given a SELECT column expression, return a wrapping SQL expression.
     |      
     |      This is typically a SQL function that wraps a column expression
     |      as rendered in the columns clause of a SELECT statement.
     |      It is used for special data types that require
     |      columns to be wrapped in some special database function in order
     |      to coerce the value before being sent back to the application.
     |      It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
     |      method.
     |      
     |      The method is evaluated at statement compile time, as opposed
     |      to statement construction time.
     |      
     |      See also:
     |      
     |      :ref:`types_sql_value_processing`
     |  
     |  compare_against_backend(self, dialect, conn_type)
     |      Compare this type against the given backend type.
     |      
     |      This function is currently not implemented for SQLAlchemy
     |      types, and for all built in types will return ``None``.  However,
     |      it can be implemented by a user-defined type
     |      where it can be consumed by schema comparison tools such as
     |      Alembic autogenerate.
     |      
     |      A future release of SQLAlchemy will potentially impement this method
     |      for builtin types as well.
     |      
     |      The function should return True if this type is equivalent to the
     |      given type; the type is typically reflected from the database
     |      so should be database specific.  The dialect in use is also
     |      passed.   It can also return False to assert that the type is
     |      not equivalent.
     |      
     |      :param dialect: a :class:`.Dialect` that is involved in the comparison.
     |      
     |      :param conn_type: the type object reflected from the backend.
     |      
     |      .. versionadded:: 1.0.3
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy(self, **kw)
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this
     |      :class:`.TypeEngine`.
     |  
     |  evaluates_none(self)
     |      Return a copy of this type which has the :attr:`.should_evaluate_none`
     |      flag set to True.
     |      
     |      E.g.::
     |      
     |              Table(
     |                  'some_table', metadata,
     |                  Column(
     |                      String(50).evaluates_none(),
     |                      nullable=True,
     |                      server_default='no value')
     |              )
     |      
     |      The ORM uses this flag to indicate that a positive value of ``None``
     |      is passed to the column in an INSERT statement, rather than omitting
     |      the column from the INSERT statement which has the effect of firing
     |      off column-level defaults.   It also allows for types which have
     |      special behavior associated with the Python None value to indicate
     |      that the value doesn't necessarily translate into SQL NULL; a
     |      prime example of this is a JSON type which may wish to persist the
     |      JSON value ``'null'``.
     |      
     |      In all cases, the actual NULL SQL value can be always be
     |      persisted in any column by using
     |      the :obj:`~.expression.null` SQL construct in an INSERT statement
     |      or associated with an ORM-mapped attribute.
     |      
     |      .. note::
     |      
     |          The "evaulates none" flag does **not** apply to a value
     |          of ``None`` passed to :paramref:`.Column.default` or
     |          :paramref:`.Column.server_default`; in these cases, ``None``
     |          still means "no default".
     |      
     |      .. versionadded:: 1.1
     |      
     |      .. seealso::
     |      
     |          :ref:`session_forcing_null` - in the ORM documentation
     |      
     |          :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON
     |          interaction with this flag.
     |      
     |          :attr:`.TypeEngine.should_evaluate_none` - class-level flag
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`.Variant.with_variant`
     |      that can be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.type_api.TypeEngine:
     |  
     |  hashable = True
     |  
     |  should_evaluate_none = False

FUNCTIONS
    alias(selectable, name=None, flat=False)
        Return an :class:`.Alias` object.
        
        An :class:`.Alias` represents any :class:`.FromClause`
        with an alternate name assigned within SQL, typically using the ``AS``
        clause when generated, e.g. ``SELECT * FROM table AS aliasname``.
        
        Similar functionality is available via the
        :meth:`~.FromClause.alias` method
        available on all :class:`.FromClause` subclasses.
        
        When an :class:`.Alias` is created from a :class:`.Table` object,
        this has the effect of the table being rendered
        as ``tablename AS aliasname`` in a SELECT statement.
        
        For :func:`.select` objects, the effect is that of creating a named
        subquery, i.e. ``(select ...) AS aliasname``.
        
        The ``name`` parameter is optional, and provides the name
        to use in the rendered SQL.  If blank, an "anonymous" name
        will be deterministically generated at compile time.
        Deterministic means the name is guaranteed to be unique against
        other constructs used in the same statement, and will also be the
        same name for each successive compilation of the same statement
        object.
        
        :param selectable: any :class:`.FromClause` subclass,
            such as a table, select statement, etc.
        
        :param name: string name to be assigned as the alias.
            If ``None``, a name will be deterministically generated
            at compile time.
        
        :param flat: Will be passed through to if the given selectable
         is an instance of :class:`.Join` - see :meth:`.Join.alias`
         for details.
        
         .. versionadded:: 0.9.0
    
    all_(expr)
        Produce an ALL expression.
        
        This may apply to an array type for some dialects (e.g. postgresql),
        or to a subquery for others (e.g. mysql).  e.g.::
        
            # postgresql '5 = ALL (somearray)'
            expr = 5 == all_(mytable.c.somearray)
        
            # mysql '5 = ALL (SELECT value FROM table)'
            expr = 5 == all_(select([table.c.value]))
        
        .. versionadded:: 1.1
        
        .. seealso::
        
            :func:`.expression.any_`
    
    and_(*clauses)
        Produce a conjunction of expressions joined by ``AND``.
        
        E.g.::
        
            from sqlalchemy import and_
        
            stmt = select([users_table]).where(
                            and_(
                                users_table.c.name == 'wendy',
                                users_table.c.enrolled == True
                            )
                        )
        
        The :func:`.and_` conjunction is also available using the
        Python ``&`` operator (though note that compound expressions
        need to be parenthesized in order to function with Python
        operator precedence behavior)::
        
            stmt = select([users_table]).where(
                            (users_table.c.name == 'wendy') &
                            (users_table.c.enrolled == True)
                        )
        
        The :func:`.and_` operation is also implicit in some cases;
        the :meth:`.Select.where` method for example can be invoked multiple
        times against a statement, which will have the effect of each
        clause being combined using :func:`.and_`::
        
            stmt = select([users_table]).                        where(users_table.c.name == 'wendy').                        where(users_table.c.enrolled == True)
        
        .. seealso::
        
            :func:`.or_`
    
    any_(expr)
        Produce an ANY expression.
        
        This may apply to an array type for some dialects (e.g. postgresql),
        or to a subquery for others (e.g. mysql).  e.g.::
        
            # postgresql '5 = ANY (somearray)'
            expr = 5 == any_(mytable.c.somearray)
        
            # mysql '5 = ANY (SELECT value FROM table)'
            expr = 5 == any_(select([table.c.value]))
        
        .. versionadded:: 1.1
        
        .. seealso::
        
            :func:`.expression.all_`
    
    asc(column)
        Produce an ascending ``ORDER BY`` clause element.
        
        e.g.::
        
            from sqlalchemy import asc
            stmt = select([users_table]).order_by(asc(users_table.c.name))
        
        will produce SQL as::
        
            SELECT id, name FROM user ORDER BY name ASC
        
        The :func:`.asc` function is a standalone version of the
        :meth:`.ColumnElement.asc` method available on all SQL expressions,
        e.g.::
        
        
            stmt = select([users_table]).order_by(users_table.c.name.asc())
        
        :param column: A :class:`.ColumnElement` (e.g. scalar SQL expression)
         with which to apply the :func:`.asc` operation.
        
        .. seealso::
        
            :func:`.desc`
        
            :func:`.nullsfirst`
        
            :func:`.nullslast`
        
            :meth:`.Select.order_by`
    
    between(expr, lower_bound, upper_bound, symmetric=False)
        Produce a ``BETWEEN`` predicate clause.
        
        E.g.::
        
            from sqlalchemy import between
            stmt = select([users_table]).where(between(users_table.c.id, 5, 7))
        
        Would produce SQL resembling::
        
            SELECT id, name FROM user WHERE id BETWEEN :id_1 AND :id_2
        
        The :func:`.between` function is a standalone version of the
        :meth:`.ColumnElement.between` method available on all
        SQL expressions, as in::
        
            stmt = select([users_table]).where(users_table.c.id.between(5, 7))
        
        All arguments passed to :func:`.between`, including the left side
        column expression, are coerced from Python scalar values if a
        the value is not a :class:`.ColumnElement` subclass.   For example,
        three fixed values can be compared as in::
        
            print(between(5, 3, 7))
        
        Which would produce::
        
            :param_1 BETWEEN :param_2 AND :param_3
        
        :param expr: a column expression, typically a :class:`.ColumnElement`
         instance or alternatively a Python scalar expression to be coerced
         into a column expression, serving as the left side of the ``BETWEEN``
         expression.
        
        :param lower_bound: a column or Python scalar expression serving as the
         lower bound of the right side of the ``BETWEEN`` expression.
        
        :param upper_bound: a column or Python scalar expression serving as the
         upper bound of the right side of the ``BETWEEN`` expression.
        
        :param symmetric: if True, will render " BETWEEN SYMMETRIC ". Note
         that not all databases support this syntax.
        
         .. versionadded:: 0.9.5
        
        .. seealso::
        
            :meth:`.ColumnElement.between`
    
    bindparam(key, value=symbol('NO_ARG'), type_=None, unique=False, required=symbol('NO_ARG'), quote=None, callable_=None, expanding=False, isoutparam=False, _compared_to_operator=None, _compared_to_type=None)
        Produce a "bound expression".
        
        The return value is an instance of :class:`.BindParameter`; this
        is a :class:`.ColumnElement` subclass which represents a so-called
        "placeholder" value in a SQL expression, the value of which is
        supplied at the point at which the statement in executed against a
        database connection.
        
        In SQLAlchemy, the :func:`.bindparam` construct has
        the ability to carry along the actual value that will be ultimately
        used at expression time.  In this way, it serves not just as
        a "placeholder" for eventual population, but also as a means of
        representing so-called "unsafe" values which should not be rendered
        directly in a SQL statement, but rather should be passed along
        to the :term:`DBAPI` as values which need to be correctly escaped
        and potentially handled for type-safety.
        
        When using :func:`.bindparam` explicitly, the use case is typically
        one of traditional deferment of parameters; the :func:`.bindparam`
        construct accepts a name which can then be referred to at execution
        time::
        
            from sqlalchemy import bindparam
        
            stmt = select([users_table]).\
                        where(users_table.c.name == bindparam('username'))
        
        The above statement, when rendered, will produce SQL similar to::
        
            SELECT id, name FROM user WHERE name = :username
        
        In order to populate the value of ``:username`` above, the value
        would typically be applied at execution time to a method
        like :meth:`.Connection.execute`::
        
            result = connection.execute(stmt, username='wendy')
        
        Explicit use of :func:`.bindparam` is also common when producing
        UPDATE or DELETE statements that are to be invoked multiple times,
        where the WHERE criterion of the statement is to change on each
        invocation, such as::
        
            stmt = (users_table.update().
                    where(user_table.c.name == bindparam('username')).
                    values(fullname=bindparam('fullname'))
                    )
        
            connection.execute(
                stmt, [{"username": "wendy", "fullname": "Wendy Smith"},
                       {"username": "jack", "fullname": "Jack Jones"},
                       ]
            )
        
        SQLAlchemy's Core expression system makes wide use of
        :func:`.bindparam` in an implicit sense.   It is typical that Python
        literal values passed to virtually all SQL expression functions are
        coerced into fixed :func:`.bindparam` constructs.  For example, given
        a comparison operation such as::
        
            expr = users_table.c.name == 'Wendy'
        
        The above expression will produce a :class:`.BinaryExpression`
        construct, where the left side is the :class:`.Column` object
        representing the ``name`` column, and the right side is a
        :class:`.BindParameter` representing the literal value::
        
            print(repr(expr.right))
            BindParameter('%(4327771088 name)s', 'Wendy', type_=String())
        
        The expression above will render SQL such as::
        
            user.name = :name_1
        
        Where the ``:name_1`` parameter name is an anonymous name.  The
        actual string ``Wendy`` is not in the rendered string, but is carried
        along where it is later used within statement execution.  If we
        invoke a statement like the following::
        
            stmt = select([users_table]).where(users_table.c.name == 'Wendy')
            result = connection.execute(stmt)
        
        We would see SQL logging output as::
        
            SELECT "user".id, "user".name
            FROM "user"
            WHERE "user".name = %(name_1)s
            {'name_1': 'Wendy'}
        
        Above, we see that ``Wendy`` is passed as a parameter to the database,
        while the placeholder ``:name_1`` is rendered in the appropriate form
        for the target database, in this case the PostgreSQL database.
        
        Similarly, :func:`.bindparam` is invoked automatically
        when working with :term:`CRUD` statements as far as the "VALUES"
        portion is concerned.   The :func:`.insert` construct produces an
        ``INSERT`` expression which will, at statement execution time,
        generate bound placeholders based on the arguments passed, as in::
        
            stmt = users_table.insert()
            result = connection.execute(stmt, name='Wendy')
        
        The above will produce SQL output as::
        
            INSERT INTO "user" (name) VALUES (%(name)s)
            {'name': 'Wendy'}
        
        The :class:`.Insert` construct, at compilation/execution time,
        rendered a single :func:`.bindparam` mirroring the column
        name ``name`` as a result of the single ``name`` parameter
        we passed to the :meth:`.Connection.execute` method.
        
        :param key:
          the key (e.g. the name) for this bind param.
          Will be used in the generated
          SQL statement for dialects that use named parameters.  This
          value may be modified when part of a compilation operation,
          if other :class:`BindParameter` objects exist with the same
          key, or if its length is too long and truncation is
          required.
        
        :param value:
          Initial value for this bind param.  Will be used at statement
          execution time as the value for this parameter passed to the
          DBAPI, if no other value is indicated to the statement execution
          method for this particular parameter name.  Defaults to ``None``.
        
        :param callable\_:
          A callable function that takes the place of "value".  The function
          will be called at statement execution time to determine the
          ultimate value.   Used for scenarios where the actual bind
          value cannot be determined at the point at which the clause
          construct is created, but embedded bind values are still desirable.
        
        :param type\_:
          A :class:`.TypeEngine` class or instance representing an optional
          datatype for this :func:`.bindparam`.  If not passed, a type
          may be determined automatically for the bind, based on the given
          value; for example, trivial Python types such as ``str``,
          ``int``, ``bool``
          may result in the :class:`.String`, :class:`.Integer` or
          :class:`.Boolean` types being automatically selected.
        
          The type of a :func:`.bindparam` is significant especially in that
          the type will apply pre-processing to the value before it is
          passed to the database.  For example, a :func:`.bindparam` which
          refers to a datetime value, and is specified as holding the
          :class:`.DateTime` type, may apply conversion needed to the
          value (such as stringification on SQLite) before passing the value
          to the database.
        
        :param unique:
          if True, the key name of this :class:`.BindParameter` will be
          modified if another :class:`.BindParameter` of the same name
          already has been located within the containing
          expression.  This flag is used generally by the internals
          when producing so-called "anonymous" bound expressions, it
          isn't generally applicable to explicitly-named :func:`.bindparam`
          constructs.
        
        :param required:
          If ``True``, a value is required at execution time.  If not passed,
          it defaults to ``True`` if neither :paramref:`.bindparam.value`
          or :paramref:`.bindparam.callable` were passed.  If either of these
          parameters are present, then :paramref:`.bindparam.required`
          defaults to ``False``.
        
          .. versionchanged:: 0.8 If the ``required`` flag is not specified,
             it will be set automatically to ``True`` or ``False`` depending
             on whether or not the ``value`` or ``callable`` parameters
             were specified.
        
        :param quote:
          True if this parameter name requires quoting and is not
          currently known as a SQLAlchemy reserved word; this currently
          only applies to the Oracle backend, where bound names must
          sometimes be quoted.
        
        :param isoutparam:
          if True, the parameter should be treated like a stored procedure
          "OUT" parameter.  This applies to backends such as Oracle which
          support OUT parameters.
        
        :param expanding:
          if True, this parameter will be treated as an "expanding" parameter
          at execution time; the parameter value is expected to be a sequence,
          rather than a scalar value, and the string SQL statement will
          be transformed on a per-execution basis to accomodate the sequence
          with a variable number of parameter slots passed to the DBAPI.
          This is to allow statement caching to be used in conjunction with
          an IN clause.
        
          .. note:: The "expanding" feature does not support "executemany"-
             style parameter sets, nor does it support empty IN expressions.
        
          .. note:: The "expanding" feature should be considered as
             **experimental** within the 1.2 series.
        
          .. versionadded:: 1.2
        
        .. seealso::
        
            :ref:`coretutorial_bind_param`
        
            :ref:`coretutorial_insert_expressions`
        
            :func:`.outparam`
    
    case(whens, value=None, else_=None)
        Produce a ``CASE`` expression.
        
        The ``CASE`` construct in SQL is a conditional object that
        acts somewhat analogously to an "if/then" construct in other
        languages.  It returns an instance of :class:`.Case`.
        
        :func:`.case` in its usual form is passed a list of "when"
        constructs, that is, a list of conditions and results as tuples::
        
            from sqlalchemy import case
        
            stmt = select([users_table]).\
                        where(
                            case(
                                [
                                    (users_table.c.name == 'wendy', 'W'),
                                    (users_table.c.name == 'jack', 'J')
                                ],
                                else_='E'
                            )
                        )
        
        The above statement will produce SQL resembling::
        
            SELECT id, name FROM user
            WHERE CASE
                WHEN (name = :name_1) THEN :param_1
                WHEN (name = :name_2) THEN :param_2
                ELSE :param_3
            END
        
        When simple equality expressions of several values against a single
        parent column are needed, :func:`.case` also has a "shorthand" format
        used via the
        :paramref:`.case.value` parameter, which is passed a column
        expression to be compared.  In this form, the :paramref:`.case.whens`
        parameter is passed as a dictionary containing expressions to be
        compared against keyed to result expressions.  The statement below is
        equivalent to the preceding statement::
        
            stmt = select([users_table]).\
                        where(
                            case(
                                {"wendy": "W", "jack": "J"},
                                value=users_table.c.name,
                                else_='E'
                            )
                        )
        
        The values which are accepted as result values in
        :paramref:`.case.whens` as well as with :paramref:`.case.else_` are
        coerced from Python literals into :func:`.bindparam` constructs.
        SQL expressions, e.g. :class:`.ColumnElement` constructs, are accepted
        as well.  To coerce a literal string expression into a constant
        expression rendered inline, use the :func:`.literal_column` construct,
        as in::
        
            from sqlalchemy import case, literal_column
        
            case(
                [
                    (
                        orderline.c.qty > 100,
                        literal_column("'greaterthan100'")
                    ),
                    (
                        orderline.c.qty > 10,
                        literal_column("'greaterthan10'")
                    )
                ],
                else_=literal_column("'lessthan10'")
            )
        
        The above will render the given constants without using bound
        parameters for the result values (but still for the comparison
        values), as in::
        
            CASE
                WHEN (orderline.qty > :qty_1) THEN 'greaterthan100'
                WHEN (orderline.qty > :qty_2) THEN 'greaterthan10'
                ELSE 'lessthan10'
            END
        
        :param whens: The criteria to be compared against,
         :paramref:`.case.whens` accepts two different forms, based on
         whether or not :paramref:`.case.value` is used.
        
         In the first form, it accepts a list of 2-tuples; each 2-tuple
         consists of ``(<sql expression>, <value>)``, where the SQL
         expression is a boolean expression and "value" is a resulting value,
         e.g.::
        
            case([
                (users_table.c.name == 'wendy', 'W'),
                (users_table.c.name == 'jack', 'J')
            ])
        
         In the second form, it accepts a Python dictionary of comparison
         values mapped to a resulting value; this form requires
         :paramref:`.case.value` to be present, and values will be compared
         using the ``==`` operator, e.g.::
        
            case(
                {"wendy": "W", "jack": "J"},
                value=users_table.c.name
            )
        
        :param value: An optional SQL expression which will be used as a
          fixed "comparison point" for candidate values within a dictionary
          passed to :paramref:`.case.whens`.
        
        :param else\_: An optional SQL expression which will be the evaluated
          result of the ``CASE`` construct if all expressions within
          :paramref:`.case.whens` evaluate to false.  When omitted, most
          databases will produce a result of NULL if none of the "when"
          expressions evaluate to true.
    
    cast(expression, type_)
        Produce a ``CAST`` expression.
        
        :func:`.cast` returns an instance of :class:`.Cast`.
        
        E.g.::
        
            from sqlalchemy import cast, Numeric
        
            stmt = select([
                        cast(product_table.c.unit_price, Numeric(10, 4))
                    ])
        
        The above statement will produce SQL resembling::
        
            SELECT CAST(unit_price AS NUMERIC(10, 4)) FROM product
        
        The :func:`.cast` function performs two distinct functions when
        used.  The first is that it renders the ``CAST`` expression within
        the resulting SQL string.  The second is that it associates the given
        type (e.g. :class:`.TypeEngine` class or instance) with the column
        expression on the Python side, which means the expression will take
        on the expression operator behavior associated with that type,
        as well as the bound-value handling and result-row-handling behavior
        of the type.
        
        .. versionchanged:: 0.9.0 :func:`.cast` now applies the given type
           to the expression such that it takes effect on the bound-value,
           e.g. the Python-to-database direction, in addition to the
           result handling, e.g. database-to-Python, direction.
        
        An alternative to :func:`.cast` is the :func:`.type_coerce` function.
        This function performs the second task of associating an expression
        with a specific type, but does not render the ``CAST`` expression
        in SQL.
        
        :param expression: A SQL expression, such as a :class:`.ColumnElement`
         expression or a Python string which will be coerced into a bound
         literal value.
        
        :param type_: A :class:`.TypeEngine` class or instance indicating
         the type to which the ``CAST`` should apply.
        
        .. seealso::
        
            :func:`.type_coerce` - Python-side type coercion without emitting
            CAST.
    
    collate(expression, collation)
        Return the clause ``expression COLLATE collation``.
        
        e.g.::
        
            collate(mycolumn, 'utf8_bin')
        
        produces::
        
            mycolumn COLLATE utf8_bin
        
        The collation expression is also quoted if it is a case sensitive
        identifier, e.g. contains uppercase characters.
        
        .. versionchanged:: 1.2 quoting is automatically applied to COLLATE
           expressions if they are case sensitive.
    
    column(text, type_=None, is_literal=False, _selectable=None)
        Produce a :class:`.ColumnClause` object.
        
        The :class:`.ColumnClause` is a lightweight analogue to the
        :class:`.Column` class.  The :func:`.column` function can
        be invoked with just a name alone, as in::
        
            from sqlalchemy import column
        
            id, name = column("id"), column("name")
            stmt = select([id, name]).select_from("user")
        
        The above statement would produce SQL like::
        
            SELECT id, name FROM user
        
        Once constructed, :func:`.column` may be used like any other SQL
        expression element such as within :func:`.select` constructs::
        
            from sqlalchemy.sql import column
        
            id, name = column("id"), column("name")
            stmt = select([id, name]).select_from("user")
        
        The text handled by :func:`.column` is assumed to be handled
        like the name of a database column; if the string contains mixed case,
        special characters, or matches a known reserved word on the target
        backend, the column expression will render using the quoting
        behavior determined by the backend.  To produce a textual SQL
        expression that is rendered exactly without any quoting,
        use :func:`.literal_column` instead, or pass ``True`` as the
        value of :paramref:`.column.is_literal`.   Additionally, full SQL
        statements are best handled using the :func:`.text` construct.
        
        :func:`.column` can be used in a table-like
        fashion by combining it with the :func:`.table` function
        (which is the lightweight analogue to :class:`.Table`) to produce
        a working table construct with minimal boilerplate::
        
            from sqlalchemy import table, column, select
        
            user = table("user",
                    column("id"),
                    column("name"),
                    column("description"),
            )
        
            stmt = select([user.c.description]).where(user.c.name == 'wendy')
        
        A :func:`.column` / :func:`.table` construct like that illustrated
        above can be created in an
        ad-hoc fashion and is not associated with any
        :class:`.schema.MetaData`, DDL, or events, unlike its
        :class:`.Table` counterpart.
        
        .. versionchanged:: 1.0.0 :func:`.expression.column` can now
           be imported from the plain ``sqlalchemy`` namespace like any
           other SQL element.
        
        :param text: the text of the element.
        
        :param type: :class:`.types.TypeEngine` object which can associate
          this :class:`.ColumnClause` with a type.
        
        :param is_literal: if True, the :class:`.ColumnClause` is assumed to
          be an exact expression that will be delivered to the output with no
          quoting rules applied regardless of case sensitive settings. the
          :func:`.literal_column()` function essentially invokes
          :func:`.column` while passing ``is_literal=True``.
        
        .. seealso::
        
            :class:`.Column`
        
            :func:`.literal_column`
        
            :func:`.table`
        
            :func:`.text`
        
            :ref:`sqlexpression_literal_column`
    
    create_engine(*args, **kwargs)
        Create a new :class:`.Engine` instance.
        
        The standard calling form is to send the URL as the
        first positional argument, usually a string
        that indicates database dialect and connection arguments::
        
        
            engine = create_engine("postgresql://scott:tiger@localhost/test")
        
        Additional keyword arguments may then follow it which
        establish various options on the resulting :class:`.Engine`
        and its underlying :class:`.Dialect` and :class:`.Pool`
        constructs::
        
            engine = create_engine("mysql://scott:tiger@hostname/dbname",
                                        encoding='latin1', echo=True)
        
        The string form of the URL is
        ``dialect[+driver]://user:password@host/dbname[?key=value..]``, where
        ``dialect`` is a database name such as ``mysql``, ``oracle``,
        ``postgresql``, etc., and ``driver`` the name of a DBAPI, such as
        ``psycopg2``, ``pyodbc``, ``cx_oracle``, etc.  Alternatively,
        the URL can be an instance of :class:`~sqlalchemy.engine.url.URL`.
        
        ``**kwargs`` takes a wide variety of options which are routed
        towards their appropriate components.  Arguments may be specific to
        the :class:`.Engine`, the underlying :class:`.Dialect`, as well as the
        :class:`.Pool`.  Specific dialects also accept keyword arguments that
        are unique to that dialect.   Here, we describe the parameters
        that are common to most :func:`.create_engine()` usage.
        
        Once established, the newly resulting :class:`.Engine` will
        request a connection from the underlying :class:`.Pool` once
        :meth:`.Engine.connect` is called, or a method which depends on it
        such as :meth:`.Engine.execute` is invoked.   The :class:`.Pool` in turn
        will establish the first actual DBAPI connection when this request
        is received.   The :func:`.create_engine` call itself does **not**
        establish any actual DBAPI connections directly.
        
        .. seealso::
        
            :doc:`/core/engines`
        
            :doc:`/dialects/index`
        
            :ref:`connections_toplevel`
        
        :param case_sensitive=True: if False, result column names
           will match in a case-insensitive fashion, that is,
           ``row['SomeColumn']``.
        
           .. versionchanged:: 0.8
               By default, result row names match case-sensitively.
               In version 0.7 and prior, all matches were case-insensitive.
        
        :param connect_args: a dictionary of options which will be
            passed directly to the DBAPI's ``connect()`` method as
            additional keyword arguments.  See the example
            at :ref:`custom_dbapi_args`.
        
        :param convert_unicode=False: if set to True, sets
            the default behavior of ``convert_unicode`` on the
            :class:`.String` type to ``True``, regardless
            of a setting of ``False`` on an individual
            :class:`.String` type, thus causing all :class:`.String`
            -based columns
            to accommodate Python ``unicode`` objects.  This flag
            is useful as an engine-wide setting when using a
            DBAPI that does not natively support Python
            ``unicode`` objects and raises an error when
            one is received (such as pyodbc with FreeTDS).
        
            See :class:`.String` for further details on
            what this flag indicates.
        
        :param creator: a callable which returns a DBAPI connection.
            This creation function will be passed to the underlying
            connection pool and will be used to create all new database
            connections. Usage of this function causes connection
            parameters specified in the URL argument to be bypassed.
        
        :param echo=False: if True, the Engine will log all statements
            as well as a repr() of their parameter lists to the engines
            logger, which defaults to sys.stdout. The ``echo`` attribute of
            ``Engine`` can be modified at any time to turn logging on and
            off. If set to the string ``"debug"``, result rows will be
            printed to the standard output as well. This flag ultimately
            controls a Python logger; see :ref:`dbengine_logging` for
            information on how to configure logging directly.
        
        :param echo_pool=False: if True, the connection pool will log
            all checkouts/checkins to the logging stream, which defaults to
            sys.stdout. This flag ultimately controls a Python logger; see
            :ref:`dbengine_logging` for information on how to configure logging
            directly.
        
        :param empty_in_strategy:  The SQL compilation strategy to use when
            rendering an IN or NOT IN expression for :meth:`.ColumnOperators.in_`
            where the right-hand side
            is an empty set.   This is a string value that may be one of
            ``static``, ``dynamic``, or ``dynamic_warn``.   The ``static``
            strategy is the default, and an IN comparison to an empty set
            will generate a simple false expression "1 != 1".   The ``dynamic``
            strategy behaves like that of SQLAlchemy 1.1 and earlier, emitting
            a false expression of the form "expr != expr", which has the effect
            of evaluting to NULL in the case of a null expression.
            ``dynamic_warn`` is the same as ``dynamic``, however also emits a
            warning when an empty set is encountered; this because the "dynamic"
            comparison is typically poorly performing on most databases.
        
            .. versionadded:: 1.2  Added the ``empty_in_strategy`` setting and
               additionally defaulted the behavior for empty-set IN comparisons
               to a static boolean expression.
        
        :param encoding: Defaults to ``utf-8``.  This is the string
            encoding used by SQLAlchemy for string encode/decode
            operations which occur within SQLAlchemy, **outside of
            the DBAPI.**  Most modern DBAPIs feature some degree of
            direct support for Python ``unicode`` objects,
            what you see in Python 2 as a string of the form
            ``u'some string'``.  For those scenarios where the
            DBAPI is detected as not supporting a Python ``unicode``
            object, this encoding is used to determine the
            source/destination encoding.  It is **not used**
            for those cases where the DBAPI handles unicode
            directly.
        
            To properly configure a system to accommodate Python
            ``unicode`` objects, the DBAPI should be
            configured to handle unicode to the greatest
            degree as is appropriate - see
            the notes on unicode pertaining to the specific
            target database in use at :ref:`dialect_toplevel`.
        
            Areas where string encoding may need to be accommodated
            outside of the DBAPI include zero or more of:
        
            * the values passed to bound parameters, corresponding to
              the :class:`.Unicode` type or the :class:`.String` type
              when ``convert_unicode`` is ``True``;
            * the values returned in result set columns corresponding
              to the :class:`.Unicode` type or the :class:`.String`
              type when ``convert_unicode`` is ``True``;
            * the string SQL statement passed to the DBAPI's
              ``cursor.execute()`` method;
            * the string names of the keys in the bound parameter
              dictionary passed to the DBAPI's ``cursor.execute()``
              as well as ``cursor.setinputsizes()`` methods;
            * the string column names retrieved from the DBAPI's
              ``cursor.description`` attribute.
        
            When using Python 3, the DBAPI is required to support
            *all* of the above values as Python ``unicode`` objects,
            which in Python 3 are just known as ``str``.  In Python 2,
            the DBAPI does not specify unicode behavior at all,
            so SQLAlchemy must make decisions for each of the above
            values on a per-DBAPI basis - implementations are
            completely inconsistent in their behavior.
        
        :param execution_options: Dictionary execution options which will
            be applied to all connections.  See
            :meth:`~sqlalchemy.engine.Connection.execution_options`
        
        :param implicit_returning=True: When ``True``, a RETURNING-
            compatible construct, if available, will be used to
            fetch newly generated primary key values when a single row
            INSERT statement is emitted with no existing returning()
            clause.  This applies to those backends which support RETURNING
            or a compatible construct, including PostgreSQL, Firebird, Oracle,
            Microsoft SQL Server.   Set this to ``False`` to disable
            the automatic usage of RETURNING.
        
        :param isolation_level: this string parameter is interpreted by various
            dialects in order to affect the transaction isolation level of the
            database connection.   The parameter essentially accepts some subset of
            these string arguments: ``"SERIALIZABLE"``, ``"REPEATABLE_READ"``,
            ``"READ_COMMITTED"``, ``"READ_UNCOMMITTED"`` and ``"AUTOCOMMIT"``.
            Behavior here varies per backend, and
            individual dialects should be consulted directly.
        
            Note that the isolation level can also be set on a per-:class:`.Connection`
            basis as well, using the
            :paramref:`.Connection.execution_options.isolation_level`
            feature.
        
            .. seealso::
        
                :attr:`.Connection.default_isolation_level` - view default level
        
                :paramref:`.Connection.execution_options.isolation_level`
                - set per :class:`.Connection` isolation level
        
                :ref:`SQLite Transaction Isolation <sqlite_isolation_level>`
        
                :ref:`PostgreSQL Transaction Isolation <postgresql_isolation_level>`
        
                :ref:`MySQL Transaction Isolation <mysql_isolation_level>`
        
                :ref:`session_transaction_isolation` - for the ORM
        
        :param label_length=None: optional integer value which limits
            the size of dynamically generated column labels to that many
            characters. If less than 6, labels are generated as
            "_(counter)". If ``None``, the value of
            ``dialect.max_identifier_length`` is used instead.
        
        :param listeners: A list of one or more
            :class:`~sqlalchemy.interfaces.PoolListener` objects which will
            receive connection pool events.
        
        :param logging_name:  String identifier which will be used within
            the "name" field of logging records generated within the
            "sqlalchemy.engine" logger. Defaults to a hexstring of the
            object's id.
        
        :param max_overflow=10: the number of connections to allow in
            connection pool "overflow", that is connections that can be
            opened above and beyond the pool_size setting, which defaults
            to five. this is only used with :class:`~sqlalchemy.pool.QueuePool`.
        
        :param module=None: reference to a Python module object (the module
            itself, not its string name).  Specifies an alternate DBAPI module to
            be used by the engine's dialect.  Each sub-dialect references a
            specific DBAPI which will be imported before first connect.  This
            parameter causes the import to be bypassed, and the given module to
            be used instead. Can be used for testing of DBAPIs as well as to
            inject "mock" DBAPI implementations into the :class:`.Engine`.
        
        :param paramstyle=None: The `paramstyle <http://legacy.python.org/dev/peps/pep-0249/#paramstyle>`_
            to use when rendering bound parameters.  This style defaults to the
            one recommended by the DBAPI itself, which is retrieved from the
            ``.paramstyle`` attribute of the DBAPI.  However, most DBAPIs accept
            more than one paramstyle, and in particular it may be desirable
            to change a "named" paramstyle into a "positional" one, or vice versa.
            When this attribute is passed, it should be one of the values
            ``"qmark"``, ``"numeric"``, ``"named"``, ``"format"`` or
            ``"pyformat"``, and should correspond to a parameter style known
            to be supported by the DBAPI in use.
        
        :param pool=None: an already-constructed instance of
            :class:`~sqlalchemy.pool.Pool`, such as a
            :class:`~sqlalchemy.pool.QueuePool` instance. If non-None, this
            pool will be used directly as the underlying connection pool
            for the engine, bypassing whatever connection parameters are
            present in the URL argument. For information on constructing
            connection pools manually, see :ref:`pooling_toplevel`.
        
        :param poolclass=None: a :class:`~sqlalchemy.pool.Pool`
            subclass, which will be used to create a connection pool
            instance using the connection parameters given in the URL. Note
            this differs from ``pool`` in that you don't actually
            instantiate the pool in this case, you just indicate what type
            of pool to be used.
        
        :param pool_logging_name:  String identifier which will be used within
           the "name" field of logging records generated within the
           "sqlalchemy.pool" logger. Defaults to a hexstring of the object's
           id.
        
        :param pool_pre_ping: boolean, if True will enable the connection pool
            "pre-ping" feature that tests connections for liveness upon
            each checkout.
        
            .. versionadded:: 1.2
        
            .. seealso::
        
                :ref:`pool_disconnects_pessimistic`
        
        :param pool_size=5: the number of connections to keep open
            inside the connection pool. This used with
            :class:`~sqlalchemy.pool.QueuePool` as
            well as :class:`~sqlalchemy.pool.SingletonThreadPool`.  With
            :class:`~sqlalchemy.pool.QueuePool`, a ``pool_size`` setting
            of 0 indicates no limit; to disable pooling, set ``poolclass`` to
            :class:`~sqlalchemy.pool.NullPool` instead.
        
        :param pool_recycle=-1: this setting causes the pool to recycle
            connections after the given number of seconds has passed. It
            defaults to -1, or no timeout. For example, setting to 3600
            means connections will be recycled after one hour. Note that
            MySQL in particular will disconnect automatically if no
            activity is detected on a connection for eight hours (although
            this is configurable with the MySQLDB connection itself and the
            server configuration as well).
        
            .. seealso::
        
                :ref:`pool_setting_recycle`
        
        :param pool_reset_on_return='rollback': set the "reset on return"
            behavior of the pool, which is whether ``rollback()``,
            ``commit()``, or nothing is called upon connections
            being returned to the pool.  See the docstring for
            ``reset_on_return`` at :class:`.Pool`.
        
            .. versionadded:: 0.7.6
        
        :param pool_timeout=30: number of seconds to wait before giving
            up on getting a connection from the pool. This is only used
            with :class:`~sqlalchemy.pool.QueuePool`.
        
        :param strategy='plain': selects alternate engine implementations.
            Currently available are:
        
            * the ``threadlocal`` strategy, which is described in
              :ref:`threadlocal_strategy`;
            * the ``mock`` strategy, which dispatches all statement
              execution to a function passed as the argument ``executor``.
              See `example in the FAQ
              <http://docs.sqlalchemy.org/en/latest/faq/metadata_schema.html#how-can-i-get-the-create-table-drop-table-output-as-a-string>`_.
        
        :param executor=None: a function taking arguments
            ``(sql, *multiparams, **params)``, to which the ``mock`` strategy will
            dispatch all statement execution. Used only by ``strategy='mock'``.
    
    delete(table, whereclause=None, bind=None, returning=None, prefixes=None, **dialect_kw)
        Construct :class:`.Delete` object.
        
        Similar functionality is available via the
        :meth:`~.TableClause.delete` method on
        :class:`~.schema.Table`.
        
        :param table: The table to delete rows from.
        
        :param whereclause: A :class:`.ClauseElement` describing the ``WHERE``
          condition of the ``DELETE`` statement. Note that the
          :meth:`~Delete.where()` generative method may be used instead.
        
         The WHERE clause can refer to multiple tables.
         For databases which support this, a ``DELETE..USING`` or similar
         clause will be generated.  The statement
         will fail on databases that don't have support for multi-table
         delete statements.  A SQL-standard method of referring to
         additional tables in the WHERE clause is to use a correlated
         subquery::
        
            users.delete().where(
                    users.c.name==select([addresses.c.email_address]).                                where(addresses.c.user_id==users.c.id).                                as_scalar()
                    )
        
         .. versionchanged:: 1.2.0
             The WHERE clause of DELETE can refer to multiple tables.
        
        .. seealso::
        
            :ref:`deletes` - SQL Expression Tutorial
    
    desc(column)
        Produce a descending ``ORDER BY`` clause element.
        
        e.g.::
        
            from sqlalchemy import desc
        
            stmt = select([users_table]).order_by(desc(users_table.c.name))
        
        will produce SQL as::
        
            SELECT id, name FROM user ORDER BY name DESC
        
        The :func:`.desc` function is a standalone version of the
        :meth:`.ColumnElement.desc` method available on all SQL expressions,
        e.g.::
        
        
            stmt = select([users_table]).order_by(users_table.c.name.desc())
        
        :param column: A :class:`.ColumnElement` (e.g. scalar SQL expression)
         with which to apply the :func:`.desc` operation.
        
        .. seealso::
        
            :func:`.asc`
        
            :func:`.nullsfirst`
        
            :func:`.nullslast`
        
            :meth:`.Select.order_by`
    
    distinct(expr)
        Produce an column-expression-level unary ``DISTINCT`` clause.
        
        This applies the ``DISTINCT`` keyword to an individual column
        expression, and is typically contained within an aggregate function,
        as in::
        
            from sqlalchemy import distinct, func
            stmt = select([func.count(distinct(users_table.c.name))])
        
        The above would produce an expression resembling::
        
            SELECT COUNT(DISTINCT name) FROM user
        
        The :func:`.distinct` function is also available as a column-level
        method, e.g. :meth:`.ColumnElement.distinct`, as in::
        
            stmt = select([func.count(users_table.c.name.distinct())])
        
        The :func:`.distinct` operator is different from the
        :meth:`.Select.distinct` method of :class:`.Select`,
        which produces a ``SELECT`` statement
        with ``DISTINCT`` applied to the result set as a whole,
        e.g. a ``SELECT DISTINCT`` expression.  See that method for further
        information.
        
        .. seealso::
        
            :meth:`.ColumnElement.distinct`
        
            :meth:`.Select.distinct`
        
            :data:`.func`
    
    engine_from_config(configuration, prefix='sqlalchemy.', **kwargs)
        Create a new Engine instance using a configuration dictionary.
        
        The dictionary is typically produced from a config file.
        
        The keys of interest to ``engine_from_config()`` should be prefixed, e.g.
        ``sqlalchemy.url``, ``sqlalchemy.echo``, etc.  The 'prefix' argument
        indicates the prefix to be searched for.  Each matching key (after the
        prefix is stripped) is treated as though it were the corresponding keyword
        argument to a :func:`.create_engine` call.
        
        The only required key is (assuming the default prefix) ``sqlalchemy.url``,
        which provides the :ref:`database URL <database_urls>`.
        
        A select set of keyword arguments will be "coerced" to their
        expected type based on string values.    The set of arguments
        is extensible per-dialect using the ``engine_config_types`` accessor.
        
        :param configuration: A dictionary (typically produced from a config file,
            but this is not a requirement).  Items whose keys start with the value
            of 'prefix' will have that prefix stripped, and will then be passed to
            :ref:`create_engine`.
        
        :param prefix: Prefix to match and then strip from keys
            in 'configuration'.
        
        :param kwargs: Each keyword argument to ``engine_from_config()`` itself
            overrides the corresponding item taken from the 'configuration'
            dictionary.  Keyword arguments should *not* be prefixed.
    
    except_(*selects, **kwargs)
        Return an ``EXCEPT`` of multiple selectables.
        
        The returned object is an instance of
        :class:`.CompoundSelect`.
        
        \*selects
          a list of :class:`.Select` instances.
        
        \**kwargs
          available keyword arguments are the same as those of
          :func:`select`.
    
    except_all(*selects, **kwargs)
        Return an ``EXCEPT ALL`` of multiple selectables.
        
        The returned object is an instance of
        :class:`.CompoundSelect`.
        
        \*selects
          a list of :class:`.Select` instances.
        
        \**kwargs
          available keyword arguments are the same as those of
          :func:`select`.
    
    exists(*args, **kwargs)
        Construct a new :class:`.Exists` against an existing
        :class:`.Select` object.
        
        Calling styles are of the following forms::
        
            # use on an existing select()
            s = select([table.c.col1]).where(table.c.col2==5)
            s = exists(s)
        
            # construct a select() at once
            exists(['*'], **select_arguments).where(criterion)
        
            # columns argument is optional, generates "EXISTS (SELECT *)"
            # by default.
            exists().where(table.c.col2==5)
    
    extract(field, expr, **kwargs)
        Return a :class:`.Extract` construct.
        
        This is typically available as :func:`.extract`
        as well as ``func.extract`` from the
        :data:`.func` namespace.
    
    false()
        Return a :class:`.False_` construct.
        
        E.g.::
        
            >>> from sqlalchemy import false
            >>> print select([t.c.x]).where(false())
            SELECT x FROM t WHERE false
        
        A backend which does not support true/false constants will render as
        an expression against 1 or 0::
        
            >>> print select([t.c.x]).where(false())
            SELECT x FROM t WHERE 0 = 1
        
        The :func:`.true` and :func:`.false` constants also feature
        "short circuit" operation within an :func:`.and_` or :func:`.or_`
        conjunction::
        
            >>> print select([t.c.x]).where(or_(t.c.x > 5, true()))
            SELECT x FROM t WHERE true
        
            >>> print select([t.c.x]).where(and_(t.c.x > 5, false()))
            SELECT x FROM t WHERE false
        
        .. versionchanged:: 0.9 :func:`.true` and :func:`.false` feature
           better integrated behavior within conjunctions and on dialects
           that don't support true/false constants.
        
        .. seealso::
        
            :func:`.true`
    
    funcfilter(func, *criterion)
        Produce a :class:`.FunctionFilter` object against a function.
        
        Used against aggregate and window functions,
        for database backends that support the "FILTER" clause.
        
        E.g.::
        
            from sqlalchemy import funcfilter
            funcfilter(func.count(1), MyClass.name == 'some name')
        
        Would produce "COUNT(1) FILTER (WHERE myclass.name = 'some name')".
        
        This function is also available from the :data:`~.expression.func`
        construct itself via the :meth:`.FunctionElement.filter` method.
        
        .. versionadded:: 1.0.0
        
        .. seealso::
        
            :meth:`.FunctionElement.filter`
    
    insert(table, values=None, inline=False, bind=None, prefixes=None, returning=None, return_defaults=False, **dialect_kw)
        Construct an :class:`.Insert` object.
        
        Similar functionality is available via the
        :meth:`~.TableClause.insert` method on
        :class:`~.schema.Table`.
        
        :param table: :class:`.TableClause` which is the subject of the
         insert.
        
        :param values: collection of values to be inserted; see
         :meth:`.Insert.values` for a description of allowed formats here.
         Can be omitted entirely; a :class:`.Insert` construct will also
         dynamically render the VALUES clause at execution time based on
         the parameters passed to :meth:`.Connection.execute`.
        
        :param inline: if True, no attempt will be made to retrieve the
         SQL-generated default values to be provided within the statement;
         in particular,
         this allows SQL expressions to be rendered 'inline' within the
         statement without the need to pre-execute them beforehand; for
         backends that support "returning", this turns off the "implicit
         returning" feature for the statement.
        
        If both `values` and compile-time bind parameters are present, the
        compile-time bind parameters override the information specified
        within `values` on a per-key basis.
        
        The keys within `values` can be either
        :class:`~sqlalchemy.schema.Column` objects or their string
        identifiers. Each key may reference one of:
        
        * a literal data value (i.e. string, number, etc.);
        * a Column object;
        * a SELECT statement.
        
        If a ``SELECT`` statement is specified which references this
        ``INSERT`` statement's table, the statement will be correlated
        against the ``INSERT`` statement.
        
        .. seealso::
        
            :ref:`coretutorial_insert_expressions` - SQL Expression Tutorial
        
            :ref:`inserts_and_updates` - SQL Expression Tutorial
    
    inspect(subject, raiseerr=True)
        Produce an inspection object for the given target.
        
        The returned value in some cases may be the
        same object as the one given, such as if a
        :class:`.Mapper` object is passed.   In other
        cases, it will be an instance of the registered
        inspection type for the given object, such as
        if an :class:`.engine.Engine` is passed, an
        :class:`.Inspector` object is returned.
        
        :param subject: the subject to be inspected.
        :param raiseerr: When ``True``, if the given subject
         does not
         correspond to a known SQLAlchemy inspected type,
         :class:`sqlalchemy.exc.NoInspectionAvailable`
         is raised.  If ``False``, ``None`` is returned.
    
    intersect(*selects, **kwargs)
        Return an ``INTERSECT`` of multiple selectables.
        
        The returned object is an instance of
        :class:`.CompoundSelect`.
        
        \*selects
          a list of :class:`.Select` instances.
        
        \**kwargs
          available keyword arguments are the same as those of
          :func:`select`.
    
    intersect_all(*selects, **kwargs)
        Return an ``INTERSECT ALL`` of multiple selectables.
        
        The returned object is an instance of
        :class:`.CompoundSelect`.
        
        \*selects
          a list of :class:`.Select` instances.
        
        \**kwargs
          available keyword arguments are the same as those of
          :func:`select`.
    
    join(left, right, onclause=None, isouter=False, full=False)
        Produce a :class:`.Join` object, given two :class:`.FromClause`
        expressions.
        
        E.g.::
        
            j = join(user_table, address_table,
                     user_table.c.id == address_table.c.user_id)
            stmt = select([user_table]).select_from(j)
        
        would emit SQL along the lines of::
        
            SELECT user.id, user.name FROM user
            JOIN address ON user.id = address.user_id
        
        Similar functionality is available given any
        :class:`.FromClause` object (e.g. such as a :class:`.Table`) using
        the :meth:`.FromClause.join` method.
        
        :param left: The left side of the join.
        
        :param right: the right side of the join; this is any
         :class:`.FromClause` object such as a :class:`.Table` object, and
         may also be a selectable-compatible object such as an ORM-mapped
         class.
        
        :param onclause: a SQL expression representing the ON clause of the
         join.  If left at ``None``, :meth:`.FromClause.join` will attempt to
         join the two tables based on a foreign key relationship.
        
        :param isouter: if True, render a LEFT OUTER JOIN, instead of JOIN.
        
        :param full: if True, render a FULL OUTER JOIN, instead of JOIN.
        
         .. versionadded:: 1.1
        
        .. seealso::
        
            :meth:`.FromClause.join` - method form, based on a given left side
        
            :class:`.Join` - the type of object produced
    
    lateral(selectable, name=None)
        Return a :class:`.Lateral` object.
        
        :class:`.Lateral` is an :class:`.Alias` subclass that represents
        a subquery with the LATERAL keyword applied to it.
        
        The special behavior of a LATERAL subquery is that it appears in the
        FROM clause of an enclosing SELECT, but may correlate to other
        FROM clauses of that SELECT.   It is a special case of subquery
        only supported by a small number of backends, currently more recent
        PostgreSQL versions.
        
        .. versionadded:: 1.1
        
        .. seealso::
        
            :ref:`lateral_selects` -  overview of usage.
    
    literal(value, type_=None)
        Return a literal clause, bound to a bind parameter.
        
        Literal clauses are created automatically when non-
        :class:`.ClauseElement` objects (such as strings, ints, dates, etc.) are
        used in a comparison operation with a :class:`.ColumnElement` subclass,
        such as a :class:`~sqlalchemy.schema.Column` object.  Use this function
        to force the generation of a literal clause, which will be created as a
        :class:`BindParameter` with a bound value.
        
        :param value: the value to be bound. Can be any Python object supported by
            the underlying DB-API, or is translatable via the given type argument.
        
        :param type\_: an optional :class:`~sqlalchemy.types.TypeEngine` which
            will provide bind-parameter translation for this literal.
    
    literal_column(text, type_=None)
        Produce a :class:`.ColumnClause` object that has the
        :paramref:`.column.is_literal` flag set to True.
        
        :func:`.literal_column` is similar to :func:`.column`, except that
        it is more often used as a "standalone" column expression that renders
        exactly as stated; while :func:`.column` stores a string name that
        will be assumed to be part of a table and may be quoted as such,
        :func:`.literal_column` can be that, or any other arbitrary column-oriented
        expression.
        
        :param text: the text of the expression; can be any SQL expression.
          Quoting rules will not be applied. To specify a column-name expression
          which should be subject to quoting rules, use the :func:`column`
          function.
        
        :param type\_: an optional :class:`~sqlalchemy.types.TypeEngine`
          object which will
          provide result-set translation and additional expression semantics for
          this column. If left as None the type will be NullType.
        
        .. seealso::
        
            :func:`.column`
        
            :func:`.text`
        
            :ref:`sqlexpression_literal_column`
    
    not_(clause)
        Return a negation of the given clause, i.e. ``NOT(clause)``.
        
        The ``~`` operator is also overloaded on all
        :class:`.ColumnElement` subclasses to produce the
        same result.
    
    null()
        Return a constant :class:`.Null` construct.
    
    nullsfirst(column)
        Produce the ``NULLS FIRST`` modifier for an ``ORDER BY`` expression.
        
        :func:`.nullsfirst` is intended to modify the expression produced
        by :func:`.asc` or :func:`.desc`, and indicates how NULL values
        should be handled when they are encountered during ordering::
        
        
            from sqlalchemy import desc, nullsfirst
        
            stmt = select([users_table]).                        order_by(nullsfirst(desc(users_table.c.name)))
        
        The SQL expression from the above would resemble::
        
            SELECT id, name FROM user ORDER BY name DESC NULLS FIRST
        
        Like :func:`.asc` and :func:`.desc`, :func:`.nullsfirst` is typically
        invoked from the column expression itself using
        :meth:`.ColumnElement.nullsfirst`, rather than as its standalone
        function version, as in::
        
            stmt = (select([users_table]).
                    order_by(users_table.c.name.desc().nullsfirst())
                    )
        
        .. seealso::
        
            :func:`.asc`
        
            :func:`.desc`
        
            :func:`.nullslast`
        
            :meth:`.Select.order_by`
    
    nullslast(column)
        Produce the ``NULLS LAST`` modifier for an ``ORDER BY`` expression.
        
        :func:`.nullslast` is intended to modify the expression produced
        by :func:`.asc` or :func:`.desc`, and indicates how NULL values
        should be handled when they are encountered during ordering::
        
        
            from sqlalchemy import desc, nullslast
        
            stmt = select([users_table]).                        order_by(nullslast(desc(users_table.c.name)))
        
        The SQL expression from the above would resemble::
        
            SELECT id, name FROM user ORDER BY name DESC NULLS LAST
        
        Like :func:`.asc` and :func:`.desc`, :func:`.nullslast` is typically
        invoked from the column expression itself using
        :meth:`.ColumnElement.nullslast`, rather than as its standalone
        function version, as in::
        
            stmt = select([users_table]).                        order_by(users_table.c.name.desc().nullslast())
        
        .. seealso::
        
            :func:`.asc`
        
            :func:`.desc`
        
            :func:`.nullsfirst`
        
            :meth:`.Select.order_by`
    
    or_(*clauses)
        Produce a conjunction of expressions joined by ``OR``.
        
        E.g.::
        
            from sqlalchemy import or_
        
            stmt = select([users_table]).where(
                            or_(
                                users_table.c.name == 'wendy',
                                users_table.c.name == 'jack'
                            )
                        )
        
        The :func:`.or_` conjunction is also available using the
        Python ``|`` operator (though note that compound expressions
        need to be parenthesized in order to function with Python
        operator precedence behavior)::
        
            stmt = select([users_table]).where(
                            (users_table.c.name == 'wendy') |
                            (users_table.c.name == 'jack')
                        )
        
        .. seealso::
        
            :func:`.and_`
    
    outerjoin(left, right, onclause=None, full=False)
        Return an ``OUTER JOIN`` clause element.
        
        The returned object is an instance of :class:`.Join`.
        
        Similar functionality is also available via the
        :meth:`~.FromClause.outerjoin()` method on any
        :class:`.FromClause`.
        
        :param left: The left side of the join.
        
        :param right: The right side of the join.
        
        :param onclause:  Optional criterion for the ``ON`` clause, is
          derived from foreign key relationships established between
          left and right otherwise.
        
        To chain joins together, use the :meth:`.FromClause.join` or
        :meth:`.FromClause.outerjoin` methods on the resulting
        :class:`.Join` object.
    
    outparam(key, type_=None)
        Create an 'OUT' parameter for usage in functions (stored procedures),
        for databases which support them.
        
        The ``outparam`` can be used like a regular function parameter.
        The "output" value will be available from the
        :class:`~sqlalchemy.engine.ResultProxy` object via its ``out_parameters``
        attribute, which returns a dictionary containing the values.
    
    over(element, partition_by=None, order_by=None, range_=None, rows=None)
        Produce an :class:`.Over` object against a function.
        
        Used against aggregate or so-called "window" functions,
        for database backends that support window functions.
        
        :func:`~.expression.over` is usually called using
        the :meth:`.FunctionElement.over` method, e.g.::
        
            func.row_number().over(order_by=mytable.c.some_column)
        
        Would produce::
        
            ROW_NUMBER() OVER(ORDER BY some_column)
        
        Ranges are also possible using the :paramref:`.expression.over.range_`
        and :paramref:`.expression.over.rows` parameters.  These
        mutually-exclusive parameters each accept a 2-tuple, which contains
        a combination of integers and None::
        
            func.row_number().over(order_by=my_table.c.some_column, range_=(None, 0))
        
        The above would produce::
        
            ROW_NUMBER() OVER(ORDER BY some_column RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
        
        A value of None indicates "unbounded", a
        value of zero indicates "current row", and negative / positive
        integers indicate "preceding" and "following":
        
        * RANGE BETWEEN 5 PRECEDING AND 10 FOLLOWING::
        
            func.row_number().over(order_by='x', range_=(-5, 10))
        
        * ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW::
        
            func.row_number().over(order_by='x', rows=(None, 0))
        
        * RANGE BETWEEN 2 PRECEDING AND UNBOUNDED FOLLOWING::
        
            func.row_number().over(order_by='x', range_=(-2, None))
        
        * RANGE BETWEEN 1 FOLLOWING AND 3 FOLLOWING::
        
            func.row_number().over(order_by='x', range_=(1, 3))
        
        .. versionadded:: 1.1 support for RANGE / ROWS within a window
        
        
        :param element: a :class:`.FunctionElement`, :class:`.WithinGroup`,
         or other compatible construct.
        :param partition_by: a column element or string, or a list
         of such, that will be used as the PARTITION BY clause
         of the OVER construct.
        :param order_by: a column element or string, or a list
         of such, that will be used as the ORDER BY clause
         of the OVER construct.
        :param range_: optional range clause for the window.  This is a
         tuple value which can contain integer values or None, and will
         render a RANGE BETWEEN PRECEDING / FOLLOWING clause
        
         .. versionadded:: 1.1
        
        :param rows: optional rows clause for the window.  This is a tuple
         value which can contain integer values or None, and will render
         a ROWS BETWEEN PRECEDING / FOLLOWING clause.
        
         .. versionadded:: 1.1
        
        This function is also available from the :data:`~.expression.func`
        construct itself via the :meth:`.FunctionElement.over` method.
        
        .. seealso::
        
            :data:`.expression.func`
        
            :func:`.expression.within_group`
    
    select(columns=None, whereclause=None, from_obj=None, distinct=False, having=None, correlate=True, prefixes=None, suffixes=None, **kwargs)
        Construct a new :class:`.Select`.
        
        Similar functionality is also available via the
        :meth:`.FromClause.select` method on any :class:`.FromClause`.
        
        All arguments which accept :class:`.ClauseElement` arguments also
        accept string arguments, which will be converted as appropriate into
        either :func:`text()` or :func:`literal_column()` constructs.
        
        .. seealso::
        
            :ref:`coretutorial_selecting` - Core Tutorial description of
            :func:`.select`.
        
        :param columns:
          A list of :class:`.ColumnElement` or :class:`.FromClause`
          objects which will form the columns clause of the resulting
          statement.   For those objects that are instances of
          :class:`.FromClause` (typically :class:`.Table` or :class:`.Alias`
          objects), the :attr:`.FromClause.c` collection is extracted
          to form a collection of :class:`.ColumnElement` objects.
        
          This parameter will also accept :class:`.Text` constructs as
          given, as well as ORM-mapped classes.
        
          .. note::
        
            The :paramref:`.select.columns` parameter is not available
            in the method form of :func:`.select`, e.g.
            :meth:`.FromClause.select`.
        
          .. seealso::
        
            :meth:`.Select.column`
        
            :meth:`.Select.with_only_columns`
        
        :param whereclause:
          A :class:`.ClauseElement` expression which will be used to form the
          ``WHERE`` clause.   It is typically preferable to add WHERE
          criterion to an existing :class:`.Select` using method chaining
          with :meth:`.Select.where`.
        
          .. seealso::
        
            :meth:`.Select.where`
        
        :param from_obj:
          A list of :class:`.ClauseElement` objects which will be added to the
          ``FROM`` clause of the resulting statement.  This is equivalent
          to calling :meth:`.Select.select_from` using method chaining on
          an existing :class:`.Select` object.
        
          .. seealso::
        
            :meth:`.Select.select_from` - full description of explicit
            FROM clause specification.
        
        :param autocommit:
          Deprecated.  Use ``.execution_options(autocommit=<True|False>)``
          to set the autocommit option.
        
          .. seealso::
        
            :meth:`.Executable.execution_options`
        
        :param bind=None:
          an :class:`~.Engine` or :class:`~.Connection` instance
          to which the
          resulting :class:`.Select` object will be bound.  The
          :class:`.Select` object will otherwise automatically bind to
          whatever :class:`~.base.Connectable` instances can be located within
          its contained :class:`.ClauseElement` members.
        
        :param correlate=True:
          indicates that this :class:`.Select` object should have its
          contained :class:`.FromClause` elements "correlated" to an enclosing
          :class:`.Select` object.  It is typically preferable to specify
          correlations on an existing :class:`.Select` construct using
          :meth:`.Select.correlate`.
        
          .. seealso::
        
            :meth:`.Select.correlate` - full description of correlation.
        
        :param distinct=False:
          when ``True``, applies a ``DISTINCT`` qualifier to the columns
          clause of the resulting statement.
        
          The boolean argument may also be a column expression or list
          of column expressions - this is a special calling form which
          is understood by the PostgreSQL dialect to render the
          ``DISTINCT ON (<columns>)`` syntax.
        
          ``distinct`` is also available on an existing :class:`.Select`
          object via the :meth:`~.Select.distinct` method.
        
          .. seealso::
        
            :meth:`.Select.distinct`
        
        :param for_update=False:
          when ``True``, applies ``FOR UPDATE`` to the end of the
          resulting statement.
        
          .. deprecated:: 0.9.0 - use
             :meth:`.Select.with_for_update` to specify the
             structure of the ``FOR UPDATE`` clause.
        
          ``for_update`` accepts various string values interpreted by
          specific backends, including:
        
          * ``"read"`` - on MySQL, translates to ``LOCK IN SHARE MODE``;
            on PostgreSQL, translates to ``FOR SHARE``.
          * ``"nowait"`` - on PostgreSQL and Oracle, translates to
            ``FOR UPDATE NOWAIT``.
          * ``"read_nowait"`` - on PostgreSQL, translates to
            ``FOR SHARE NOWAIT``.
        
         .. seealso::
        
            :meth:`.Select.with_for_update` - improved API for
            specifying the ``FOR UPDATE`` clause.
        
        :param group_by:
          a list of :class:`.ClauseElement` objects which will comprise the
          ``GROUP BY`` clause of the resulting select.  This parameter
          is typically specified more naturally using the
          :meth:`.Select.group_by` method on an existing :class:`.Select`.
        
          .. seealso::
        
            :meth:`.Select.group_by`
        
        :param having:
          a :class:`.ClauseElement` that will comprise the ``HAVING`` clause
          of the resulting select when ``GROUP BY`` is used.  This parameter
          is typically specified more naturally using the
          :meth:`.Select.having` method on an existing :class:`.Select`.
        
          .. seealso::
        
            :meth:`.Select.having`
        
        :param limit=None:
          a numerical value which usually renders as a ``LIMIT``
          expression in the resulting select.  Backends that don't
          support ``LIMIT`` will attempt to provide similar
          functionality.    This parameter is typically specified more naturally
          using the :meth:`.Select.limit` method on an existing
          :class:`.Select`.
        
          .. seealso::
        
            :meth:`.Select.limit`
        
        :param offset=None:
          a numeric value which usually renders as an ``OFFSET``
          expression in the resulting select.  Backends that don't
          support ``OFFSET`` will attempt to provide similar
          functionality.  This parameter is typically specified more naturally
          using the :meth:`.Select.offset` method on an existing
          :class:`.Select`.
        
          .. seealso::
        
            :meth:`.Select.offset`
        
        :param order_by:
          a scalar or list of :class:`.ClauseElement` objects which will
          comprise the ``ORDER BY`` clause of the resulting select.
          This parameter is typically specified more naturally using the
          :meth:`.Select.order_by` method on an existing :class:`.Select`.
        
          .. seealso::
        
            :meth:`.Select.order_by`
        
        :param use_labels=False:
          when ``True``, the statement will be generated using labels
          for each column in the columns clause, which qualify each
          column with its parent table's (or aliases) name so that name
          conflicts between columns in different tables don't occur.
          The format of the label is <tablename>_<column>.  The "c"
          collection of the resulting :class:`.Select` object will use these
          names as well for targeting column members.
        
          This parameter can also be specified on an existing
          :class:`.Select` object using the :meth:`.Select.apply_labels`
          method.
        
          .. seealso::
        
            :meth:`.Select.apply_labels`
    
    subquery(alias, *args, **kwargs)
        Return an :class:`.Alias` object derived
        from a :class:`.Select`.
        
        name
          alias name
        
        \*args, \**kwargs
        
          all other arguments are delivered to the
          :func:`select` function.
    
    table(name, *columns)
        Produce a new :class:`.TableClause`.
        
        The object returned is an instance of :class:`.TableClause`, which
        represents the "syntactical" portion of the schema-level
        :class:`~.schema.Table` object.
        It may be used to construct lightweight table constructs.
        
        .. versionchanged:: 1.0.0 :func:`.expression.table` can now
           be imported from the plain ``sqlalchemy`` namespace like any
           other SQL element.
        
        :param name: Name of the table.
        
        :param columns: A collection of :func:`.expression.column` constructs.
    
    tablesample(selectable, sampling, name=None, seed=None)
        Return a :class:`.TableSample` object.
        
        :class:`.TableSample` is an :class:`.Alias` subclass that represents
        a table with the TABLESAMPLE clause applied to it.
        :func:`~.expression.tablesample`
        is also available from the :class:`.FromClause` class via the
        :meth:`.FromClause.tablesample` method.
        
        The TABLESAMPLE clause allows selecting a randomly selected approximate
        percentage of rows from a table. It supports multiple sampling methods,
        most commonly BERNOULLI and SYSTEM.
        
        e.g.::
        
            from sqlalchemy import func
        
            selectable = people.tablesample(
                        func.bernoulli(1),
                        name='alias',
                        seed=func.random())
            stmt = select([selectable.c.people_id])
        
        Assuming ``people`` with a column ``people_id``, the above
        statement would render as::
        
            SELECT alias.people_id FROM
            people AS alias TABLESAMPLE bernoulli(:bernoulli_1)
            REPEATABLE (random())
        
        .. versionadded:: 1.1
        
        :param sampling: a ``float`` percentage between 0 and 100 or
            :class:`.functions.Function`.
        
        :param name: optional alias name
        
        :param seed: any real-valued SQL expression.  When specified, the
         REPEATABLE sub-clause is also rendered.
    
    text(text, bind=None, bindparams=None, typemap=None, autocommit=None)
        Construct a new :class:`.TextClause` clause, representing
        a textual SQL string directly.
        
        E.g.::
        
            from sqlalchemy import text
        
            t = text("SELECT * FROM users")
            result = connection.execute(t)
        
        The advantages :func:`.text` provides over a plain string are
        backend-neutral support for bind parameters, per-statement
        execution options, as well as
        bind parameter and result-column typing behavior, allowing
        SQLAlchemy type constructs to play a role when executing
        a statement that is specified literally.  The construct can also
        be provided with a ``.c`` collection of column elements, allowing
        it to be embedded in other SQL expression constructs as a subquery.
        
        Bind parameters are specified by name, using the format ``:name``.
        E.g.::
        
            t = text("SELECT * FROM users WHERE id=:user_id")
            result = connection.execute(t, user_id=12)
        
        For SQL statements where a colon is required verbatim, as within
        an inline string, use a backslash to escape::
        
            t = text("SELECT * FROM users WHERE name='\:username'")
        
        The :class:`.TextClause` construct includes methods which can
        provide information about the bound parameters as well as the column
        values which would be returned from the textual statement, assuming
        it's an executable SELECT type of statement.  The
        :meth:`.TextClause.bindparams` method is used to provide bound
        parameter detail, and :meth:`.TextClause.columns` method allows
        specification of return columns including names and types::
        
            t = text("SELECT * FROM users WHERE id=:user_id").\
                    bindparams(user_id=7).\
                    columns(id=Integer, name=String)
        
            for id, name in connection.execute(t):
                print(id, name)
        
        The :func:`.text` construct is used in cases when
        a literal string SQL fragment is specified as part of a larger query,
        such as for the WHERE clause of a SELECT statement::
        
            s = select([users.c.id, users.c.name]).where(text("id=:user_id"))
            result = connection.execute(s, user_id=12)
        
        :func:`.text` is also used for the construction
        of a full, standalone statement using plain text.
        As such, SQLAlchemy refers
        to it as an :class:`.Executable` object, and it supports
        the :meth:`Executable.execution_options` method.  For example,
        a :func:`.text` construct that should be subject to "autocommit"
        can be set explicitly so using the
        :paramref:`.Connection.execution_options.autocommit` option::
        
            t = text("EXEC my_procedural_thing()").\
                    execution_options(autocommit=True)
        
        Note that SQLAlchemy's usual "autocommit" behavior applies to
        :func:`.text` constructs implicitly - that is, statements which begin
        with a phrase such as ``INSERT``, ``UPDATE``, ``DELETE``,
        or a variety of other phrases specific to certain backends, will
        be eligible for autocommit if no transaction is in progress.
        
        :param text:
          the text of the SQL statement to be created.  use ``:<param>``
          to specify bind parameters; they will be compiled to their
          engine-specific format.
        
        :param autocommit:
          Deprecated.  Use .execution_options(autocommit=<True|False>)
          to set the autocommit option.
        
        :param bind:
          an optional connection or engine to be used for this text query.
        
        :param bindparams:
          Deprecated.  A list of :func:`.bindparam` instances used to
          provide information about parameters embedded in the statement.
          This argument now invokes the :meth:`.TextClause.bindparams`
          method on the construct before returning it.  E.g.::
        
              stmt = text("SELECT * FROM table WHERE id=:id",
                        bindparams=[bindparam('id', value=5, type_=Integer)])
        
          Is equivalent to::
        
              stmt = text("SELECT * FROM table WHERE id=:id").\
                        bindparams(bindparam('id', value=5, type_=Integer))
        
          .. deprecated:: 0.9.0 the :meth:`.TextClause.bindparams` method
             supersedes the ``bindparams`` argument to :func:`.text`.
        
        :param typemap:
          Deprecated.  A dictionary mapping the names of columns
          represented in the columns clause of a ``SELECT`` statement
          to type objects,
          which will be used to perform post-processing on columns within
          the result set.  This parameter now invokes the
          :meth:`.TextClause.columns` method, which returns a
          :class:`.TextAsFrom` construct that gains a ``.c`` collection and
          can be embedded in other expressions.  E.g.::
        
              stmt = text("SELECT * FROM table",
                            typemap={'id': Integer, 'name': String},
                        )
        
          Is equivalent to::
        
              stmt = text("SELECT * FROM table").columns(id=Integer,
                                                         name=String)
        
          Or alternatively::
        
              from sqlalchemy.sql import column
              stmt = text("SELECT * FROM table").columns(
                                    column('id', Integer),
                                    column('name', String)
                                )
        
          .. deprecated:: 0.9.0 the :meth:`.TextClause.columns` method
             supersedes the ``typemap`` argument to :func:`.text`.
        
        .. seealso::
        
            :ref:`sqlexpression_text` - in the Core tutorial
        
            :ref:`orm_tutorial_literal_sql` - in the ORM tutorial
    
    true()
        Return a constant :class:`.True_` construct.
        
        E.g.::
        
            >>> from sqlalchemy import true
            >>> print select([t.c.x]).where(true())
            SELECT x FROM t WHERE true
        
        A backend which does not support true/false constants will render as
        an expression against 1 or 0::
        
            >>> print select([t.c.x]).where(true())
            SELECT x FROM t WHERE 1 = 1
        
        The :func:`.true` and :func:`.false` constants also feature
        "short circuit" operation within an :func:`.and_` or :func:`.or_`
        conjunction::
        
            >>> print select([t.c.x]).where(or_(t.c.x > 5, true()))
            SELECT x FROM t WHERE true
        
            >>> print select([t.c.x]).where(and_(t.c.x > 5, false()))
            SELECT x FROM t WHERE false
        
        .. versionchanged:: 0.9 :func:`.true` and :func:`.false` feature
           better integrated behavior within conjunctions and on dialects
           that don't support true/false constants.
        
        .. seealso::
        
            :func:`.false`
    
    tuple_(*clauses, **kw)
        Return a :class:`.Tuple`.
        
        Main usage is to produce a composite IN construct::
        
            from sqlalchemy import tuple_
        
            tuple_(table.c.col1, table.c.col2).in_(
                [(1, 2), (5, 12), (10, 19)]
            )
        
        .. warning::
        
            The composite IN construct is not supported by all backends,
            and is currently known to work on PostgreSQL and MySQL,
            but not SQLite.   Unsupported backends will raise
            a subclass of :class:`~sqlalchemy.exc.DBAPIError` when such
            an expression is invoked.
    
    type_coerce(expression, type_)
        Associate a SQL expression with a particular type, without rendering
        ``CAST``.
        
        E.g.::
        
            from sqlalchemy import type_coerce
        
            stmt = select([
                type_coerce(log_table.date_string, StringDateTime())
            ])
        
        The above construct will produce a :class:`.TypeCoerce` object, which
        renders SQL that labels the expression, but otherwise does not
        modify its value on the SQL side::
        
            SELECT date_string AS anon_1 FROM log
        
        When result rows are fetched, the ``StringDateTime`` type
        will be applied to result rows on behalf of the ``date_string`` column.
        The rationale for the "anon_1" label is so that the type-coerced
        column remains separate in the list of result columns vs. other
        type-coerced or direct values of the target column.  In order to
        provide a named label for the expression, use
        :meth:`.ColumnElement.label`::
        
            stmt = select([
                type_coerce(
                    log_table.date_string, StringDateTime()).label('date')
            ])
        
        
        A type that features bound-value handling will also have that behavior
        take effect when literal values or :func:`.bindparam` constructs are
        passed to :func:`.type_coerce` as targets.
        For example, if a type implements the
        :meth:`.TypeEngine.bind_expression`
        method or :meth:`.TypeEngine.bind_processor` method or equivalent,
        these functions will take effect at statement compilation/execution
        time when a literal value is passed, as in::
        
            # bound-value handling of MyStringType will be applied to the
            # literal value "some string"
            stmt = select([type_coerce("some string", MyStringType)])
        
        :func:`.type_coerce` is similar to the :func:`.cast` function,
        except that it does not render the ``CAST`` expression in the resulting
        statement.
        
        :param expression: A SQL expression, such as a :class:`.ColumnElement`
         expression or a Python string which will be coerced into a bound
         literal value.
        
        :param type_: A :class:`.TypeEngine` class or instance indicating
         the type to which the expression is coerced.
        
        .. seealso::
        
            :func:`.cast`
    
    union(*selects, **kwargs)
        Return a ``UNION`` of multiple selectables.
        
        The returned object is an instance of
        :class:`.CompoundSelect`.
        
        A similar :func:`union()` method is available on all
        :class:`.FromClause` subclasses.
        
        \*selects
          a list of :class:`.Select` instances.
        
        \**kwargs
           available keyword arguments are the same as those of
           :func:`select`.
    
    union_all(*selects, **kwargs)
        Return a ``UNION ALL`` of multiple selectables.
        
        The returned object is an instance of
        :class:`.CompoundSelect`.
        
        A similar :func:`union_all()` method is available on all
        :class:`.FromClause` subclasses.
        
        \*selects
          a list of :class:`.Select` instances.
        
        \**kwargs
          available keyword arguments are the same as those of
          :func:`select`.
    
    update(table, whereclause=None, values=None, inline=False, bind=None, prefixes=None, returning=None, return_defaults=False, preserve_parameter_order=False, **dialect_kw)
        Construct an :class:`.Update` object.
        
        E.g.::
        
            from sqlalchemy import update
        
            stmt = update(users).where(users.c.id==5).\
                    values(name='user #5')
        
        Similar functionality is available via the
        :meth:`~.TableClause.update` method on
        :class:`.Table`::
        
            stmt = users.update().\
                        where(users.c.id==5).\
                        values(name='user #5')
        
        :param table: A :class:`.Table` object representing the database
         table to be updated.
        
        :param whereclause: Optional SQL expression describing the ``WHERE``
         condition of the ``UPDATE`` statement.   Modern applications
         may prefer to use the generative :meth:`~Update.where()`
         method to specify the ``WHERE`` clause.
        
         The WHERE clause can refer to multiple tables.
         For databases which support this, an ``UPDATE FROM`` clause will
         be generated, or on MySQL, a multi-table update.  The statement
         will fail on databases that don't have support for multi-table
         update statements.  A SQL-standard method of referring to
         additional tables in the WHERE clause is to use a correlated
         subquery::
        
            users.update().values(name='ed').where(
                    users.c.name==select([addresses.c.email_address]).\
                                where(addresses.c.user_id==users.c.id).\
                                as_scalar()
                    )
        
         .. versionchanged:: 0.7.4
             The WHERE clause of UPDATE can refer to multiple tables.
        
        :param values:
          Optional dictionary which specifies the ``SET`` conditions of the
          ``UPDATE``.  If left as ``None``, the ``SET``
          conditions are determined from those parameters passed to the
          statement during the execution and/or compilation of the
          statement.   When compiled standalone without any parameters,
          the ``SET`` clause generates for all columns.
        
          Modern applications may prefer to use the generative
          :meth:`.Update.values` method to set the values of the
          UPDATE statement.
        
        :param inline:
          if True, SQL defaults present on :class:`.Column` objects via
          the ``default`` keyword will be compiled 'inline' into the statement
          and not pre-executed.  This means that their values will not
          be available in the dictionary returned from
          :meth:`.ResultProxy.last_updated_params`.
        
        :param preserve_parameter_order: if True, the update statement is
          expected to receive parameters **only** via the :meth:`.Update.values`
          method, and they must be passed as a Python ``list`` of 2-tuples.
          The rendered UPDATE statement will emit the SET clause for each
          referenced column maintaining this order.
        
          .. versionadded:: 1.0.10
        
          .. seealso::
        
            :ref:`updates_order_parameters` - full example of the
            :paramref:`~sqlalchemy.sql.expression.update.preserve_parameter_order` flag
        
        If both ``values`` and compile-time bind parameters are present, the
        compile-time bind parameters override the information specified
        within ``values`` on a per-key basis.
        
        The keys within ``values`` can be either :class:`.Column`
        objects or their string identifiers (specifically the "key" of the
        :class:`.Column`, normally but not necessarily equivalent to
        its "name").  Normally, the
        :class:`.Column` objects used here are expected to be
        part of the target :class:`.Table` that is the table
        to be updated.  However when using MySQL, a multiple-table
        UPDATE statement can refer to columns from any of
        the tables referred to in the WHERE clause.
        
        The values referred to in ``values`` are typically:
        
        * a literal data value (i.e. string, number, etc.)
        * a SQL expression, such as a related :class:`.Column`,
          a scalar-returning :func:`.select` construct,
          etc.
        
        When combining :func:`.select` constructs within the values
        clause of an :func:`.update` construct,
        the subquery represented by the :func:`.select` should be
        *correlated* to the parent table, that is, providing criterion
        which links the table inside the subquery to the outer table
        being updated::
        
            users.update().values(
                    name=select([addresses.c.email_address]).\
                            where(addresses.c.user_id==users.c.id).\
                            as_scalar()
                )
        
        .. seealso::
        
            :ref:`inserts_and_updates` - SQL Expression
            Language Tutorial
    
    within_group(element, *order_by)
        Produce a :class:`.WithinGroup` object against a function.
        
        Used against so-called "ordered set aggregate" and "hypothetical
        set aggregate" functions, including :class:`.percentile_cont`,
        :class:`.rank`, :class:`.dense_rank`, etc.
        
        :func:`~.expression.within_group` is usually called using
        the :meth:`.FunctionElement.within_group` method, e.g.::
        
            from sqlalchemy import within_group
            stmt = select([
                department.c.id,
                func.percentile_cont(0.5).within_group(
                    department.c.salary.desc()
                )
            ])
        
        The above statement would produce SQL similar to
        ``SELECT department.id, percentile_cont(0.5)
        WITHIN GROUP (ORDER BY department.salary DESC)``.
        
        :param element: a :class:`.FunctionElement` construct, typically
         generated by :data:`~.expression.func`.
        :param \*order_by: one or more column elements that will be used
         as the ORDER BY clause of the WITHIN GROUP construct.
        
        .. versionadded:: 1.1
        
        .. seealso::
        
            :data:`.expression.func`
        
            :func:`.expression.over`

DATA
    BLANK_SCHEMA = symbol('blank_schema')
    __all__ = ['ARRAY', 'BIGINT', 'BINARY', 'BLANK_SCHEMA', 'BLOB', 'BOOLE...
    __version__ = '1.2.1'
    func = <sqlalchemy.sql.functions._FunctionGenerator object>
    modifier = <sqlalchemy.sql.functions._FunctionGenerator object>

VERSION
    1.2.1


